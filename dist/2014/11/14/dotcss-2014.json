{
  "id": "/2014/11/14/dotcss-2014",
  "title": "dotCSS 2014",
  "url": "http://meetups.pixelastic.com//2014/11/14/dotcss-2014/",
  "tags": [
    "dotcss"
  ],
  "date": 1415919600,
  "html": "<p>Vendredi après-midi avait lieu la première conférence\n<a href=\"http://www.dotcss.eu/\">dotCSS</a>. Comme d&#39;habitude\npour les dot conferences, le lieu était magique. Cette fois-ci, au théatre des\nvariétés, sur les grands boulevards.</p>\n\n<p>La demi-journée a été riche en informations autour de CSS, depuis sa création,\njusque son futur, les choses bizarres qu&#39;on peut faire avec, les outils qui\ntournent autour et son intégration au sein d&#39;une équipe aux compétences\ndiverses.</p>\n\n<p><img src=\"/public/img/2014-11-15/dotcss.jpg\" alt=\"dotCSS\"></p>\n\n<p>Le talk d&#39;ouverture était de <a href=\"https://twitter.com/glazou\">Daniel Glazman</a>, co-chairman du W3C. Il a rappellé\nqu&#39;il était &quot;juste&quot; co-chairman, et pas co-boss. Que ce n&#39;était pas lui qui\nprenait les décisions finales quand à l&#39;orientation du web, mais qu&#39;il avait\nplus un rôle d&#39;huile entre les différentes pièces, un facilitateur de débats\n(souvent houleux).</p>\n\n<p>Le W3C est un consortium de représentant de sociétés privées et des grands\nacteurs du web, de fabricants de navigateurs, de sites à fort traffic, de\nfabricant de hardware, etc. Ils se mettent d&#39;accord pour donner un axe de\ntravail pour l&#39;amélioration des technos du web (CSS entre autres). Mais <em>chaque\nmembre a son propre planning, ses propres objectifs</em> et le rôle du W3C est de\nréussir à trouver un compromis qui conviennent à tout le monde. Et parfois, ces\nconsensus donnent quelque chose d&#39;hybride qui ne convient réellement\nà personne.</p>\n\n<p>Retrospectivement, on peut dire que plusieurs erreurs ont été faites lors de la\ncréation de CSS selon ce principe. Par exemple la fusion des marges, le\nprincipe du box-model, ou la complexité à réussir à centrer verticalement du\ntexte. Pour leur défense, il faut bien avouer que CSS était initialement prévu\npour donner un peu de style à des rapports académiques, à du texte pur et dur,\npas à faire des mises en pages complexes dépendantes de la résolution d&#39;écran,\nde la vitesse de la bande passante et de la densité de pixels comme on lui\ndemande aujourd&#39;hui.</p>\n\n<p>Glazou a terminé par nous présenter, non sans trolls, les prochaines shiny\nfeatures de CSS. <em>Les tant attendues variables arrivent enfin !</em> Sauf que c&#39;est\npas exactement des variables, ce sont des Custom Inherited Properties qui ne\nsont donc pas globales, mais qui cascadent depuis un élément parent vers ses\ndescendants.</p>\n\n<p>Pour aligner du texte verticalement, on a le fantastique flexbox qui permet de\nfaire les mises en pages les plus folles au prix d&#39;une syntaxe complexe avec\nX propriétés différentes pouvant prendre Y valeurs possibles.</p>\n\n<p>Et puis, il y a le nouveau sélecteur <code>:matches()</code> qui est plus du sucre\nsyntaxique et qui permet de simplifier l&#39;écriture de certains sélecteurs (par\nexemple <code>:matches(section, article) :matches(h1, h2)</code> plutot que d&#39;écrire\n<code>section h1, section h2, article h1, article h2</code>.</p>\n\n<p>Dans le même ordre d&#39;idées, des améliorations à <code>:nth-child()</code> sont dans le\npipe, pour pouvoir préciser un sélecteur afin de ne compter que certains\néléments.</p>\n\n<p>On parle aussi d&#39;une syntaxe proposée pour pouvoir sélectionner un élément\nautre que celui qui se trouve en bout de chaine d&#39;un sélecteur. Aujourd&#39;hui on\npeut écrire <code>div p</code> pour sélectionner tous les paragraphes dans des divs, mais on ne\npeut pas écrire de sélecteur pour sélectionner tous les divs qui contiennent\ndes paragraphes.</p>\n\n<p>Mais les modifications sans doute les plus importantes à mon sens seraient de\npouvoir avoir accès au moteur de parsing CSS, en read-only, depuis Javascript.\nNe plus être obligé de reparser les règles CSS à la main pour calculer la\ntaille d&#39;une <code>font</code> en pixels ou la valeur d&#39;une couleur à un point x au milieu\nd&#39;un <code>linear-gradient</code>. Puisque le parser CSS a déjà fait ce travail, il serait\nbon qu&#39;on puisse y accéder directement.</p>\n\n<p>Une très bonne intro, aussi bien tournée vers le passé que le futur, pour\ncommencer ces conférences dotCSS !</p>\n\n<h2>Bridging the gap between developers and designers</h2>\n\n<p>Le second speaker faisait parti de ces nombreux speakers français qui ont fait\nl&#39;effort de présenter en anglais pour l&#39;auditoire en grande partie\nnon-francophone. <a href=\"https://twitter.com/kaelig\">Kaelig</a> travaille aujourd&#39;hui au\nNY Times après avoir bossé au Guardian.</p>\n\n<p>Sa présentation n&#39;était pas réellement technique, mais portait plus sur la\nmanière de faire en sorte que <em>les développeurs front et les designers\ntravaillent mieux ensemble</em>. Il est indispensable pour lui que cela passe par un\npartage d&#39;un langue commune. Que quand un designer indique que le header doit\nêtre &quot;gris clair&quot;, il n&#39;y ai pas d&#39;ambiguité sur quel gris il faut utiliser.</p>\n\n<p>Pour cela, ils utilisent une feuille recensant toutes les couleurs utilisées\ndans leur site, en donnant un nom à chacun (du type <code>neutral-1</code>,\n<code>corporate-color</code>, etc) et la valeur hexadécimale qui va avec. En faisant\nainsi, designers et développeurs parlent bien toujours des mêmes couleurs et se\nsont créés un dictionnaire de mots partagés. Le nom de la couleur que les\ndesigners emploient à l&#39;oral pour discuter entre eux est aussi le nom de la\nvariable dans les fichiers CSS. La communication entre les deux mondes est\nalors grandement simplifiée.</p>\n\n<p>Ils appliquent le même principe pour les fonts, en créant une matrice des\ndifférentes combinaisons de font/size utilisées, en les réferencant par leur\nfonction comme par exemple <code>heading-3</code> ou <code>maintext-2</code>. Ici aussi, le\n<em>vocabulaire des designers a été uniformisé, et les mêmes termes sont utilisés\ndans les feuilles de styles</em>, ce qui aide en plus à développer directement en\npeer programming designer/developer dans le browser.</p>\n\n<p>Pour les breakpoints RWD, même histoire, ils ont arreté de mettre des valeurs\nen <code>em</code> dans leurs media-queries car cela n&#39;évoque rien à la lecture. A la\nplace, ils ont créé des mixins qui peuvent être facilement comprises à la\nlecture et ont abstrait les détails en dessous. Par exemple, <code>mq(from:tablet)</code>,\n<code>mq(from:phone, to:tablet)</code>, <code>mq(until:tablet)</code>.</p>\n\n<p>Niveau grille, même combat, création de helpers pour pouvoir rapidement définir\n&quot;je veux trois colonnes, mais en desktop en avoir 7&quot;. Le code SCSS directement\nlisible exprime bien cette intention, on a des helpers pour définir des règles\ndifférentes pour phone et desktop, et on exprime avec d&#39;autres helpers le\nnombre de colonnes qu&#39;on souhaite. <em>Toute la complexité de largeur de colonnes,\nlargeur des marges, breakpoints est cachée</em> dans ces mixins (qui sont le\nterritoire des devs), alors que <em>l&#39;intention est exposée un niveau plus haut</em>\n(territoire partagé dev/designer).</p>\n\n<p>Le fait de partager la même langue pour parler de la même chose aide à la\ncohésion de l&#39;équipe et à l&#39;appropriation du projet. Il est plus facile de\nmodeler le code pour qu&#39;il suive les idées du designer que de remodeler le\ndesigner pour qu&#39;il parle comme du code. En partageant tout cela entre les deux\nterritoires, on augmente l&#39;appropriation du code par les designers et\nl&#39;appropriation du design par les devs.</p>\n\n<h2>Ten principles for effective front-end dev</h2>\n\n<p><a href=\"https://twitter.com/csswizardry\">Harry Roberts</a>, créateur de\n<a href=\"https://github.com/inuitcss\">inuit.css</a> nous a ensuite\n<a href=\"https://speakerdeck.com/csswizardry/ten-principles-for-effective-front-end-development\">parlé</a>\nde quelque chose d&#39;un peu plus meta que le CSS.</p>\n\n<p>D&#39;après lui, dans un projet web, il vaut mieux avoir une connaissance générale\nde tous les métiers qui vont prendre part au projet, plutot que d&#39;être expert\nuniquement de la partie qui nous concerne. Dans cette optique, il nous a donné\n10 conseils pour ne pas perdre de vue l&#39;essentiel. Plusieurs de ses conseils se\nrecoupaient, je vais donc les synthétiser.</p>\n\n<p>Tout d&#39;abord, <em>l&#39;option la plus simple est souvent la meilleure</em>. Plus on va\nvite, moins ça coute cher au client. Le meilleur code est l&#39;absence de code,\nplus on écrit de code, plus on écrit de PPOF (Potential Point of Failure). En\nréduisant la complexité d&#39;une solution, on la rends plus légère et donc plus\nfacile à comprendre, à apprendre à quelqu&#39;un, à maintenir et à débugguer. Une\nsolution simple aura moins tendance à casser, et nécessite moins d&#39;overhead du\ncodeur pour la comprendre. &quot;Le mieux est l&#39;ennemi du bien&quot;, il vaut mieux avoir\nquelque chose de <em>good enough</em> aujourd&#39;hui, que quelque chose de parfait\ndemain.</p>\n\n<p>Ensuite, il ne faut pas oublier l&#39;objectif. <em>Le code n&#39;est qu&#39;un outil pour\natteindre cet objectif</em>. Il est nécessaire de comprendre ce qui coute et ce qui\napporte de la valeur au client, afin de ne pas lui faire perdre d&#39;argent. Pour\ncela, il est nécessaire d&#39;aller voir les autres personnes, d&#39;autres métiers qui\ntravaillent sur le même projet. Le travail d&#39;un intégrateur web n&#39;est pas de\nreproduire des PSDs, enfermé dans sa bulle avec son casque sur les oreilles. Il\nlui faut aller voir les autres, et faire ce qui est bon pour le produit final.</p>\n\n<p>Finalement, il ne faut pas être trop attaché à son code. Le code est jetable et\ns&#39;il est modulable il est facile d&#39;en jeter un morceau en gardant le reste. Les\ndemandes du projet vont changer régulièrement, il faut être prêt à accepter le\nchangement, à jeter du code, à en écrire du nouveau. Dans le même ordre d&#39;idée\nil est inutile de prévoir à l&#39;avance tout les cas particuliers, car ils\nn&#39;arriveront peut-être jamais, peut-être la fonctionnalité va-t&#39;elle changer en\ncours de route.</p>\n\n<p><img src=\"/public/img/2014-11-15/bestdev.jpg\" alt=\"Un bon dev touche à tout\"></p>\n\n<h2>Keep Calm and Write Sass</h2>\n\n<p><a href=\"https://twitter.com/hugogiraudel\">Hugo Giraudel</a> nous a ensuite <a href=\"http://slides.com/hugogiraudel/keep-calm-and-write-sass\">parlé de\nSass</a>, avec une liste\nde bonnes pratiques et de choses à ne pas faire. Il a aussi abordé un peu le\ntooling autour de Sass.</p>\n\n<p>Sass est un preprocesseur CSS, qui apporte des briques habituellement trouvées\ndans les langages de prog : variable, conditions, boucles, fonctions, etc.\n<em>C&#39;est assez facile de vouloir en faire trop avec Sass, juste parce qu&#39;on peut\nle faire.</em> Mais ça ne sert à rien, et il faut rester KYSSS (Keep Your Sass\nSimple and Straightforward).</p>\n\n<p>Il ne faut pas oublier que Sass permet de se positionner une couche au dessus\nde CSS, et qu&#39;il permet donc d&#39;exposer des méthodes pour générer du CSS. Il\nfaut que ces méthodes soient peu nombreuses, avec une API publique simple. Ici,\n<em>les bonnes pratiques du Clean Code habituelles s&#39;appliquent</em> : des noms explicites,\ndes comportements devinables, pas des tas d&#39;arguments différents pour gérer\nplusieurs cas de figures différents, etc.</p>\n\n<p>Sass incite aussi au nesting de sélecteurs à outrance. C&#39;est très facile\nà faire en Sass, mais ça donne des feuilles de styles finales avec des\nsélecteurs bien trop précis et bien trop difficiles à overrider. Il faut\nlimiter au maximum le niveau de nesting.</p>\n\n<p>Finalement, il a évoqué plusieurs outils comme\n<a href=\"https://github.com/causes/scss-lint\">scss-lint</a>  qui est un linter de fichiers\nSass, <a href=\"https://github.com/SassDoc/sassdoc\">sassdoc</a>  qui permet de générer une\ndocumentation HTML avec des exemples à partir de fichiers source Sass et enfin\n<a href=\"https://github.com/ericam/true\">True</a> qui permet de faire des tests unitaires\nsur les retours des fonctions Sass.</p>\n\n<h2>WTF CSS ?!</h2>\n\n<p>Et la dernière <a href=\"http://estelle.github.io/doyouknowcss/\">conférence</a> à laquelle\nj&#39;ai pu prendre des notes avant que la batterie de mon laptop et les neurones\nde mon cerveau ne lachent fut celle d&#39;<a href=\"https://twitter.com/estellevw\">Estelle\nWeyl</a>.</p>\n\n<p>Estelle nous a montré quelques astuces tout droit tirées des coins les plus\nreculés du monde du CSS. Tout d&#39;abord, grâce à <code>counter-increment</code>, il est\npossible de garder un compteur en CSS. Par exemple la page actuelle de sa\nprésentation était indiquée grâce à ce système, et elle nous a montré comment\nafficher le nombre d&#39;erreurs d&#39;un formulaire rien qu&#39;avec du css.</p>\n\n<p>Elle nous aussi rappellé qu&#39;il existait un grand nombre de pseudo-selecteurs\ndans la même veine que <code>:valid</code> et <code>:invalid</code> mais qu&#39;ils ne sont pas encore\ncorrectement implémentés partout (notamment <code>:default</code> et\n<code>:placeholder-shown</code>).</p>\n\n<p>On a ensuite fait un petit rappel des spécificités des sélecteurs (récapitulé\nsous forme de poisson sur <a href=\"http://specifishity.com/\">Specifishity</a>), et appris\nque les sélecteurs <code>&gt;</code>, <code>+</code>, <code>~</code>  et <code>:not()</code> n&#39;ont aucune spécificité. Donc\n<code>div p</code> a le même poids que <code>p + p</code> et <code>img</code> pèse aussi lourd que <code>:not(img)</code>.\nIl est bon de le rappeller.</p>\n\n<p>Elle a ensuite parlé de l&#39;horreur absolue qu&#39;est <code>!important</code> dans du CSS, qui\npermet d&#39;overrider toutes les autres règles et qui est lui-même impossible\nà overrider. Mais elle a aussi donné une astuce pour réussir à overrider un\n<code>!important</code>... astuce que je ne donnerai pas ici, vous pourriez avoir envie de\nl&#39;utiliser ! :)</p>\n\n<p>Pour finir, elle nous a montré un moyen de faire du browser sniffing\ndirectement depuis le navigateur, pour peu que celui-ci supporte <code>@supports</code>\n(recursive joke inside). En testant des propriétés prefixées <code>-webkit</code> ou\n<code>-moz</code> on peut comme ça appliquer certaines règles uniquement à un moteur de\nrendu ou un autre. Pas sur que ce soit une brillante idée, mais ça peut\ndépanner.</p>\n\n<p><img src=\"/public/img/2014-11-15/theatre.jpg\" alt=\"Théatre des Variétés\"></p>\n\n<h2>Fin des talks</h2>\n\n<p><iframe 
class="youtube-player"
type="text/html" 
width="640" 
height="390"
src="http://www.youtube.com/embed/L8w3v9m6G04"
frameborder="0"
allowfullscreen
></iframe></p>\n\n<p>Les trois derniers talks étaient de Nicolas Gallagher qui nous a parlé de\ncomment ils ont modularisé leur UI chez Twitter, en utilisant des Web\nComponents. Ce qu&#39;il mettait en avant faisait echo à pas mal de choses dites\nprécedemment : aligner les developpeurs et les designers sur un langage commun,\nmasquer la complexité en dessous et laisser une API publique simple et qui\nexprime bien l&#39;intention.</p>\n\n<p>Bert Bos, co-créateur de CSS nous a parlé des challenges que posent les\ndifférents règles de typographie des différents pays du monde pour le CSS.\nDifférents types de guillemets selon les langues, espaces avant la ponctuation\nou non, italique qui s&#39;applique ou non à la ponctuation, etc. C&#39;était plus une\nlettre ouverte pour sensibiliser à ces questions.</p>\n\n<p>Et finalement Ana Tudor nous a complétement bluffé en nous faisant faire des\n<code>cos</code> et <code>sin</code> pour dessiner des tracés chromatiques à coup de boucles en Sass.</p>\n\n<h2>Conclusion</h2>\n\n<p>Toutes ces conférences l&#39;ont très bien rappellé : le langage CSS est riche, et\nil est possible de faire des choses formidables avec, mais il est aussi\ncomplexe à comprendre et demande de s&#39;y plonger avec sérieux. Nous devons\nmettre en œuvre pour CSS toutes les bonnes pratiques que nous utilisons déjà\npour les autres langages : modularisation, clean code, API publiques, tests\nunitaires.</p>\n\n<p>Cela est d&#39;autant plus important que le CSS est la partie partagée entre les\ndéveloppeurs et les designers, et celle-ci se doit d&#39;être la plus claire et\nrobuste possible pour la cohésion du projet au sein des équipes et sa\nmaintenabilité sur la durée.</p>\n\n<p><img src=\"/public/img/2014-11-15/end.jpg\" alt=\"Merci à l&#39;équipe\"></p>\n\n<p>Ce post est cross-posté sur le <a href=\"http://blog.octo.com/cr-dotcss-2014/\">blog\nOcto</a></p>\n",
  "markdown": "Vendredi après-midi avait lieu la première conférence\r\n[dotCSS](http://www.dotcss.eu/). Comme d'habitude\r\npour les dot conferences, le lieu était magique. Cette fois-ci, au théatre des\r\nvariétés, sur les grands boulevards.\r\n\r\nLa demi-journée a été riche en informations autour de CSS, depuis sa création,\r\njusque son futur, les choses bizarres qu'on peut faire avec, les outils qui\r\ntournent autour et son intégration au sein d'une équipe aux compétences\r\ndiverses.\r\n\r\n![dotCSS](/public/img/2014-11-15/dotcss.jpg)\r\n\r\nLe talk d'ouverture était de [Daniel Glazman](https://twitter.com/glazou), co-chairman du W3C. Il a rappellé\r\nqu'il était \"juste\" co-chairman, et pas co-boss. Que ce n'était pas lui qui\r\nprenait les décisions finales quand à l'orientation du web, mais qu'il avait\r\nplus un rôle d'huile entre les différentes pièces, un facilitateur de débats\r\n(souvent houleux).\r\n\r\nLe W3C est un consortium de représentant de sociétés privées et des grands\r\nacteurs du web, de fabricants de navigateurs, de sites à fort traffic, de\r\nfabricant de hardware, etc. Ils se mettent d'accord pour donner un axe de\r\ntravail pour l'amélioration des technos du web (CSS entre autres). Mais *chaque\r\nmembre a son propre planning, ses propres objectifs* et le rôle du W3C est de\r\nréussir à trouver un compromis qui conviennent à tout le monde. Et parfois, ces\r\nconsensus donnent quelque chose d'hybride qui ne convient réellement\r\nà personne.\r\n\r\nRetrospectivement, on peut dire que plusieurs erreurs ont été faites lors de la\r\ncréation de CSS selon ce principe. Par exemple la fusion des marges, le\r\nprincipe du box-model, ou la complexité à réussir à centrer verticalement du\r\ntexte. Pour leur défense, il faut bien avouer que CSS était initialement prévu\r\npour donner un peu de style à des rapports académiques, à du texte pur et dur,\r\npas à faire des mises en pages complexes dépendantes de la résolution d'écran,\r\nde la vitesse de la bande passante et de la densité de pixels comme on lui\r\ndemande aujourd'hui.\r\n\r\nGlazou a terminé par nous présenter, non sans trolls, les prochaines shiny\r\nfeatures de CSS. *Les tant attendues variables arrivent enfin !* Sauf que c'est\r\npas exactement des variables, ce sont des Custom Inherited Properties qui ne\r\nsont donc pas globales, mais qui cascadent depuis un élément parent vers ses\r\ndescendants.\r\n\r\nPour aligner du texte verticalement, on a le fantastique flexbox qui permet de\r\nfaire les mises en pages les plus folles au prix d'une syntaxe complexe avec\r\nX propriétés différentes pouvant prendre Y valeurs possibles.\r\n\r\nEt puis, il y a le nouveau sélecteur `:matches()` qui est plus du sucre\r\nsyntaxique et qui permet de simplifier l'écriture de certains sélecteurs (par\r\nexemple `:matches(section, article) :matches(h1, h2)` plutot que d'écrire\r\n`section h1, section h2, article h1, article h2`.\r\n\r\nDans le même ordre d'idées, des améliorations à `:nth-child()` sont dans le\r\npipe, pour pouvoir préciser un sélecteur afin de ne compter que certains\r\néléments.\r\n\r\nOn parle aussi d'une syntaxe proposée pour pouvoir sélectionner un élément\r\nautre que celui qui se trouve en bout de chaine d'un sélecteur. Aujourd'hui on\r\npeut écrire `div p` pour sélectionner tous les paragraphes dans des divs, mais on ne\r\npeut pas écrire de sélecteur pour sélectionner tous les divs qui contiennent\r\ndes paragraphes.\r\n\r\nMais les modifications sans doute les plus importantes à mon sens seraient de\r\npouvoir avoir accès au moteur de parsing CSS, en read-only, depuis Javascript.\r\nNe plus être obligé de reparser les règles CSS à la main pour calculer la\r\ntaille d'une `font` en pixels ou la valeur d'une couleur à un point x au milieu\r\nd'un `linear-gradient`. Puisque le parser CSS a déjà fait ce travail, il serait\r\nbon qu'on puisse y accéder directement.\r\n\r\nUne très bonne intro, aussi bien tournée vers le passé que le futur, pour\r\ncommencer ces conférences dotCSS !\r\n\r\n## Bridging the gap between developers and designers\r\n\r\nLe second speaker faisait parti de ces nombreux speakers français qui ont fait\r\nl'effort de présenter en anglais pour l'auditoire en grande partie\r\nnon-francophone. [Kaelig](https://twitter.com/kaelig) travaille aujourd'hui au\r\nNY Times après avoir bossé au Guardian.\r\n\r\nSa présentation n'était pas réellement technique, mais portait plus sur la\r\nmanière de faire en sorte que *les développeurs front et les designers\r\ntravaillent mieux ensemble*. Il est indispensable pour lui que cela passe par un\r\npartage d'un langue commune. Que quand un designer indique que le header doit\r\nêtre \"gris clair\", il n'y ai pas d'ambiguité sur quel gris il faut utiliser.\r\n\r\nPour cela, ils utilisent une feuille recensant toutes les couleurs utilisées\r\ndans leur site, en donnant un nom à chacun (du type `neutral-1`,\r\n`corporate-color`, etc) et la valeur hexadécimale qui va avec. En faisant\r\nainsi, designers et développeurs parlent bien toujours des mêmes couleurs et se\r\nsont créés un dictionnaire de mots partagés. Le nom de la couleur que les\r\ndesigners emploient à l'oral pour discuter entre eux est aussi le nom de la\r\nvariable dans les fichiers CSS. La communication entre les deux mondes est\r\nalors grandement simplifiée.\r\n\r\nIls appliquent le même principe pour les fonts, en créant une matrice des\r\ndifférentes combinaisons de font/size utilisées, en les réferencant par leur\r\nfonction comme par exemple `heading-3` ou `maintext-2`. Ici aussi, le\r\n*vocabulaire des designers a été uniformisé, et les mêmes termes sont utilisés\r\ndans les feuilles de styles*, ce qui aide en plus à développer directement en\r\npeer programming designer/developer dans le browser.\r\n\r\nPour les breakpoints RWD, même histoire, ils ont arreté de mettre des valeurs\r\nen `em` dans leurs media-queries car cela n'évoque rien à la lecture. A la\r\nplace, ils ont créé des mixins qui peuvent être facilement comprises à la\r\nlecture et ont abstrait les détails en dessous. Par exemple, `mq(from:tablet)`,\r\n`mq(from:phone, to:tablet)`, `mq(until:tablet)`.\r\n\r\nNiveau grille, même combat, création de helpers pour pouvoir rapidement définir\r\n\"je veux trois colonnes, mais en desktop en avoir 7\". Le code SCSS directement\r\nlisible exprime bien cette intention, on a des helpers pour définir des règles\r\ndifférentes pour phone et desktop, et on exprime avec d'autres helpers le\r\nnombre de colonnes qu'on souhaite. *Toute la complexité de largeur de colonnes,\r\nlargeur des marges, breakpoints est cachée* dans ces mixins (qui sont le\r\nterritoire des devs), alors que *l'intention est exposée un niveau plus haut*\r\n(territoire partagé dev/designer).\r\n\r\nLe fait de partager la même langue pour parler de la même chose aide à la\r\ncohésion de l'équipe et à l'appropriation du projet. Il est plus facile de\r\nmodeler le code pour qu'il suive les idées du designer que de remodeler le\r\ndesigner pour qu'il parle comme du code. En partageant tout cela entre les deux\r\nterritoires, on augmente l'appropriation du code par les designers et\r\nl'appropriation du design par les devs.\r\n\r\n## Ten principles for effective front-end dev\r\n\r\n[Harry Roberts](https://twitter.com/csswizardry), créateur de\r\n[inuit.css](https://github.com/inuitcss) nous a ensuite\r\n[parlé](https://speakerdeck.com/csswizardry/ten-principles-for-effective-front-end-development)\r\nde quelque chose d'un peu plus meta que le CSS.\r\n\r\nD'après lui, dans un projet web, il vaut mieux avoir une connaissance générale\r\nde tous les métiers qui vont prendre part au projet, plutot que d'être expert\r\nuniquement de la partie qui nous concerne. Dans cette optique, il nous a donné\r\n10 conseils pour ne pas perdre de vue l'essentiel. Plusieurs de ses conseils se\r\nrecoupaient, je vais donc les synthétiser.\r\n\r\nTout d'abord, *l'option la plus simple est souvent la meilleure*. Plus on va\r\nvite, moins ça coute cher au client. Le meilleur code est l'absence de code,\r\nplus on écrit de code, plus on écrit de PPOF (Potential Point of Failure). En\r\nréduisant la complexité d'une solution, on la rends plus légère et donc plus\r\nfacile à comprendre, à apprendre à quelqu'un, à maintenir et à débugguer. Une\r\nsolution simple aura moins tendance à casser, et nécessite moins d'overhead du\r\ncodeur pour la comprendre. \"Le mieux est l'ennemi du bien\", il vaut mieux avoir\r\nquelque chose de _good enough_ aujourd'hui, que quelque chose de parfait\r\ndemain.\r\n\r\nEnsuite, il ne faut pas oublier l'objectif. *Le code n'est qu'un outil pour\r\natteindre cet objectif*. Il est nécessaire de comprendre ce qui coute et ce qui\r\napporte de la valeur au client, afin de ne pas lui faire perdre d'argent. Pour\r\ncela, il est nécessaire d'aller voir les autres personnes, d'autres métiers qui\r\ntravaillent sur le même projet. Le travail d'un intégrateur web n'est pas de\r\nreproduire des PSDs, enfermé dans sa bulle avec son casque sur les oreilles. Il\r\nlui faut aller voir les autres, et faire ce qui est bon pour le produit final.\r\n\r\nFinalement, il ne faut pas être trop attaché à son code. Le code est jetable et\r\ns'il est modulable il est facile d'en jeter un morceau en gardant le reste. Les\r\ndemandes du projet vont changer régulièrement, il faut être prêt à accepter le\r\nchangement, à jeter du code, à en écrire du nouveau. Dans le même ordre d'idée\r\nil est inutile de prévoir à l'avance tout les cas particuliers, car ils\r\nn'arriveront peut-être jamais, peut-être la fonctionnalité va-t'elle changer en\r\ncours de route.\r\n\r\n![Un bon dev touche à tout](/public/img/2014-11-15/bestdev.jpg)\r\n\r\n## Keep Calm and Write Sass\r\n\r\n[Hugo Giraudel](https://twitter.com/hugogiraudel) nous a ensuite [parlé de\r\nSass](http://slides.com/hugogiraudel/keep-calm-and-write-sass), avec une liste\r\nde bonnes pratiques et de choses à ne pas faire. Il a aussi abordé un peu le\r\ntooling autour de Sass.\r\n\r\nSass est un preprocesseur CSS, qui apporte des briques habituellement trouvées\r\ndans les langages de prog : variable, conditions, boucles, fonctions, etc.\r\n*C'est assez facile de vouloir en faire trop avec Sass, juste parce qu'on peut\r\nle faire.* Mais ça ne sert à rien, et il faut rester KYSSS (Keep Your Sass\r\nSimple and Straightforward).\r\n\r\nIl ne faut pas oublier que Sass permet de se positionner une couche au dessus\r\nde CSS, et qu'il permet donc d'exposer des méthodes pour générer du CSS. Il\r\nfaut que ces méthodes soient peu nombreuses, avec une API publique simple. Ici,\r\n*les bonnes pratiques du Clean Code habituelles s'appliquent* : des noms explicites,\r\ndes comportements devinables, pas des tas d'arguments différents pour gérer\r\nplusieurs cas de figures différents, etc.\r\n\r\nSass incite aussi au nesting de sélecteurs à outrance. C'est très facile\r\nà faire en Sass, mais ça donne des feuilles de styles finales avec des\r\nsélecteurs bien trop précis et bien trop difficiles à overrider. Il faut\r\nlimiter au maximum le niveau de nesting.\r\n\r\nFinalement, il a évoqué plusieurs outils comme\r\n[scss-lint](https://github.com/causes/scss-lint)  qui est un linter de fichiers\r\nSass, [sassdoc](https://github.com/SassDoc/sassdoc)  qui permet de générer une\r\ndocumentation HTML avec des exemples à partir de fichiers source Sass et enfin\r\n[True](https://github.com/ericam/true) qui permet de faire des tests unitaires\r\nsur les retours des fonctions Sass.\r\n\r\n## WTF CSS ?!\r\n\r\nEt la dernière [conférence](http://estelle.github.io/doyouknowcss/) à laquelle\r\nj'ai pu prendre des notes avant que la batterie de mon laptop et les neurones\r\nde mon cerveau ne lachent fut celle d'[Estelle\r\nWeyl](https://twitter.com/estellevw).\r\n\r\nEstelle nous a montré quelques astuces tout droit tirées des coins les plus\r\nreculés du monde du CSS. Tout d'abord, grâce à `counter-increment`, il est\r\npossible de garder un compteur en CSS. Par exemple la page actuelle de sa\r\nprésentation était indiquée grâce à ce système, et elle nous a montré comment\r\nafficher le nombre d'erreurs d'un formulaire rien qu'avec du css.\r\n\r\nElle nous aussi rappellé qu'il existait un grand nombre de pseudo-selecteurs\r\ndans la même veine que `:valid` et `:invalid` mais qu'ils ne sont pas encore\r\ncorrectement implémentés partout (notamment `:default` et\r\n`:placeholder-shown`).\r\n\r\nOn a ensuite fait un petit rappel des spécificités des sélecteurs (récapitulé\r\nsous forme de poisson sur [Specifishity](http://specifishity.com/)), et appris\r\nque les sélecteurs `>`, `+`, `~`  et `:not()` n'ont aucune spécificité. Donc\r\n`div p` a le même poids que `p + p` et `img` pèse aussi lourd que `:not(img)`.\r\nIl est bon de le rappeller.\r\n\r\nElle a ensuite parlé de l'horreur absolue qu'est `!important` dans du CSS, qui\r\npermet d'overrider toutes les autres règles et qui est lui-même impossible\r\nà overrider. Mais elle a aussi donné une astuce pour réussir à overrider un\r\n`!important`... astuce que je ne donnerai pas ici, vous pourriez avoir envie de\r\nl'utiliser ! :)\r\n\r\nPour finir, elle nous a montré un moyen de faire du browser sniffing\r\ndirectement depuis le navigateur, pour peu que celui-ci supporte `@supports`\r\n(recursive joke inside). En testant des propriétés prefixées `-webkit` ou\r\n`-moz` on peut comme ça appliquer certaines règles uniquement à un moteur de\r\nrendu ou un autre. Pas sur que ce soit une brillante idée, mais ça peut\r\ndépanner.\r\n\r\n![Théatre des Variétés](/public/img/2014-11-15/theatre.jpg)\r\n\r\n## Fin des talks\r\n\r\n<iframe 
class="youtube-player"
type="text/html" 
width="640" 
height="390"
src="http://www.youtube.com/embed/L8w3v9m6G04"
frameborder="0"
allowfullscreen
></iframe>\r\n\r\nLes trois derniers talks étaient de Nicolas Gallagher qui nous a parlé de\r\ncomment ils ont modularisé leur UI chez Twitter, en utilisant des Web\r\nComponents. Ce qu'il mettait en avant faisait echo à pas mal de choses dites\r\nprécedemment : aligner les developpeurs et les designers sur un langage commun,\r\nmasquer la complexité en dessous et laisser une API publique simple et qui\r\nexprime bien l'intention.\r\n\r\nBert Bos, co-créateur de CSS nous a parlé des challenges que posent les\r\ndifférents règles de typographie des différents pays du monde pour le CSS.\r\nDifférents types de guillemets selon les langues, espaces avant la ponctuation\r\nou non, italique qui s'applique ou non à la ponctuation, etc. C'était plus une\r\nlettre ouverte pour sensibiliser à ces questions.\r\n\r\nEt finalement Ana Tudor nous a complétement bluffé en nous faisant faire des\r\n`cos` et `sin` pour dessiner des tracés chromatiques à coup de boucles en Sass.\r\n\r\n## Conclusion\r\n\r\nToutes ces conférences l'ont très bien rappellé : le langage CSS est riche, et\r\nil est possible de faire des choses formidables avec, mais il est aussi\r\ncomplexe à comprendre et demande de s'y plonger avec sérieux. Nous devons\r\nmettre en œuvre pour CSS toutes les bonnes pratiques que nous utilisons déjà\r\npour les autres langages : modularisation, clean code, API publiques, tests\r\nunitaires.\r\n\r\nCela est d'autant plus important que le CSS est la partie partagée entre les\r\ndéveloppeurs et les designers, et celle-ci se doit d'être la plus claire et\r\nrobuste possible pour la cohésion du projet au sein des équipes et sa\r\nmaintenabilité sur la durée.\r\n\r\n\r\n![Merci à l'équipe](/public/img/2014-11-15/end.jpg)\r\n\r\n\r\nCe post est cross-posté sur le [blog\r\nOcto](http://blog.octo.com/cr-dotcss-2014/)\r\n"
}