<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Meetups</title>
 <link href="http://meetups.pixelastic.com//atom.xml" rel="self"/>
 <link href="http://meetups.pixelastic.com//"/>
 <updated>2015-02-12T13:59:26+01:00</updated>
 <id>http://meetups.pixelastic.com//</id>
 <author>
   <name>Timothée Carry</name>
 </author>

 
 <entry>
   <title>Bref, on a fait une conférence</title>
   <link href="http://meetups.pixelastic.com//2015/02/01/bref-on-fait-une-conference/"/>
   <updated>2015-02-01T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2015/02/01/bref-on-fait-une-conference</id>
   <content type="html">&lt;p&gt;Vendredi soir avait lieu au &lt;a href=&quot;http://www.theatredurondpoint.fr/&quot;&gt;théatre du Rond-Point&lt;/a&gt; une conférence de
&lt;a href=&quot;https://twitter.com/kyank&quot;&gt;Kyan&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/Navo_&quot;&gt;Navo&lt;/a&gt; sur leur processus créatif lors de la conception de la
série &lt;a href=&quot;https://www.youtube.com/user/bref&quot;&gt;Bref&lt;/a&gt;. J&amp;#39;avais déjà eu la chance d&amp;#39;écouter cette conférence il
y a quelques mois, mais la voir en live cette fois-ci m&amp;#39;a donné envie de
partager un compte-rendu des conseils qui y étaient donnés.&lt;/p&gt;

&lt;p&gt;Leurs conseils viennent de leur expérience dans la création d&amp;#39;une série courte
comique, mais la trés grande majorité des conseils peuvent s&amp;#39;appliquer
à n&amp;#39;importe quel acte de création, depuis l&amp;#39;écriture d&amp;#39;un roman à la fondation
d&amp;#39;une startup.&lt;/p&gt;

&lt;h3&gt;Vous avez quelque chose à dire&lt;/h3&gt;

&lt;p&gt;Le premier conseil pour se lancer est de ne pas croire qu&amp;#39;on n&amp;#39;a rien
d&amp;#39;intéressant à dire ou à offrir. On était une centaine dans la salle
à assister à la même conférence, néanmoins si on avait du chacun écrire sur un
papier notre expérience, on aurait tous raconté quelque chose de différent. Un
même événement peut être raconté de manières complétement différentes et aucune
n&amp;#39;est plus légitime qu&amp;#39;une autre.&lt;/p&gt;

&lt;h3&gt;Just do it.&lt;/h3&gt;

&lt;p&gt;Au delà du slogan de Nike, cet adage est l&amp;#39;un des plus importants pour moi.
C&amp;#39;est bien beau d&amp;#39;avoir des idées, mais sans leur réalisation, l&amp;#39;idée ne vaut
rien. J&amp;#39;ai rencontré beaucoup d&amp;#39;&lt;em&gt;entrepreneurs&lt;/em&gt; qui étaient persuadés d&amp;#39;avoir
l&amp;#39;idée du siècle et qui avaient &lt;em&gt;juste&lt;/em&gt; besoin d&amp;#39;un développeur pour la
réaliser.&lt;/p&gt;

&lt;p&gt;C&amp;#39;est pas comme ça que ça marche. C&amp;#39;est extrémement simple d&amp;#39;avoir des idées.
Tout le monde a des idées, et c&amp;#39;est même très probable que d&amp;#39;autres personnes
aient exactement les mêmes idées que vous. Mais imaginer un concept ou un
produit dans sa tête c&amp;#39;est trop facile. Tout le monde peut être un génie
dans sa propre tête. C&amp;#39;est quand on sort son idée dans le monde réel que la
véritable aventure commence.&lt;/p&gt;

&lt;p&gt;Parce qu&amp;#39;une fois qu&amp;#39;on la sort dans le monde extérieur, qu&amp;#39;on la confronte
à d&amp;#39;autres personnes, à un marché, on risque de se prendre des murs, on risque
de se planter. Notre si belle idée n&amp;#39;est finalement peut-être pas viable. Mais
sans cette étape, on ne l&amp;#39;aurait jamais su. Il est donc indispensable de faire
des choses, de passer son idée de simple concept à une réalisation concrète.&lt;/p&gt;

&lt;p&gt;Des gens qui ont des idées il doit y en avoir approximativement 7 milliards sur
Terre. Des gens qui réalisent quelque chose à partir de ces idées, il y en
a déjà beaucoup moins, et ceux qui parviennent au bout de leur réalisation sont
vraiment très peu.&lt;/p&gt;

&lt;p&gt;Faites des choses, tentez, essayez, plantez-vous. Si vous ne vous plantez pas,
c&amp;#39;est que vous n&amp;#39;avez pas innové. Si vous réussissez du premier coup, c&amp;#39;est que
votre idée n&amp;#39;a rien de révolutionnaire.&lt;/p&gt;

&lt;h3&gt;Dumpez&lt;/h3&gt;

&lt;p&gt;Adeptes du &lt;a href=&quot;http://fr.wikipedia.org/wiki/Getting_Things_Done&quot;&gt;GTD&lt;/a&gt; ou de &lt;a href=&quot;http://ankisrs.net/&quot;&gt;Anki&lt;/a&gt;, vous devez connaitre ce principe. Dumpez.
Ne laissez pas votre esprit être encombré de trop de choses. Vous avez une
idée, notez là dans un carnet, envoyez-vous un mail, mettez là sur
&lt;a href=&quot;https://evernote.com/intl/fr/&quot;&gt;Evernote&lt;/a&gt;. Vous ne pourrez sans doute rien en
faire aujourd&amp;#39;hui, mais au moins vous l&amp;#39;avez notée et un jour viendra où vous
pourrez vous en resservir.&lt;/p&gt;

&lt;p&gt;Kyan donne l&amp;#39;exemple du carnet dans lequel il note le nom des acteurs qu&amp;#39;il
a aimé voir au théatre. Navo écrit sur son blog depuis des années des tas de
pensées. En quand ils ont du réaliser Bref, ils ont acceléré leur casting grâce
au carnet de Kyan, et ont pu transformer des notes de blog en épisodes.&lt;/p&gt;

&lt;p&gt;Lors de l&amp;#39;écriture de Bref, ils ont balancé en vrac toutes les vannes, tous les
trucs drôles qu&amp;#39;ils avaient en tête et dans leurs carnets. Ensuite, ils les ont
regroupés sous des thèmes communs, qui ont ensuite donné lieu aux épisodes. Ils
appellent cette technique des &amp;quot;jouets et des chambres&amp;quot;. J&amp;#39;utilise quelque chose
de très similaire quand j&amp;#39;écris mes scènarios de jeu de rôle et ça permet
d&amp;#39;avoir une matière première très facilement.&lt;/p&gt;

&lt;h3&gt;N&amp;#39;ayez pas peur de montrer ce que vous faites&lt;/h3&gt;

&lt;p&gt;Je vois beaucoup d&amp;#39;entrepreneurs qui ne veulent pas parler de leurs idées de
peur de se les faire voler. Encore une fois, les idées ne valent rien sans leur
réalisation. Mais surtout, en empechant l&amp;#39;idée se se faire connaitre ils
empechent complétement leur projet d&amp;#39;aboutir.&lt;/p&gt;

&lt;p&gt;Peut-être allez-vous vous faire voler votre idée. Et alors ? Des idées vous en
aurez d&amp;#39;autres, non ? Je l&amp;#39;espère pour vous en tout cas. Si vous pensez que
vous n&amp;#39;avez eu qu&amp;#39;une seule bonne idée de toute votre vie, laissez moi vous
dire qu&amp;#39;il y a peu de chance que cette idée soit bonne. &lt;/p&gt;

&lt;p&gt;Les gens qui ont des bonnes idées les ont par dizaines. Ce sont des poules aux
œufs d&amp;#39;or. Ils pourront continuer d&amp;#39;en avoir, même si on leur en vole une.
Alors que les voleurs sont incapables d&amp;#39;avoir des idées. En vous volant votre
idée, le voleur vous a rendu service. Vous savez que c&amp;#39;est un voleur
maintenant, et vous ne lui ferez plus confiance et vous ne vous ferez pas voler
votre prochaine idée qui est encore mieux.&lt;/p&gt;

&lt;p&gt;De toutes façons, vous y gagnerez plus à vous faire voler une idée et la voir
grandir dans le monde réel, même si vous n&amp;#39;y participez pas, plutot que de ne
rien produire du tout.&lt;/p&gt;

&lt;p&gt;Encore une fois, tout le monde a des idées, mais peu de personnes sont capables
de les réaliser. C&amp;#39;est pas grave de se faire piquer des idées, c&amp;#39;est pas ça qui
manque. Et on ne peut pas vous voler votre capacité de réalisation, c&amp;#39;est ça
qui compte.&lt;/p&gt;

&lt;p&gt;J&amp;#39;ai beaucoup aimé le petit dialogue imagé entre Kyan et Navo sur ce sujet :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;— Oh, j&amp;#39;ai une super idée.&lt;/p&gt;

&lt;p&gt;— Ah ouais, c&amp;#39;est quoi ?&lt;/p&gt;

&lt;p&gt;— Nan, je peux pas te le dire, tu va me la voler.&lt;/p&gt;

&lt;p&gt;— Ah. Ben viens, je te présente quelqu&amp;#39;un.&lt;/p&gt;

&lt;p&gt;— Nan, nan. Il va me voler mon idée lui aussi.&lt;/p&gt;

&lt;p&gt;— Comme tu veux...&lt;/p&gt;

&lt;p&gt;— C&amp;#39;était qui d&amp;#39;ailleurs ?&lt;/p&gt;

&lt;p&gt;— Le succès.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Ayez de la chance&lt;/h3&gt;

&lt;p&gt;Ce conseil parait idiot, mais c&amp;#39;est l&amp;#39;un des conseils les plus importants pour
réussir. Personne ne parvient à créer quelque chose de neuf sans avoir de la
chance. Mais surtout la chance, ça se provoque.&lt;/p&gt;

&lt;p&gt;Navo aime à raconter l&amp;#39;histoire de cet homme très croyant qui jour après jour,
pendant des années, prie Dieu pour lui demander de le faire gagner au loto. Si
bien qu&amp;#39;après des années Dieu lui apparait et lui dit : &amp;quot;Écoute, je veux bien
te faire gagner au loto. Mais s&amp;#39;il te plait, joue.&amp;quot;&lt;/p&gt;

&lt;p&gt;Beaucoup de gens pensent que la chance arrive comme ça, sans raison. Qu&amp;#39;un jour
un producteur ou un investisseur va venir frapper à votre porte alors que vous
êtes chez vous en slip en train de réfléchir à votre idée et vous proposer
beaucoup d&amp;#39;argent pour enfin la réaliser.&lt;/p&gt;

&lt;p&gt;Non.&lt;/p&gt;

&lt;p&gt;Ça ne marche pas comme ça. Avant de pouvoir récolter de la chance, il faut
savoir semer du risque. La chance, ça se provoque. Il faut tenter des choses,
se faire voir, rencontrer du monde, partager, montrer ce qu&amp;#39;on fait. Le talent
et la créativité ne font pas tout, la chance a aussi une part énorme à jouer.&lt;/p&gt;

&lt;p&gt;Il faut savoir accepter la chance, la respecter, et la provoquer.&lt;/p&gt;

&lt;h3&gt;Créez votre famille&lt;/h3&gt;

&lt;p&gt;Même quand vous faites quelque chose de chiant, faites-le bien. Si vous
travaillez un jour avec quelqu&amp;#39;un et que vous faites un sale boulot, il s&amp;#39;en
souviendra et le jour où il aura besoin de quelqu&amp;#39;un pour monter son projet,
vous pouvez être sur que ce n&amp;#39;est pas vous qu&amp;#39;il appelera.&lt;/p&gt;

&lt;p&gt;Encore une fois, le plus important c&amp;#39;est pas l&amp;#39;idée, c&amp;#39;est l&amp;#39;équipe qui va la
réaliser. Il y a des gens avec qui on a travaillé, on a apprécié leur travail
autant que leur personne, on sait qu&amp;#39;on les rappellera pour travailler
à nouveau avec eux dans le futur. On sait qu&amp;#39;on peut leur faire confiance, on
sait comment ils travaillent, on est dans une ambiance de bienveillance.&lt;/p&gt;

&lt;p&gt;Vous ne savez jamais si le petit boulot que vous êtes en train de faire
aujourd&amp;#39;hui ne vous permettra pas de faire quelque chose de bien plus grand
plus tard, simplement parce qu&amp;#39;on se souvient de vous comme quelqu&amp;#39;un qui bosse
bien.&lt;/p&gt;

&lt;h3&gt;Ne laissez pas l&amp;#39;argent vous brider&lt;/h3&gt;

&lt;p&gt;Et bizarrement quand je dis ça, je ne pense pas au manque d&amp;#39;argent, mais au
surplus d&amp;#39;argent. À un moment, votre projet fonctionnera. Vous gagnerez des
sous avec et se posera la question de quoi faire avec ces montants.&lt;/p&gt;

&lt;p&gt;Vous vous souviendrez du moment où vous avez commencé, où vous avez réussi
à faire beaucoup avec peu de moyens. Maintenant on vous offre un chèque avec
plein de zeros pour continuer. Il pourrait être tentant de se dire &amp;quot;&lt;em&gt;Bon, je
vais faire juste 90% de ce que j&amp;#39;avais prévu, ce qui est déjà bien, et garder
les 10% restant pour ma poche&lt;/em&gt;&amp;quot;.&lt;/p&gt;

&lt;p&gt;Non.&lt;/p&gt;

&lt;p&gt;Il faut que vous fassiez 110% de ce que vous aviez prévu. Mettez vous en galère,
allez plus loin encore. Ce n&amp;#39;est que le début. Vous serez riche plus tard. Là
vous avez encore beaucoup à apprendre, beaucoup à prouver, il ne faut pas
s&amp;#39;arreter maintenant. En faisant ainsi, vous vous donnerez à fond et irez
encore plus loin.&lt;/p&gt;

&lt;p&gt;Le plus mauvais conseil qu&amp;#39;on puisse vous donner quand vous monter votre projet
viens bien souvent de vos proches. Ils voient que votre idée fonctionne et vous
disent &amp;quot;&lt;em&gt;T&amp;#39;es payé combien ? Fais attention à ne pas te faire avoir&lt;/em&gt;&amp;quot;.&lt;/p&gt;

&lt;p&gt;Worst advice ever.&lt;/p&gt;

&lt;p&gt;Après ça vous allez avoir un petit démon dans un coin de votre tête qui va
venir vous emmerder à chaque fois que vous aller pondre une nouvelle idée. Vous
allez brider votre créativité en vous disant &amp;quot;&lt;em&gt;Non, je mérite mieux que ça&lt;/em&gt;&amp;quot;,
&amp;quot;&lt;em&gt;Ça, je le garde pour moi&lt;/em&gt;&amp;quot;. On s&amp;#39;en fout de combien vous êtes payé, vous
faites ce que vous rêvez de faire, ne laissez pas une hypothétique somme
d&amp;#39;argent vous brider avant même d&amp;#39;avoir commencé.&lt;/p&gt;

&lt;p&gt;Ils sont nombreux les groupes de rock fondés par des gamsin de 15 ans qui
splittent avant même d&amp;#39;avoir écrit leur première chanson car ils se voient déjà
en haut de l&amp;#39;affiche et s&amp;#39;engueulent pour savoir comment partager les gains de
leur hit idéalisé. Ne soyez pas ces gamins. Faites.&lt;/p&gt;

&lt;h3&gt;La contrainte peut être libératrice&lt;/h3&gt;

&lt;p&gt;Parfois une contrainte, un impondérable va vous forcer à revoir vos plans. Ce
que vous aviez prévu de faire ne peut pas être fait comme prévu. Vous avez
alors deux choix : annuler ou trouver une solution.&lt;/p&gt;

&lt;p&gt;Et c&amp;#39;est bien souvent quand on a des contraintes fortes qu&amp;#39;on parvient
à trouver des solutions créatives que nous n&amp;#39;aurions autrement jamais
imaginées. Et ces solutions peuvent bien souvent être aussi utilisées dans des
situations normales, là où la contrainte n&amp;#39;existe pas, pour rendre le process
encore plus agréable, rapide, utile.&lt;/p&gt;

&lt;p&gt;Ne vous découragez pas face à une contrainte, il y a forcément une solution, et
bien souvent elle vous ferez explorer quelque chose d&amp;#39;inédit.&lt;/p&gt;

&lt;h3&gt;Qu&amp;#39;est-ce qu&amp;#39;un gars plus fort que moi ferai ?&lt;/h3&gt;

&lt;p&gt;Quand vous avez réussi à faire ce que vous vouliez, que vous pensez en avoir
fini, demandez-vous &amp;quot;&lt;em&gt;Qu&amp;#39;est-ce qu&amp;#39;un gars plus fort que moi ferai à ma place
?&lt;/em&gt;&amp;quot;. En essayant de vous mettre dans la peau de quelqu&amp;#39;un plus fort que vous,
vous parviendrez à être plus fort que vous même.&lt;/p&gt;

&lt;p&gt;Ça parait bizarre comme conseil, mais essayez, vous verrez.&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;http://www.partageons-ce-qui-nous-departage.com/le-non-est-toujours-acquis&quot;&gt;Le non est toujours acquis&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Bien souvent, vous allez rencontrer des gens dans des métiers annexes au votre
avec qui vous devez intéragir qui vont vous dire &amp;quot;&lt;em&gt;Nope, désolé, c&amp;#39;est pas
possible.&lt;/em&gt;&amp;quot;. Bien souvent, en creusant un peu, vous comprendrez que ce n&amp;#39;est pas
pour eux que la tache est impossible, mais parce qu&amp;#39;ils pensent que quelqu&amp;#39;un
d&amp;#39;autre, un peu plus loin dans la chaine ne voudra pas.&lt;/p&gt;

&lt;p&gt;Si vous commencez à entendre des choses comme &amp;quot;&lt;em&gt;Non mais c&amp;#39;est même pas la
peine d&amp;#39;essayer, ils voudront jamais&lt;/em&gt;&amp;quot;, &amp;quot;&lt;em&gt;Ça fait 15 ans que je fais ce métier,
je peux te dire qu&amp;#39;ils ne voudront pas.&lt;/em&gt;&amp;quot;. Répondez simplement &amp;quot;&lt;em&gt;Viens, on
essaye.&lt;/em&gt;&amp;quot;, &amp;quot;&lt;em&gt;Viens, on essaye&lt;/em&gt;&amp;quot; jusqu&amp;#39;à ce qu&amp;#39;il accepte effectivement
d&amp;#39;essayer.&lt;/p&gt;

&lt;p&gt;Et vous serez surpris du nombre de fois où finalement il n&amp;#39;y avait pas de réel
obstacle sur la voie, juste des gens qui pensent que des gens pensent qu&amp;#39;il va
y avoir des obstacles et donc bloquent dès le début. &lt;/p&gt;

&lt;p&gt;Et ça n&amp;#39;arrive pas qu&amp;#39;aux autres. Faites attention à la petite voix dans votre
tête qui dit &amp;quot;&lt;em&gt;Non, ils voudront pas, c&amp;#39;est pas la peine que je demande&lt;/em&gt;&amp;quot; aussi.&lt;/p&gt;

&lt;h3&gt;Consensus&lt;/h3&gt;

&lt;p&gt;Quand on monte un projet à plusieurs, il est fondamental que les idées mises en
place plaisent à tout le monde. Si vous devez batailler pour convaincre l&amp;#39;autre
que votre idée est bonne, changez d&amp;#39;idée. N&amp;#39;oubliez pas que vous êtes des
poules aux œufs d&amp;#39;or. Bien souvent il existe une autre idée qui satisfait tout
le monde pile entre la votre et celle de votre associé.&lt;/p&gt;

&lt;p&gt;Si jamais on vous impose une idée et que le projet ne fonctionne pas, vous
serez tenté de dire &amp;quot;&lt;em&gt;Ouais mais je le savais, j&amp;#39;en voulais pas de ça moi.&lt;/em&gt;&amp;quot;.
Et au contraire si c&amp;#39;est votre idée qui est acceptée et que le projet
fonctionne, vous aller penser &amp;quot;&lt;em&gt;Je le savais, mes idées sont vraiment
meilleures&lt;/em&gt;&amp;quot;. Et les rancunes et les dissenssions vont commencer à partir de
là.&lt;/p&gt;

&lt;p&gt;Trouvez une idée avec laquelle vous soyez tous d&amp;#39;accord, que vous puissiez tous
défendre et porter. Si votre idée ne convient pas, pas de soucis, trouvez-en
une autre et gardez votre idée pour un autre projet.&lt;/p&gt;

&lt;h3&gt;Attention aux détails&lt;/h3&gt;

&lt;p&gt;Octroyez-vous le pouvoir de tout maitriser, toute la chaine, jusqu&amp;#39;au bout.
Même si vous avez fait le gros du travail, faites attention aux petits détails,
tout le temps, partout.&lt;/p&gt;

&lt;p&gt;Kyan raconte une anecdote très vraie d&amp;#39;un magicien américain qui vient faire un
spectacle en France. Il répète son tour depuis des années, il est parfaitement
au point, il s&amp;#39;est beaucoup investi dedans, il a même divorcé à cause de ça. Il
est capable de faire téléporter une petite fille depuis un bout de la scène
vers l&amp;#39;autre.&lt;/p&gt;

&lt;p&gt;Et au moment de monter sur scène, le présentateur l&amp;#39;annonce avec :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Mesdames et messieurs, un tonnerre d&amp;#39;applaudissement pour Maurice et ses
jumelles !&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comme quoi, il faut faire attention à tous les détails jusqu&amp;#39;au bout.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Ce sont pour moi des conseils extrémement précieux. Certains s&amp;#39;appliquent
particulièrement à un processus créatif, mais d&amp;#39;autres possèdent vraiment une
portée bien plus générale.&lt;/p&gt;

&lt;p&gt;J&amp;#39;espère que vous aurez tiré quelque chose de cet article comme moi j&amp;#39;ai tiré
quelque chose de ces conseils.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ngParis #17</title>
   <link href="http://meetups.pixelastic.com//2015/01/29/ngparis-17/"/>
   <updated>2015-01-29T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2015/01/29/ngparis-17</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://www.meetup.com/AngularJS-Paris/events/219615752/&quot;&gt;Meetup angular&lt;/a&gt;,
organisé par &lt;a href=&quot;http://www.leboncoin.fr/&quot;&gt;le bon coin&lt;/a&gt;. J&amp;#39;avais un peu arreté d&amp;#39;aller aux
meetups angular (trop peu de contenu), mais là le programme annonçait un REX
sur comment mélanger &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; et &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, du coup, j&amp;#39;étais
curieux.&lt;/p&gt;

&lt;p&gt;Le bon coin, derrière leurs airs de sites des années 80 mis en ligne dans un
garage possède en fait de formidables bureaux en plein Paris. Le premier site
date de 2006 et est Norvégien, puis la France a été la première filiale en
2007 avant que le système ne s&amp;#39;implante dans plus de 35 pays.&lt;/p&gt;

&lt;p&gt;La technologie sous-jacente est un moteur custom codé en C nommé &lt;a href=&quot;http://www.blocket.se/&quot;&gt;blocket&lt;/a&gt; et
réutilisé par toutes les filliales (qui peuvent donc faire des mises à jour de
leur moteur facilement) avec quelques petites différences culturelles pour
chaque pays.&lt;/p&gt;

&lt;p&gt;D&amp;#39;un seul dev au départ, ils sont maintenant 250 dans la boite avec un objectif
à 350 pour la fin de l&amp;#39;année. Le bon coin, c&amp;#39;est des chiffres de consultations
extraordinaires. 90 millions de pages vues par mois, essentiellement des
résultats de recherche, donc sans possibilité de mise en cache.&lt;/p&gt;

&lt;p&gt;Ils parviennent quand même à un &lt;code&gt;startRender&lt;/code&gt; moyen de 0.7s. 6e site le plus
visité de France, 700.000 nouvelles annonces chaque jour, 2 datacenters de 400
serveurs. En terme de charge, c&amp;#39;est du très lourd, leur conso normale
correspondant aux pics de charge de ce qu&amp;#39;on connait habituellement.&lt;/p&gt;

&lt;p&gt;Au dela du cœur de l&amp;#39;appli, il y a toutes les applications de gestion
(modération, monitoring, etc) qui sont développés dans des tas de langages
différents. Il y en a pour tous les gouts : PostgreSQL, Python, Ruby, Go,
Shell, PHP, des apps natives, du big data, de l&amp;#39;hadoop, du capybara.&lt;/p&gt;

&lt;p&gt;Ah, et la question qu&amp;#39;on se pose tous. Non, le compte
&lt;a href=&quot;https://twitter.com/TopBonCoin&quot;&gt;@TopBonCoin&lt;/a&gt; n&amp;#39;est pas officiel, le bon coin
ne faisant actuellement aucune publicité ou community management.&lt;/p&gt;

&lt;p&gt;Bon, assez parlé de l&amp;#39;hôte, place aux talks.&lt;/p&gt;

&lt;h2&gt;React et Angular&lt;/h2&gt;

&lt;p&gt;Julien Bouquillon, alias &lt;a href=&quot;https://twitter.com/revolunet&quot;&gt;@revolunet&lt;/a&gt; viens nous
faire un retour d&amp;#39;expérience sur l&amp;#39;intégration de React dans Angular. Il
a entendu beaucoup de bien de React et a voulu voir si ça se plugguait
facilement.&lt;/p&gt;

&lt;p&gt;Ça fait deux ans qu&amp;#39;il fait de l&amp;#39;Angular, sur du mobile et sur du desktop et le
problème récurrent pour lui, ce sont les perfs. Essentiellement sur mobile
d&amp;#39;ailleurs. Les problèmes de perf sont les mêmes sur les deux plateformes, mais
les desktop étant plus puissants, il faut vraiment de grosses apps pour
ressentir les ralentissement.&lt;/p&gt;

&lt;p&gt;Vu que React mets en avant sa rapidité, il a décidé de troquer les directives
d&amp;#39;Angular par des composants React pour voir la différence. Pour lui le reste
d&amp;#39;Angular est très bon. On gagne en productivité et en réusabilité, le
framework fournit plein de choses de base et tout ça se teste facilement.
Globalement, super framework... sauf pour les perfs.&lt;/p&gt;

&lt;h3&gt;What&amp;#39;s wrong with Angular ?&lt;/h3&gt;

&lt;p&gt;Parce que le gros problème d&amp;#39;Angular se trouve dans le data-binding, bête et
méchant. C&amp;#39;est le coté magique qui nous attire au début dans le framework, mais
c&amp;#39;est aussi le goulot de performances. Quand on inclue une variable dans un
template pour qu&amp;#39;elle soit bindée, l&amp;#39;algo simpliste d&amp;#39;Angular va simplement
ré-évaluer chaque variable à chaque événement de l&amp;#39;utilisateur. C&amp;#39;est à dire au
clic, au scroll, au touch, au keypress. Voire même sur des events qui ne
viennent pas du user, comme le retour d&amp;#39;une requete HTTP.&lt;/p&gt;

&lt;p&gt;Et ce, même si les éléments en questions sont en dehors du viewport, ou qu&amp;#39;ils
n&amp;#39;ont aucun rapport avec l&amp;#39;élément actuellement modifié. Bête et méchant on
vous dit.&lt;/p&gt;

&lt;p&gt;Bon, sur une appli desktop, on voit pas trop le problème, ça va super vite.
Mais sur mobile, on peut commencer à percevoir la lenteur, voir à la subir.
À chaque interaction, la totalité du DOM est réevalué, c&amp;#39;est pas rien. C&amp;#39;est
vraiment du &lt;em&gt;dirty&lt;/em&gt; checking.&lt;/p&gt;

&lt;p&gt;Si on veut fournir un expérience smooth, il nous faut viser du 60 fps, ce qui
corresponds à 16ms pour un refresh. 16ms pour un refresh de tout le DOM, c&amp;#39;est
pas énorme.&lt;/p&gt;

&lt;p&gt;Malheureusement, Angular ne nous donne pas beaucoup de points d&amp;#39;actions pour
pouvoir influencer ou améliorer ce rendering, le processus fait plus ou moins
partie intégrante du core du méchanisme.&lt;/p&gt;

&lt;p&gt;La version 1.3 a fait de grosses améliorations à ce sujet, d&amp;#39;au moins 50% de
gain. Elle introduit aussi le principe des &lt;code&gt;bind-once&lt;/code&gt;, et des filters
stateful, qui peuvent n&amp;#39;être executés qu&amp;#39;une seule fois pour chaque valeur
passée. On peut aussi éviter de mettre des méthodes à évaluer dans les
templates mais simplement des variables, utiliser la syntax &lt;code&gt;track by&lt;/code&gt; des
&lt;code&gt;ng-repeat&lt;/code&gt; et toujours essayer de mettre ses event handler sur les éléments
les plus hauts.&lt;/p&gt;

&lt;p&gt;Malheureusement, il reste le cas des keypress. Si j&amp;#39;ai un input, la totalité de
mon DOM est réévalué pour chaque touche que va taper mon utilisateur.&lt;/p&gt;

&lt;h3&gt;Et React ?&lt;/h3&gt;

&lt;p&gt;React de son coté fonctionne avec un système intermédiaire entre ses data et le
DOM, il y intercale un concept qui lui est propre : le virtual DOM. Les
modifications de data influent directement sur le vDOM (qui n&amp;#39;est pas rendu
directement), et seulement le diff entre le DOM actuel et le vDOM sont reportés
dans le DOM. Ça marche très bien, et du coup seul ce qui a changé est modifié.&lt;/p&gt;

&lt;p&gt;React intègre aussi par défaut un système d&amp;#39;event delegation intelligent.
Plutôt que d&amp;#39;ajouter des handler sur plusieurs éléments, il ajoute un handler
général sur la page et renvoie l&amp;#39;event au bon élément cliqué. On arrete comme
ça de dupliquer les handlers.&lt;/p&gt;

&lt;p&gt;Et surtout, React est explicite. Plus de magie. Chaque composant possède sa
méthode &lt;code&gt;render&lt;/code&gt; qui va retourner du HTML. On peut comme ça tester unitairement
le rendu, mais surtout chaque composant est isolé et ses données ne fuitent
plus vers l&amp;#39;extérieur. Seul le contenu du composant est modifié, sans que cela
n&amp;#39;induise un rechargement de la totalité du DOM de la page.&lt;/p&gt;

&lt;p&gt;Sans compter que React s&amp;#39;intègre parfaitement dans l&amp;#39;écosystem npm et
browserify.&lt;/p&gt;

&lt;h3&gt;Benchmarks&lt;/h3&gt;

&lt;p&gt;Il nous a fait une démo d&amp;#39;un même composant codé une fois en Angular et une
fois en React pour voir la différence de perfs. C&amp;#39;était un tableau de 100
éléments et de 5-6 colonnes. En cochant la première colonne de chaque
ligne, on pouvait &amp;quot;barrer&amp;quot; l&amp;#39;élément.&lt;/p&gt;

&lt;p&gt;En React comme en Angular, le chargement initial du composant prends environ
autant de temps. Pas de gain à attendre de ce coté là. Par contre, si on coche
une ligne du tableau Angular, les 1000 éléments sont ré-évalués alors que si on
coche celle de React, seule la ligne cliquée est modifiée.&lt;/p&gt;

&lt;p&gt;Là où c&amp;#39;est pire, c&amp;#39;est qu&amp;#39;en ajoutant un champ d&amp;#39;input au dessus du tableau
Angular, chaque &lt;code&gt;keypress&lt;/code&gt; ré-évaluait la totalité du tableau. Et pire que
tout, on a ajouté un bouton qui ne faisait rien (pas de &lt;code&gt;ng-click&lt;/code&gt;, rien). Et
bien cliquer dessus rechargeait encore tout le DOM Angular.&lt;/p&gt;

&lt;p&gt;Je crois que toute la beauté de React peut se résumer dans la phrase suivante
de Julien :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;En React, un bouton qui ne fait rien, ne fait rien.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Bon, et mon React il va rentrer dans mon Angular ?&lt;/h3&gt;

&lt;p&gt;Oui. Il est tout à fait possible de mettre un composant React au beau milieu
d&amp;#39;une appli Angular. Il va vivre sa vie en isolation, sans générer de reflow
Angular, et sans se modifier quand Angular se modifie.&lt;/p&gt;

&lt;p&gt;Par contre si on veut l&amp;#39;introduire dans notre cycle Angular normal, il faut le
wrapper lui-même dans une directive. Par contre, à partir du code de la
directive, on entre dans un mode &lt;em&gt;explicit &amp;gt; implicit&lt;/em&gt; où on va définir des
callbacks à notre composant qu&amp;#39;il sera chargé d&amp;#39;appeller quand il voudra
communiquer son état vers l&amp;#39;extérieur, et on ajoutera aussi des méthodes au
composant pour pouvoir lui passer de nouvelles data depuis Angular.&lt;/p&gt;

&lt;p&gt;C&amp;#39;est un peu plus de plomberie, mais on est alors certain qu&amp;#39;il ne se mettra
pas à jour sans raison, et il pourra agir en isolation complète.&lt;/p&gt;

&lt;p&gt;Il existe un projet, &lt;a href=&quot;https://github.com/davidchang/ngReact&quot;&gt;ngReact&lt;/a&gt; qui
défini justement ce type de directive, mais ils vont trop loin et ajoutent des
watchers automatiques pour passer les infos d&amp;#39;Angular vers React et vice-versa,
ce qui nous fait revenir au problème de dirty checking du départ.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;React peut s&amp;#39;intégrer correctement dans Angular et vivre sa vie correctement en
profitant de manière isolée de ses avantages. La plomberie reste un peu
manuelle, mais permet une belle isolation. Néanmoins, la philosophie de l&amp;#39;un et
de l&amp;#39;autre étant tellement différentes, je ne suis pas sur qu&amp;#39;on tire vraiment
le meilleur des deux mondes.&lt;/p&gt;

&lt;h2&gt;KillrChat&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/doanduyhai&quot;&gt;Duy Hai Doan&lt;/a&gt;, tech évangéliste chez
&lt;a href=&quot;http://www.datastax.com/&quot;&gt;Datastax&lt;/a&gt; nous a &lt;a href=&quot;http://www.slideshare.net/doanduyhai/introduction-to-killrchat&quot;&gt;parlé d&amp;#39;un pet
project&lt;/a&gt; de
chat à base d&amp;#39;Angular, &lt;a href=&quot;http://projects.spring.io/spring-boot/&quot;&gt;Spring Boot&lt;/a&gt; et
&lt;a href=&quot;http://cassandra.apache.org/&quot;&gt;Cassandra&lt;/a&gt;. C&amp;#39;est cool, il est payé pour faire
des meetups et présenter Cassandra, du coup avec trois technos cools comme ça
il peut réutiliser le même talk :)&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée de faire une appli de chat vient de sa frustration de faire des ateliers
pour faire découvrir Cassandra et que les élèves ne repartent qu&amp;#39;avec un énième
&amp;quot;Hello World&amp;quot; qui ne sert pas à grand chose. Là, il a une vraie appli qui
touche à toutes les couches.&lt;/p&gt;

&lt;p&gt;Et surtout, elle peut profiter des possibilités de scaling de Cassandra. En
gros, quand le nombre de user se mets à grossir, il suffit d&amp;#39;augmenter le
nombre de nœuds sur lesquels les données sont stockées dans Cassandra.
Cassandra s&amp;#39;occupe de répartir les nouvelles données uniformément sur chaque
nœud de manière à ce qu&amp;#39;aucun ne soit particulièrement submergé. Pour plus
d&amp;#39;infos sur le fonctionne de Cassandra, je vous invite à relire &lt;a href=&quot;http://meetups.pixelastic.com/2014/10/15/nodejs-chapitre-2-conference-2/&quot;&gt;mon
compte-rendu&lt;/a&gt;
du meetup nodejs paris.&lt;/p&gt;

&lt;p&gt;Le chat qu&amp;#39;il a développé communique avec le back-end Spring Boot en websocket,
avec &lt;a href=&quot;https://github.com/sockjs&quot;&gt;SockJS&lt;/a&gt;. Entre les deux, il suffit de mettre
un broker qui sait scaler (&lt;a href=&quot;http://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;,
&lt;a href=&quot;http://zeromq.org/&quot;&gt;ZeroMQ&lt;/a&gt;, &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt;) qui implémente
un simple système de &lt;a href=&quot;http://fr.wikipedia.org/wiki/PubSub&quot;&gt;pub/sub&lt;/a&gt; et front et
back peuvent communiquer sans soucis, même avec une forte charge.&lt;/p&gt;

&lt;h3&gt;Et Angular dans tout ça ?&lt;/h3&gt;

&lt;p&gt;Duy Hai vient surtout du monde Java, le front c&amp;#39;est pas forcément son domaine.
Mais il a kiffé Angular, il s&amp;#39;y est bien retrouvé. Il a aussi apprécié le
fait qu&amp;#39;il y ait des outils pour &lt;a href=&quot;http://angular-ui.github.io/bootstrap/&quot;&gt;se plugguer facilement avec
Bootstrap&lt;/a&gt; (car
comme il le dit lui-même, si on lui laisse le design d&amp;#39;un site ça sera
horrible, avec bootstrap au moins c&amp;#39;est pas trop moche).&lt;/p&gt;

&lt;p&gt;Il a quand même très rapidement implémenté des tas de bonnes pratiques en
Angular (je ne sais pas si ce sont des bonnes pratiques issues de Java ou non).
Par exemple, toute sa logique est distribuéed dans des services stateless, ses
controllers se chargeant simplement d&amp;#39;un rôle de passe-plat.&lt;/p&gt;

&lt;p&gt;Par contre, comme beaucoup, il s&amp;#39;est fait avoir par les
&lt;a href=&quot;https://docs.angularjs.org/api/ngResource/service/$resource&quot;&gt;$resources&lt;/a&gt;.
Déjà, selon qu&amp;#39;on utilise les ressources avec des méthodes d&amp;#39;instances ou des
méthodes de classe, ce n&amp;#39;est pas la même type d&amp;#39;objet qui est retourné et le
chaining des promises en devient d&amp;#39;autant plus complexe (sans parler des
promises angular qui ont leurs propres quirks).&lt;/p&gt;

&lt;p&gt;Ce qu&amp;#39;il regrette dans Angular c&amp;#39;est qu&amp;#39;il faille une bonne connaissance de
Javascript pour comprendre réellement ce qu&amp;#39;il se passe sous le capot.
Heureusement pour lui, il a découvert
&lt;a href=&quot;https://github.com/Zenika/angular-from-scratch&quot;&gt;angular-from-scratch&lt;/a&gt; qui se
propose de recoder les mécaniques principales d&amp;#39;Angular depuis rien pour bien
assimiler petit à petit chacun des concepts.&lt;/p&gt;

&lt;p&gt;Globalement une présentation assez chouette, un REX avec des technos sympas.&lt;/p&gt;

&lt;h2&gt;Typescript&lt;/h2&gt;

&lt;p&gt;Pour finir, &lt;a href=&quot;https://twitter.com/paulsouche&quot;&gt;Paul Souche&lt;/a&gt;, de
&lt;a href=&quot;http://www.sfeir.com/&quot;&gt;Sfeir&lt;/a&gt; nous parle de
&lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;Typescript&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bon, je vais la faire assez vite pour le coup. Typescript est une surcouche
à Javascript, un peu comme &lt;a href=&quot;http://coffeescript.org/&quot;&gt;Coffeescript&lt;/a&gt;, qui
compile en Javascript. Le truc qu&amp;#39;apporte Typescript, c&amp;#39;est un typage fort des
variables.&lt;/p&gt;

&lt;p&gt;On peut désormais définir le type de chacun de nos arguments de fonctions et
définir des interfaces de classe. Et si jamais le compilateur s&amp;#39;aperçoit qu&amp;#39;on
essaie de faire rentrer des ronds dans des carrés, il nous balance une
exception et il compile pas.&lt;/p&gt;

&lt;p&gt;On peut aussi définir &amp;quot;facilement&amp;quot; des variables privées et publiques et même
génerer automatiquement des getters et des setters. Ouais, ouais, comme un vrai
javaiste.&lt;/p&gt;

&lt;p&gt;Bon, à part ça y a des linters et ça génère des sourcemaps.&lt;/p&gt;

&lt;p&gt;J&amp;#39;ai vraiment beaucoup de mal à voir l&amp;#39;intéret du truc, mais j&amp;#39;imagine que ça
va encore plus plaire aux javaistes qui se mettent au front.&lt;/p&gt;

&lt;h2&gt;Buffet&lt;/h2&gt;

&lt;p&gt;Et comme souvent, le buffet qui suit les talks est toujours l&amp;#39;occasion de
discuter et de rencontrer des gens très intéressants. Hésitez pas à venir taper
la discut&amp;#39; si vous êtes dans un meetup la prochaine fois.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Concaténation, Compression, Cache</title>
   <link href="http://meetups.pixelastic.com//2015/01/27/concatenatation-compression-cache/"/>
   <updated>2015-01-27T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2015/01/27/concatenatation-compression-cache</id>
   <content type="html">&lt;p&gt;Quand on cherche à optimiser les performances de son site web, il y a trois
éléments essentiels à faire avant toute chose. Trois méthodes très
simples à mettre en place et qui apportent un retour direct et flagrant sur la
vitesse de chargement.&lt;/p&gt;

&lt;p&gt;Ces trois méthodes sont la concaténation, la compression et le cache. J&amp;#39;ai déjà
abordé celles-ci lors d&amp;#39;une &lt;a href=&quot;https://www.youtube.com/watch?v=ecc1zudWmX4&quot;&gt;présentation aux
HumanTalks&lt;/a&gt; de Septembre 2014,
mais nous allons les détailler dans la suite de cet article.&lt;/p&gt;

&lt;h2&gt;Concaténation&lt;/h2&gt;

&lt;p&gt;Le principe de la concaténation est de regrouper plusieurs fichiers de même
type en un seul, afin de se retrouver avec moins de fichiers finaux
à télécharger. Les fichiers qui profitent le plus de ce système sont les
fichiers CSS et Javascript.&lt;/p&gt;

&lt;p&gt;La nature même du téléchargement d&amp;#39;assets fait que notre navigateur doit payer
certains coûts, en millisecondes, à chaque nouvel élément téléchargé. Ces coûts
sont de diverses natures:&lt;/p&gt;

&lt;h3&gt;TCP Slow start&lt;/h3&gt;

&lt;p&gt;TCP, le protocole de connexion qu&amp;#39;utilise HTTP, possède un mécanisme de
slow-start qui lui permet de calculer la vitesse optimale de transmission de
l&amp;#39;information. Pour parvenir à ce résultat, il doit effectuer plusieurs
aller-retours entre le client et le serveur, en envoyant de plus en plus en plus
de données, pour calculer la vitesse maximale possible d&amp;#39;émission/réception. &lt;/p&gt;

&lt;p&gt;Si on envoie une multitude de petits fichiers, la transmission n&amp;#39;a jamais le
temps d&amp;#39;atteindre sa vitesse optimale et doit recommencer ses aller-retours
pour le prochain fichier. En groupant les fichiers en un fichier de plus grande
taille, le coût de calcul n&amp;#39;est payé qu&amp;#39;une seule fois et le reste du fichier
peut se télécharger à la vitesse maximum.&lt;/p&gt;

&lt;p&gt;À noter que maintenir les connexions à votre serveur en &lt;code&gt;Keep-Alive&lt;/code&gt; permet de
réutiliser une connexion d&amp;#39;un asset vers le suivant et donc de ne payer le coût
de calcul qu&amp;#39;une fois. Malheureusement, activer le &lt;code&gt;Keep-Alive&lt;/code&gt; sur un serveur
Apache risque aussi de limiter le nombre de connexions parallèle que votre
serveur peut maintenir.&lt;/p&gt;

&lt;h3&gt;SSL&lt;/h3&gt;

&lt;p&gt;De la même manière, si votre serveur utilise une connexion sécurisée, il y a un
échange de clés entre le client et le serveur qui s&amp;#39;effectue pour vérifier que
les deux sont bien qui ils annoncent être. Ici encore, le coût de cet échange
est payé sur chaque asset téléchargé. Mettre les fichiers en commun permet donc
de ne payer le coût de cet échange qu&amp;#39;une seule fois.&lt;/p&gt;

&lt;h3&gt;Connexions parallèles&lt;/h3&gt;

&lt;p&gt;Finalement, il y a une dernière limite, purement du coté du navigateur cette
fois-ci : le nombre de connexions parallèles. La norme HTTP indique qu&amp;#39;un
navigateur devrait ouvrir un maximum de 2 connexions parallèles vers un même
serveur. Techniquement, les navigateurs récents ont augmenté cette limite à une
valeur entre 8 et 12 car 2 était beaucoup trop restrictif.&lt;/p&gt;

&lt;p&gt;Cela signifie c&amp;#39;est que si vous demandez à votre page web de télécharger
5 feuilles de style, 5 scripts et 10 images, le navigateur ne va lancer le
téléchargement que des 12 premiers éléments. Il commencera le téléchargement du
13e uniquement une fois qu&amp;#39;un des 12 premiers sera arrivé, et ainsi de suite.
Ici encore, la concaténation vous permet de laisser plus de canaux disponibles
pour télécharger les autres assets de votre page.&lt;/p&gt;

&lt;p&gt;Les fichiers CSS et Javascript se concatènent très bien. Il suffit simplement
de créer un fichier final qui contient le contenu mis bout-à-bout de tous les
fichiers initiaux. Votre processus de build devrait pouvoir s&amp;#39;en charger sans
problème, mais un solution simple peut s&amp;#39;écrire en quelques lignes :&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;cat ./src/*.css &amp;gt; ./dist/styles.css
cat ./js/*.js &amp;gt; ./dist/scripts.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;À noter que la concaténation d&amp;#39;images (CSS Sprites) est aussi possible, mais
nous ne l&amp;#39;aborderons pas dans cet article.&lt;/p&gt;

&lt;h2&gt;Compression&lt;/h2&gt;

&lt;p&gt;Maintenant que nous avons réduit le nombre de fichiers, notre deuxième tâche
va être de rendre ces fichiers plus légers, afin qu&amp;#39;ils se téléchargent plus
rapidement.&lt;/p&gt;

&lt;p&gt;Pour cela, il existe une formule magique formidable nommée Gzip qui permet de
réduire de 66% en moyenne le poids des assets textuels.&lt;/p&gt;

&lt;p&gt;La bonne nouvelle c&amp;#39;est que la majorité des assets que nous utilisons dans la
création d&amp;#39;un site web sont du texte. Les briques principales comme le HTML, le
CSS et le Javascript bien sur, mais aussi les formats classiques de retour de
votre API : XML et JSON. Et beaucoup d&amp;#39;autres formats qui ne sont en fait que
du XML déguisé : flux RSS, webfonts, SVG.&lt;/p&gt;

&lt;p&gt;Gzip, et c&amp;#39;est assez rare pour le souligner, est parfaitement interprété par
tous les serveurs et tous les navigateurs du marché (jusque IE5.5, c&amp;#39;est dire).
Il n&amp;#39;y a donc aucune raison de ne pas l&amp;#39;utiliser.&lt;/p&gt;

&lt;p&gt;Si un navigateur supporte le Gzip, il enverra un header &lt;code&gt;Accept-Encoding: gzip&lt;/code&gt;
au serveur. Si le serveur décèle ce header dans la requête, il compressera le
fichier à la volée avant de le retourner au client, en y ajoutant le header
&lt;code&gt;Content-Encoding: gzip&lt;/code&gt;, et le client le décompressera à la reception.&lt;/p&gt;

&lt;p&gt;L&amp;#39;avantage est donc d&amp;#39;avoir un fichier de taille réduite qui transite sur le
réseau, avec en contrepartie le serveur et le client qui s&amp;#39;occupent
respectivement de la compression/décompression. Sur n&amp;#39;importe quelle machine
issue des 10 dernières années, l&amp;#39;overhead de la compression/décompression en
gzip est absolument négligeable. Par contre, le fait d&amp;#39;avoir un fichier bien
plus léger qui transite sur le réseau permet des gains très importants.&lt;/p&gt;

&lt;p&gt;Les librairies de compression Gzip sont disponibles sur tous les serveurs du
marché, il suffit généralement simplement de les activer en leur indiquant les
types de fichiers qui doivent être compressées. Vous trouverez ci-dessous
quelques exemples sur les serveurs les plus connus :&lt;/p&gt;

&lt;h4&gt;Apache&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mod_deflate.c&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mod_filter.c&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;AddOutputFilterByType&lt;/span&gt; DEFLATE &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt; \
    &lt;span class=&quot;err&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;quot;text/xml&amp;quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;...&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Lighttpd&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-lighttpd&quot; data-lang=&quot;lighttpd&quot;&gt;&lt;span class=&quot;k&quot;&gt;server.modules&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mod_compress&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;compress.filetype&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;application/javascript&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text/html&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;text/xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Nginx&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;&lt;span class=&quot;k&quot;&gt;gzip&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;gzip_comp_level&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;gzip_types&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/javascript&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;text/css&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;text/html&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;text/xml&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;[...]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;S&amp;#39;il y a bien une optimisation de performance qui nécessite peu de travail
à mettre en place et qui améliore grandement les performances de chargement,
c&amp;#39;est bien le Gzip. Cela ne nécessite aucun changement sur les fichiers servis,
uniquement une activation de config sur le serveur.&lt;/p&gt;

&lt;h3&gt;Minification&lt;/h3&gt;

&lt;p&gt;Pour aller plus loin, vous pouvez aussi investir sur la minification de vos
assets. HTML, CSS et Javascript sont encore une fois les meilleurs candidats
pour la minification. &lt;/p&gt;

&lt;p&gt;La minification est un procédé qui va ré-écrire le code de vos assets dans une
version qui utilise moins de caractères, et qui donc pésera moins lourd sur le
réseau. D&amp;#39;une manière générale cela va surtout supprimer les commentaires et
les sauts de ligne, mais des minificateurs plus spécialisés pourront renommer
les variables de vos Javascript en des valeurs plus courtes, regrouper vos
sélecteurs CSS ou supprimer les attributs redondants de vos pages HTML.&lt;/p&gt;

&lt;p&gt;L&amp;#39;ajout d&amp;#39;un processus de minification est plus complexe que l&amp;#39;activation du
Gzip, et les gains sont aussi moins importants. C&amp;#39;est pourquoi nous vous
conseillons de toujours commencer par la compression Gzip.&lt;/p&gt;

&lt;h2&gt;Cache&lt;/h2&gt;

&lt;p&gt;À présent que nous avons réussi à limiter le nombre de fichiers et à faire
baisser leur poids, la prochaine étape est de les télécharger le moins souvent
possible.&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée principale ici est qu&amp;#39;il est inutile de faire télécharger à votre
visiteur un contenu qu&amp;#39;il a déjà téléchargé et possède donc en local sur son
poste.&lt;/p&gt;

&lt;p&gt;Nous allons commencer par expliquer comment fonctionne le cache HTTP car c&amp;#39;est
un domaine qui est généralement mal compris des développeurs. Il y a en fait
deux principes fondamentaux à comprendre dans le cache HTTP: la &lt;em&gt;fraicheur&lt;/em&gt;, et
la &lt;em&gt;validation&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Fraicheur&lt;/h3&gt;

&lt;p&gt;On peut voir la fraicheur d&amp;#39;un asset comme une date limite de consommation.
Lorsque l&amp;#39;on télécharge un élément depuis le serveur, celui-ci nous l&amp;#39;envoie
accompagné d&amp;#39;un header indiquant jusqu&amp;#39;à quelle date cet élément est encore
frais.&lt;/p&gt;

&lt;p&gt;Si jamais le client à besoin à nouveau du même élément, il commence par
vérifier la fraicheur de celui qu&amp;#39;il a en cache. S&amp;#39;il est encore frais, il ne
fait pas de requête au serveur, et utilise directement celui qu&amp;#39;il a sur son
disque. On ne peut pas faire plus rapide, car il n&amp;#39;y a alors absolument aucune
connexion réseau impliquée.&lt;/p&gt;

&lt;p&gt;Par contre, si jamais la date de fraicheur est dépassée, alors le navigateur va
lancer une nouvelle requête au serveur pour récupérer la nouvelle version.&lt;/p&gt;

&lt;p&gt;En HTTP 1.0, le serveur retourne un header &lt;code&gt;Expires&lt;/code&gt; avec la date limite de
fraicheur. Par exemple: &lt;code&gt;Expires: Thu, 04 May 2014 20:00:00 GMT&lt;/code&gt;. Dans cet
exemple, si jamais le navigateur demande à nouveau le même asset avant le 4 Mai
2014 à 20h, alors il le lira depuis son cache, sinon il interrogera le serveur.&lt;/p&gt;

&lt;p&gt;Cette notation a un défaut majeur dans le fait que les dates sont fixées de
manière absolue. Cela signifie que le cache de tous les clients perdra sa
fraicheur en même temps. Et vous aurez donc potentiellement tous les clients
qui feront une nouvelle requête vers votre serveur en même temps pour se mettre
à jour, ce qui peut générer un très fort pic de charge à cet instant.&lt;/p&gt;

&lt;p&gt;Pour limiter cela et donner plus de flexibilité dans la gestion de la
fraicheur, en HTTP 1.1, un nouveau header à été introduit : &lt;code&gt;Cache-Control&lt;/code&gt;.
Celui-ci accepte plusieurs arguments qui permettent de gérer plus finement la
manière de mettre en cache, et celui qui nous intéresse ici est &lt;code&gt;max-age&lt;/code&gt; qui
permet de définir une durée relative de fraicheur, en secondes.&lt;/p&gt;

&lt;p&gt;Votre serveur peut donc répondre &lt;code&gt;Cache-Control: max-age=3600&lt;/code&gt; pour indiquer
que l&amp;#39;asset est encore frais pendant 1h (3600 secondes). En faisant ainsi vous
pouvez espacer les appels sur une plus longue période.&lt;/p&gt;

&lt;h3&gt;Validation&lt;/h3&gt;

&lt;p&gt;La deuxième composante du cache est la &lt;em&gt;validation&lt;/em&gt;. Imaginons que notre asset
ai terminé sa période de fraicheur, nous allons donc récupérer une nouvelle
version de celui-ci sur le serveur. Mais il est possible que l&amp;#39;asset n&amp;#39;ait pas
réellement changé sur le serveur depuis la dernière fois. Il serait alors
inutile de retélécharger quelque chose que nous avons déjà dans notre cache.&lt;/p&gt;

&lt;p&gt;Le principe de validation permet au serveur de gérer cela. Soit l&amp;#39;asset du
client est identique à l&amp;#39;asset du serveur, dans ce cas le client peut garder sa
version locale. Soit les deux sont différents et dans ce cas le client doit
mettre à jour son cache avec la version distante.&lt;/p&gt;

&lt;p&gt;Lorsque le client a récupéré l&amp;#39;asset pour la première fois, le serveur lui
a répondu avec un header &lt;code&gt;Last-Modified&lt;/code&gt;, par exemple &lt;code&gt;Last-Modified: Mon, 04
May 2014 02:28:12 GMT&lt;/code&gt;. La prochaine fois que le client fera une requête pour
récupérer cet asset, il renverra la date dans son header &lt;code&gt;If-Modified-Since&lt;/code&gt;,
par exemple &lt;code&gt;If-Modified-Since: Mon, 04 May 2014 02:28:12 GMT&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Le serveur compare alors la date envoyée et celle qu&amp;#39;il possède de son coté.
Si les deux correspondent, alors il renverra un &lt;code&gt;304 Not Modified&lt;/code&gt; pour
indiquer au client que le contenu n&amp;#39;a pas changé. Celui-ci continuera alors
d&amp;#39;utiliser sa version locale. Ainsi, on évite de transmettre du contenu inutile
sur le réseau.&lt;/p&gt;

&lt;p&gt;Par contre si le serveur voit que le fichier qu&amp;#39;il possède est plus récent que
la date envoyée, il répondra avec un &lt;code&gt;200 OK&lt;/code&gt; et le nouveau contenu. Ainsi, le
client utilise désormais la dernière version. &lt;/p&gt;

&lt;p&gt;En faisant ainsi, on évite donc de télécharger un contenu qu&amp;#39;on possède déjà.&lt;/p&gt;

&lt;p&gt;Dans les deux cas, le serveur renvoie de nouvelles informations de fraicheur.&lt;/p&gt;

&lt;p&gt;Comme pour la fraicheur, il existe deux couples de headers pour communiquer des
informations de validation au serveur. En plus de &lt;code&gt;Last-Modified&lt;/code&gt;
/ &lt;code&gt;If-Modified-Since&lt;/code&gt; qui utilisent une date de modification, il est possible
d&amp;#39;utiliser des ETags.&lt;/p&gt;

&lt;p&gt;Un ETag est un hash qui identifie de manière unique chaque fichier. Si le
fichier change, alors son ETag change aussi. Par exemple, le serveur retourne
au client lors du premier appel un header &lt;code&gt;ETag: &amp;quot;3e86-410-3596fbbc&amp;quot;&lt;/code&gt;, et
lorsque le client fait à nouveau appel à la même ressource, il envoie un header
&lt;code&gt;If-None-Match : &amp;quot;3e86-410-3596fbbc&amp;quot;&lt;/code&gt;. Le serveur va comparer les deux ETags et
retourner un &lt;code&gt;304 Not Modified&lt;/code&gt; s&amp;#39;ils sont identiques ou un &lt;code&gt;200 OK&lt;/code&gt; avec le
nouveau contenu s&amp;#39;ils sont différents.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Last-Modified&lt;/code&gt; et &lt;code&gt;ETag&lt;/code&gt; possèdent des comportements très similaires, mais
nous vous conseillons d&amp;#39;utiliser &lt;code&gt;Last-Modified&lt;/code&gt; en priorité.&lt;/p&gt;

&lt;p&gt;En effet, la spec HTTP indique que si un serveur retourne un &lt;code&gt;Last-Modified&lt;/code&gt; et
un &lt;code&gt;ETag&lt;/code&gt;, alors le navigateur doit prendre en priorité le &lt;code&gt;Last-Modified&lt;/code&gt;. De
plus, la majorité des serveurs génèrent l&amp;#39;ETag à partir de l&amp;#39;inode du fichier,
de manière à ce que celui-ci soit modifié au moindre changement.&lt;/p&gt;

&lt;p&gt;Malheureusement, ceci pose des soucis pour peu que vous ayez des serveurs
redondés derrière un load-balancer où chaque serveur possède son propre
filesystem et donc ses propres inodes. Deux fichiers identiques, sur deux
serveurs différents auront des inodes différents et par conséquent des ETag
différents.  Votre système de validation ne fonctionnera plus dès lors que
votre client sera redirigé vers un autre frontal.&lt;/p&gt;

&lt;p&gt;À noter que ce problème n&amp;#39;apparait pas sous nginx, qui ne prends pas en compte
l&amp;#39;inode dans la génération de son ETag. Sous Apache, l&amp;#39;option &lt;code&gt;FileEtag MTime
Size&lt;/code&gt; permet de le désactiver, ainsi que &lt;code&gt;etag.use-inode = &amp;quot;disable&amp;quot;&lt;/code&gt; sous
lighttpd.&lt;/p&gt;

&lt;h3&gt;Récapitulatif&lt;/h3&gt;

&lt;p&gt;À la lumière de ces explications, nous pouvons donc retracer le parcours
classique du téléchargement d&amp;#39;un asset mis en cache.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Le client effectue une première requête pour récupérer un asset. Il récupère
son &lt;code&gt;Cache-Control: max-age&lt;/code&gt; pour la fraicheur et son &lt;code&gt;Last-Modified&lt;/code&gt; pour la
validation.&lt;/li&gt;
&lt;li&gt;S&amp;#39;il demande à nouveau le même asset alors que celui-ci est encore frais, il
le prends directement depuis son disque local.&lt;/li&gt;
&lt;li&gt;S&amp;#39;il le demande au dela de sa date de fraicheur, il fait un appel au serveur
en envoyant son &lt;code&gt;If-Modified-Since&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si le fichier sur le serveur possède la même date de modification que celle
envoyée, il retourne un &lt;code&gt;304 Not Modified&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Si le fichier sur le serveur a été modifié, il retourne un &lt;code&gt;200 OK&lt;/code&gt; avec le
nouveau contenu.&lt;/li&gt;
&lt;li&gt;Dans tous les cas, le serveur retourne un &lt;code&gt;Cache-Control&lt;/code&gt; et un
&lt;code&gt;Last-Modified&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Invalidation du cache&lt;/h3&gt;

&lt;p&gt;Mais le cache est un animal capricieux, et nous savons tous que :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Il y a deux choses complexes en informatique : invalider le cache et nommer
les choses.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Et effectivement, invalider le cache de nos clients quand nous avons besoin de
faire une mise à jour est extrêmement difficile. C&amp;#39;est en fait tellement
difficile que nous n&amp;#39;allons pas le faire du tout.&lt;/p&gt;

&lt;p&gt;Comme le navigateur mets en cache chaque URL, si nous souhaitons modifier un
contenu, il nous suffit de modifier son URL. Et les URL, c&amp;#39;est quelque chose
que nous avons en quantité illimité. Il nous suffit de modifier le nom d&amp;#39;un
fichier pour générer un nouvelle URL. On peut ajouter un numero de version,
un timestamp ou un hash à notre nom de fichier original pour lui générer une
nouvelle url. &lt;/p&gt;

&lt;p&gt;Par exemple : &lt;code&gt;style-c9b5fd6520f5ab77dd823b1b2c81ff9c461b1374.css&lt;/code&gt; au lieu de
&lt;code&gt;style.css&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;En mettant un cache très long sur ces assets (1 an est le maximum officiel de
la spec), c&amp;#39;est comme si on les gardait en cache indéfiniment. Il nous suffit
juste de mettre un cache plus court sur le fichier qui les référence
(généralement le fichier HTML).&lt;/p&gt;

&lt;p&gt;Ainsi, si on pousse en production une modification sur une feuille de style ou
dans un script, il nous suffit de modifier les références à ces fichiers dans
nos sources HTML pour que les clients téléchargent les nouveaux contenus. Le
cache sur les fichiers HTML est beaucoup plus court, de manière à ce que les
changements introduits par notre mise en production soient rapidement
répércutées sur nos clients.&lt;/p&gt;

&lt;p&gt;Les anciens contenus seront encore en cache chez nos clients mais cela n&amp;#39;a pas
d&amp;#39;importance, nous ne les requêterons plus jamais et les éléments non-utilisés
du cache des clients se vident régulièrement.&lt;/p&gt;

&lt;p&gt;La technique est en fait très proche des &lt;code&gt;Etag&lt;/code&gt; vus précédement à la différence
qu&amp;#39;ici nous sommes maitres de la génération du nom unique de fichier et du
moment où nous souhaitons invalider le cache de nos clients.&lt;/p&gt;

&lt;p&gt;Au final, nous utilisons un mélange de ces deux techniques pour gérer un cache
optimal. &lt;/p&gt;

&lt;p&gt;Les éléments dont l&amp;#39;URL est significative, comme les pages HTML ou les
retours d&amp;#39;une API définiront une fraicheur faible (de quelques minutes
à quelques heures, en fonction de la fréquence moyenne de mise à jour). Ceci
permet de s&amp;#39;assurer que le client aura rapidement la nouvelle version quand
celle-ci est déployée, tout en limitant la charge sur le serveur et la quantité
d&amp;#39;information transitant sur le réseau.&lt;/p&gt;

&lt;p&gt;Pour les éléments dont l&amp;#39;URL n&amp;#39;est pas significative, comme les feuilles de
styles, les scripts, les polices de caractère ou les images, on utilisera une
fraicheur maximum d&amp;#39;un an. Ceci permettra au client de garder indéfiniment la
ressource dans son cache sans avoir besoin d&amp;#39;interroger à nouveau le serveur.
On générera par contre une URL différente en fonction d&amp;#39;un hash du contenu
à chaque fois que le contenu vient à changer. On prendra bien garde à modifier
les références à ces fichiers dans les pages HTML.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Nous avons donc vu comment trois points très simples permettent de diminuer
grandement le nombre de total de fichiers à télécharger, les rendre plus
légers, et les télécharger moins souvent.&lt;/p&gt;

&lt;p&gt;La concaténation automatique des fichiers doit être intégrée dans votre
processus de build, afin de garder un environnement de développement clair. La
compression en gzip ne nécessite que quelques modifications sur vos serveurs.
La mise en place d&amp;#39;une stratégie de cache optimale par contre nécessite à la
fois des modifications sur le processus de build et sur la configuration des
serveurs.&lt;/p&gt;

&lt;p&gt;Toutes ces modifications sont relativement peu couteuses à mettre en place et
ne dépendent aucunement ni de la technologie utilisée pour le front-end, ni de
celle utilisée pour le back-end. Elles peuvent être mise en place quelle que
soit votre stack technique. Il n&amp;#39;y a donc plus aucune raison pour ne pas les
déployer dès aujourd&amp;#39;hui.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ParisJS #42</title>
   <link href="http://meetups.pixelastic.com//2015/01/21/parisjs-42/"/>
   <updated>2015-01-21T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2015/01/21/parisjs-42</id>
   <content type="html">&lt;p&gt;Hier soir, meetup &lt;a href=&quot;http://parisjs.org/&quot;&gt;parisjs&lt;/a&gt; chez &lt;a href=&quot;http://www.intechinfo.fr/&quot;&gt;In&amp;#39;Tech Info&lt;/a&gt;, une école d&amp;#39;informatique
du coté des Gobelins (dont les locaux semblent être un ancien parking
réaménagé).  Néanmoins, grande salle, plein de nouveaux venus, ça fait plaisir.&lt;/p&gt;

&lt;p&gt;Commençons par le gros point noir du meetup. Celui-ci était censé commencer
à 19h, mais c&amp;#39;est seulement à 19h45 que les organisateurs commencent à prendre
la parole pour annoncer le programme. Et présenter parisjs, et montrer le
nouveau site, et essayer de faire une démo d&amp;#39;édition de markdown en live, et
faire son auto-promotion, et donner la parole à tous les sponsors pour qu&amp;#39;ils
fasse de même, et du coup c&amp;#39;est super long.&lt;/p&gt;

&lt;p&gt;C&amp;#39;est le même travers que le meetup &lt;a href=&quot;http://www.meetup.com/Nodejs-Paris/&quot;&gt;nodejs paris&lt;/a&gt; et &lt;a href=&quot;http://www.meetup.com/parisrb/&quot;&gt;paris.rb&lt;/a&gt;. Ça ne
commence jamais à l&amp;#39;heure, et même quand ça commence, on doit encore se taper
les publicités avant le film, comme au cinéma. La prochaine fois, je viendrai
en retard.&lt;/p&gt;

&lt;p&gt;Bon, fini d&amp;#39;être aigri, il y avait une annonce intéressante quand même. NUMA
vient d&amp;#39;ouvrir un &lt;a href=&quot;http://cowork.numa.paris/&quot;&gt;espace de coworking&lt;/a&gt; de 150m², avec café à volonté,
ouvert 24h/24, à destination des développeurs, et avec un device lab.&lt;/p&gt;

&lt;h2&gt;Dev Avengers&lt;/h2&gt;

&lt;p&gt;Mais les talks ont ensuite relevé le niveau. &lt;a href=&quot;https://twitter.com/porteneuve&quot;&gt;Christophe
Porteneuve&lt;/a&gt;, la bible vivante du Javascript, qui appelle tout les
auteurs des grands frameworks par leurs petits prénoms et qui réfléchit encore
plus vite qu&amp;#39;il ne parle était le premier sur scène. 37 ans, toutes ses dents,
19 ans dans le web, ça envoie du lourd.&lt;/p&gt;

&lt;p&gt;Il nous a présenté les &lt;a href=&quot;http://bit.ly/devavengers&quot;&gt;outils de travail intra-browser&lt;/a&gt; qui permettent
d&amp;#39;améliorer la productivité de son workflow de travail. Fini le &lt;code&gt;Ctrl-S&lt;/code&gt;,
&lt;code&gt;Alt-tab&lt;/code&gt;, &lt;code&gt;Ctrl-R&lt;/code&gt; pour voir les modifications qu&amp;#39;on vient de faire, on est en
2015 bourdel.&lt;/p&gt;

&lt;p&gt;Petite explication de l&amp;#39;utilité des sourcemaps, qui permettent, en ajoutant des
commentaires dans un fichier minifié de faire le mapping vers les fichiers
sources. Chrome les comprends depuis déjà 4 ans, et nous indique donc les
erreurs dans la console réellement là où elles ont lieu dans les fichiers
sources. Et encore mieux, elles peuvent faire le lien entre un fichier final et
n&amp;#39;importe quel type de fichier source, même des preprocesseurs comme Sass, Less
ou Coffescript.&lt;/p&gt;

&lt;p&gt;Tout le reste du talk donnait des exemples avec Chrome, car c&amp;#39;est le browser
qui possède actuellement les meilleurs outils, même si Firefox et IE12 sont pas
loin derrière.&lt;/p&gt;

&lt;p&gt;On sait tous qu&amp;#39;on peut modifier le HTML et le CSS à la volée avec l&amp;#39;inspecteur
Chrome, mais on peut aussi le faire avec du JS. Le soucis c&amp;#39;est que nos modifs
restent en live dans la page chargée, mais que c&amp;#39;est un peu plus compliqué pour
les récupérer dans un vrai fichier sur le disque.&lt;/p&gt;

&lt;p&gt;Du coup, la solution c&amp;#39;est les &lt;code&gt;workspaces&lt;/code&gt; de Chrome. On lui définit un
dossier de notre disque dur qui contient nos sources, et une fois qu&amp;#39;on lui
a donné l&amp;#39;autorisation, on peut manuellement lui indiquer les mappings entre
notre filesystem et notre network. Du coup, en faisant ainsi et avec les
sourcemaps, on peut modifier directement un fichier source Sass depuis Chrome.&lt;/p&gt;

&lt;p&gt;Bon, sauf que dans ce cas là, on perds la preview instantanée de nos modifs
dans le browser, parce que Chrome n&amp;#39;a aucune idée de comment parser du Sass.
Mais c&amp;#39;est là que notre outil de build en mode &lt;code&gt;watch&lt;/code&gt; peut venir nous aider.
Grunt, Gulp et Brunch proposent tous un moyen d&amp;#39;écouter les modifications du
filesystem pour lancer des taches en fonction des fichiers modifiés.&lt;/p&gt;

&lt;p&gt;Il nous a ensuite parlé de &lt;a href=&quot;https://github.com/facebook/fb-flo&quot;&gt;fb-flo&lt;/a&gt;, un outil de Facebook qui permet de lier
un fichier actuellement chargé par Chrome (CSS ou JS) à un buffer ouvert dans
son IDE, et de reporter automatiquement les modifs de l&amp;#39;un vers l&amp;#39;autre, sans
avoir besoin de recharger la page.&lt;/p&gt;

&lt;p&gt;Dernier outil pour gagner du temps en test crossbrowser, c&amp;#39;est &lt;a href=&quot;http://www.browsersync.io/&quot;&gt;BrowserSync&lt;/a&gt;.
On ouvre autant de pages qu&amp;#39;on le souhaite sur différents browsers, desktop et
mobile, et toute modification sur l&amp;#39;un (scroll, typing dans un formulaire, etc)
est répercutée instantanément dans les autres. L&amp;#39;avantage est que pour les
clics, il rejoue le même selecteur unique sur chaque device plutot que de
cliquer à des coordonnées précises.&lt;/p&gt;

&lt;p&gt;Du coup, si on récapitule :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sourcemaps pour avoir la liaison entre un fichier minifié et les sources des
preprocesseurs&lt;/li&gt;
&lt;li&gt;Workspaces pour faire le mapping entre un fichier du disque dur et un fichier
chargé par Chrome (marche avec les sourcemaps). &lt;em&gt;Je modifie dans Chrome, ça
change sur mon disque&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;fb-flo pour faire du livereload du browser dès qu&amp;#39;un fichier du disque
change. &lt;em&gt;Je modifie sur mon disque, ça recharge dans Chrome&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;BrowserSync pour tester sur plusieurs devices/browsers en parallèle.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On a discuté ensuite autour d&amp;#39;une bière et d&amp;#39;une pizza où il m&amp;#39;a convaincu
d&amp;#39;essayer &lt;code&gt;Stylus&lt;/code&gt;. Syntaxe &amp;quot;clean&amp;quot;, à la &lt;code&gt;ruby&lt;/code&gt;, &lt;code&gt;jade&lt;/code&gt; ou &lt;code&gt;coffeescript&lt;/code&gt;. Je
ne suis pas fan de cette épuration habituellement, mais j&amp;#39;avoue n&amp;#39;avoir jamais
réellement essayé. Par contre le fait de pouvoir redéfinir les propriétés de
base CSS (du genre, dès que je mets telle propriété avec telle valeur, alors ça
mets automatiquement telle autre). Et aussi, les variables des &lt;code&gt;mixins&lt;/code&gt; sont
scopées, ce qui est le truc qui m&amp;#39;ennuie le plus avec Sass.&lt;/p&gt;

&lt;p&gt;Dans le même genre, il m&amp;#39;a vendu &lt;code&gt;brunch&lt;/code&gt; comme étant un grunt-like à base de
&lt;em&gt;convention over configuration&lt;/em&gt; (ce qui est tout le contraire de Grunt et de
son &lt;em&gt;configuration over configuration over configuration&lt;/em&gt;...). Du coup, faut
vraiment que je teste.&lt;/p&gt;

&lt;p&gt;Et il a même dit du bien de &lt;code&gt;famous&lt;/code&gt; (un peu moins d&amp;#39;&lt;code&gt;angular&lt;/code&gt;, forcément).&lt;/p&gt;

&lt;h2&gt;IONIC&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/cedriclombardot&quot;&gt;Cédric Lombardot&lt;/a&gt; nous parle de Ionic
Framework.&lt;/p&gt;

&lt;p&gt;Alors, &lt;a href=&quot;http://ionicframework.com/&quot;&gt;Ionic&lt;/a&gt; c&amp;#39;est un framework qui combine
&lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt; et &lt;a href=&quot;http://cordova.apache.org/&quot;&gt;Cordova&lt;/a&gt; pour
développer des applications hybrides. &lt;/p&gt;

&lt;p&gt;Cédric commence par nous expliquer les avantages et inconvénients de faire de
l&amp;#39;hybride. Le gros avantage de l&amp;#39;hybride c&amp;#39;est que c&amp;#39;est le même code pour
toutes les plateformes, ce qui évite de devoir faire deux applications, pour
Android et iPhone, qui coutent deux fois plus cher.&lt;/p&gt;

&lt;p&gt;Par contre, mieux vaut éviter l&amp;#39;hybride si on a besoin de perfs au top, parce
qu&amp;#39;une surcouche sera toujours plus lente que du natif. Ce qui inclue tous les
super effets d&amp;#39;animation mouf-mouf. Si on a besoin de certaines API très liées
au device, Cordova ne nous y donnera pas forcément accès. Et finalement, si on
n&amp;#39;a besoin de développer que pour une unique plateforme, autant partir sur du
natif.&lt;/p&gt;

&lt;p&gt;Dans les deux cas, pour pouvoir passer son app sur iPhone, il faudra passer par
les 15 jours de validation Apple. Il n&amp;#39;y a rien dans les CGU d&amp;#39;Apple qui bloque
l&amp;#39;hybride plus que le natif.&lt;/p&gt;

&lt;p&gt;Maintenant, parlons de ce qu&amp;#39;apporte Ionic. Déjà, il utilise Cordova, qui est
le moteur open-source utilisé par Phonegap. Il gère aussi parfaitement les
affichages d&amp;#39;élements dans une page, même quand on fait apparaitre/disparaitre
le clavier (source de bugs divers).&lt;/p&gt;

&lt;p&gt;Avec Ionic, on fait une application, pas un site web. On passe sur un paradigme
où on réfléchit en terme de &amp;quot;vues&amp;quot; (écrans), et on doit alors penser à comment
ceux-ci s&amp;#39;emboitent, quel est le comportement du bouton back, etc.&lt;/p&gt;

&lt;p&gt;Ionic est fourni avec des directives (Angular oblige) pour la majorité des
éléments de UI classiques d&amp;#39;une app : header, footer, listes avec
pull-to-refresh, swipe sur item pour avoir un menu, drag&amp;#39;n&amp;#39;drop, popup de choix
d&amp;#39;action, slideshow, etc&lt;/p&gt;

&lt;p&gt;Ça s&amp;#39;installe classiquement à base de &lt;code&gt;npm&lt;/code&gt; et génère un code boilerplate avec
une petite appli pour comprendre comment les différents éléments interagissent.
Si vous voulez vraiment aller vite, il existe même le &lt;a href=&quot;http://ionicframework.com/creator/&quot;&gt;Ionic
Creator&lt;/a&gt; pour générer sa UI à base de
drag&amp;#39;n&amp;#39;drop.&lt;/p&gt;

&lt;p&gt;Ça pêche encore du coté Android quand le browser par défaut est le stockbrowser,
qui a des perfs bien moins bonne que Chrome. Il y a des solutions en cours de
développement pour contrer ça. Il n&amp;#39;est pas non plus compatible sous Windows
Phone pour le moment.&lt;/p&gt;

&lt;p&gt;Coté UI, Ionic vient avec son propre style. Il y a des essais pour reproduire
un style natif Android ou iPhone, mais c&amp;#39;est pas encore au point et jQuery
mobile est plus avancé de ce coté là apparemment. Par contre, on a quand même
le droit à une classe CSS sur le root indiquant si on est sous Android ou sous
IOS pour tweaker notre app en fonction.&lt;/p&gt;

&lt;h2&gt;VIRTJS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/arcanis&quot;&gt;Maël Nison&lt;/a&gt; est venu nous parler un peu plus de
Ionic, qu&amp;#39;il a utilisé sur un projet perso nommé &lt;a href=&quot;http://m.start9.io/&quot;&gt;Start9&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Maël avait &lt;a href=&quot;http://arcanis.github.io/presentation.parisjs-20140625/#/step-1&quot;&gt;déjà
présenté&lt;/a&gt; un
émulateur gameboy qu&amp;#39;il avait développé en javascript. Il a cette fois-ci
poussé le concept un peu plus loin en proposant un site web en Ionic,
accessible donc depuis n&amp;#39;importe quel browser, sur lequel on puisse uploader
ses roms Gameboy et y jouer directement dans le navigateur.  L&amp;#39;avantage est
d&amp;#39;avoir un système crossplatform, on peut commencer sa partie sur son téléphone
dans le métro et la continuer au même endroit sur son desktop plus tard.&lt;/p&gt;

&lt;p&gt;Le gros avantage est que c&amp;#39;est un simple site web. Pas besoin d&amp;#39;installer
quoique ce soit pour l&amp;#39;utilisateur, et pas besoin de passer par la validation
appStore pour le créateur.&lt;/p&gt;

&lt;p&gt;Coté techno, c&amp;#39;est du node en backend, avec du
&lt;a href=&quot;http://sequelizejs.com/&quot;&gt;sequelize&lt;/a&gt; (ORM pour taper sur PostgreSQL et SQLite).
&lt;a href=&quot;https://github.com/systemjs/systemjs&quot;&gt;Systemjs&lt;/a&gt; et
&lt;a href=&quot;https://github.com/google/traceur-compiler&quot;&gt;Traceur&lt;/a&gt; pour ses modules ES6
transformés en ES5. Comme ça, le jour où ES6 est partout, on peut enlever la
transformation. Et sinon, du Ionic pour le front.&lt;/p&gt;

&lt;p&gt;Pour la suite ils envisagent de supporter de plus en plus de jeux, et de plus
en plus de consoles. Ils passeront aussi à Angular 2 quand il sortira (pour
rester sur une stack ES6). Leur retour sur Ionic c&amp;#39;est que c&amp;#39;est cool mais
encore jeune, les issues sont fixées rapidement (si les mainteners sont pas en
vacances...).&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Une bonne soirée ParisJS, avec 3 talks très intéressant, une grande salle, de
la pizza pour tout le monde et des discussions intéressantes autour d&amp;#39;une
bière.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Skethfab &amp; 3DHubs</title>
   <link href="http://meetups.pixelastic.com//2015/01/07/2015-01-07-skethfab-&-3dhubs/"/>
   <updated>2015-01-07T22:15:23+01:00</updated>
   <id>http://meetups.pixelastic.com//2015/01/07/2015-01-07-skethfab-&-3dhubs</id>
   <content type="html">&lt;p&gt;Sketchfab organisait à Numa un meetup, en partenariat avec 3DHubs. Je suis
arrivé en retard (19h pour début à 18h), et du coup j&amp;#39;étais très mal placé (sur
un fauteuil dos à la scène, derrière un pilier, au fond). Vu qu&amp;#39;il n&amp;#39;y avait
pas de micro pour les questions de l&amp;#39;audience, je n&amp;#39;ai pu qu&amp;#39;entendre les
réponses.&lt;/p&gt;

&lt;p&gt;Ce que j&amp;#39;ai pu en retirer, une machine &amp;quot;perso&amp;quot; coute dans les 3000€ et la
majorité des gens sur 3DHubs ne le font pas pour gagner de l&amp;#39;argent (s&amp;#39;ils
peuvent se rembourser la machine c&amp;#39;est déjà bien), mais pour rencontrer
d&amp;#39;autres makers.&lt;/p&gt;

&lt;p&gt;Et... c&amp;#39;était fini !&lt;/p&gt;

&lt;p&gt;camera à 300€ sur un ipad + appli pour faire des scans 3D.
musées de Londres ont scanné et ouvert au public Ramses 2. Pas trop d&amp;#39;interet
en France, semble plus rpotégé. Artistes font des copies &amp;quot;pirates&amp;quot; dans les
musées, dans les parcs (environ 5 minutes).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>HumanTalks Novembre 2014</title>
   <link href="http://meetups.pixelastic.com//2014/12/21/2014-11-18-humantalks-novembre-2014/"/>
   <updated>2014-12-21T11:45:33+01:00</updated>
   <id>http://meetups.pixelastic.com//2014/12/21/2014-11-18-humantalks-novembre-2014</id>
   <content type="html">&lt;p&gt;Chez Octo.&lt;/p&gt;

&lt;h2&gt;De l&amp;#39;idée au projet&lt;/h2&gt;

&lt;p&gt;https://www.youtube.com/watch?v=qvaYpzTHRBc&lt;/p&gt;

&lt;p&gt;Comment faire un projet rapidement, une bonne stack pour fare de sfeatures,pas
faire de la developpement de stack.&lt;/p&gt;

&lt;p&gt;il reprends ce qu&amp;#39;il fait à son boulot vagrant, openstack, capistrano, angular,
node&lt;/p&gt;

&lt;p&gt;github pages pour du simple front
des trucs en SaaS, IaaS, PaaS.&lt;/p&gt;

&lt;p&gt;pour stocker Firebase et Parse. Dur de rajouter de al logique metier dans
firebase, facile avec parse (rajouter des hooks js).
mais sdk parse avec Backbone, pas angular, mais autre project angular-parse&lt;/p&gt;

&lt;p&gt;codeship, à chaque push sur un repoe execute tests, et si passe balance un
script. donc s&amp;#39;en sert pour déployer&lt;/p&gt;

&lt;p&gt;du coup, js pour coder partout et aaS pour mettre en prod.&lt;/p&gt;

&lt;p&gt;facile de mettre en prod, facile de travailler sur de vrais projets et pas
perdre de temps sur la stack.&lt;/p&gt;

&lt;h2&gt;Protobuf&lt;/h2&gt;

&lt;p&gt;https://www.youtube.com/watch?v=IIwQGb3hQCU&lt;/p&gt;

&lt;p&gt;Je me suis occupé de réceptionner les pizzas, du coup j&amp;#39;ai rien vu, dommage :)&lt;/p&gt;

&lt;h2&gt;Formation&lt;/h2&gt;

&lt;p&gt;https://www.youtube.com/watch?v=SXiOtd8hvsI&lt;/p&gt;

&lt;p&gt;auto-entrepreneur, facile de l&amp;#39;etre, mais on devient vite une &amp;quot;grosse
entreprise&amp;quot; et on recoit plein de choses pour les grosses entreprises&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;spam des centres de formations&lt;/li&gt;
&lt;li&gt;page pourrie pour s&amp;#39;inscrire&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;14 milliars fournis par l&amp;#39;etat pour la formation. agence se moquent de la
qualité du rpogrammer, il suffit que vous attestiez avoir fait une formation et
ceux en face attestent l&amp;#39;avoir suivi. donc, arnaque, il veut lui aussi avoir
une part du gateau&lt;/p&gt;

&lt;p&gt;des clients appellent sans savoir combien de temps, quand, pour combien de
personnes. pas facile, faut etre pret.&lt;/p&gt;

&lt;p&gt;numero siret + numero d&amp;#39;agreement de formation. il faut faire une formation,
payée par une boite, pour atetster avoir fait une formation pour avoir un
numero pour pouvoir faire des formations sans problème.&lt;/p&gt;

&lt;p&gt;du coup, pas facile, trop compliqué plein de choses à faire un dédale.&lt;/p&gt;

&lt;p&gt;retour de mathieu segret, humancoders. Est d&amp;#39;accord. A automatisé un maximum de
choses, du coup rends les choses plus agréables.&lt;/p&gt;

&lt;h2&gt;Meteor&lt;/h2&gt;

&lt;p&gt;https://www.youtube.com/watch?v=Kirit9Xl6ZM&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>React JS France #1</title>
   <link href="http://meetups.pixelastic.com//2014/12/08/react-js-france-1/"/>
   <updated>2014-12-08T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2014/12/08/react-js-france-1</id>
   <content type="html">&lt;p&gt;Premier meetup &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;, organisé par &lt;a href=&quot;http://www.deezer.com/&quot;&gt;Deezer&lt;/a&gt; et &lt;a href=&quot;http://www.altima-agency.com/fr&quot;&gt;Altima&lt;/a&gt;, chez
Deezer. Bon panel de speakers pour une première, avec &lt;a href=&quot;https://twitter.com/bloodyowl&quot;&gt;Matthias
Lebrun&lt;/a&gt; d&amp;#39;Altima, &lt;a href=&quot;https://twitter.com/yannickc&quot;&gt;Yannick Croissant&lt;/a&gt; de Deezer et
&lt;a href=&quot;https://twitter.com/vjeux&quot;&gt;Christopher Chedeau&lt;/a&gt; de React (Facebook).&lt;/p&gt;

&lt;h2&gt;React, où comment simplifier la conception d&amp;#39;UI&lt;/h2&gt;

&lt;p&gt;On commence par Matthias qui nous fait une intro à React pour ceux qui ne
connaissent pas. Ça tombait bien, je ne connaissais pas et ça m&amp;#39;a bien donné
envie d&amp;#39;essayer.&lt;/p&gt;

&lt;p&gt;Le principe de React est de simplifier la conception des UI, où tout est devenu
trop compliqué au fil des années. On avait un simple serveur qui nous renvoyait
du HTML au début, maintenant on a des SPA qui vont chercher seulement leurs
données depuis le serveur et doivent mettre à jour leur markup en fonction.&lt;/p&gt;

&lt;p&gt;Avec React, tout est un composant. Chaque composant possède sa propre méthode
&lt;code&gt;render&lt;/code&gt; qui doit retourner un markup HTML qui sera inséré dans le DOM.
L&amp;#39;avantage d&amp;#39;avoir une simple méthode comme ça pour chaque composant c&amp;#39;est que
c&amp;#39;est facile à tester unitairement. Les composants sont simples, petits,
isolés, et les méthodes sont donc faciles à tester.&lt;/p&gt;

&lt;p&gt;Le composant possède aussi un état, une liste de variables internes qu&amp;#39;il peut
modifier en réponse à certaines actions de l&amp;#39;utilisateur ou recevoir depuis un
parent. Ces variables sont privées, et lui permettent de choisir les
modifications à appliquer au markup.&lt;/p&gt;

&lt;p&gt;Le moteur de template de React utilise une syntaxe &lt;code&gt;jsx&lt;/code&gt;, qui est croisement
entre du XML et du Javascript, ce qui fait un peu peur au premier abord. Mais
c&amp;#39;est juste du sucre syntaxique, React arrive avec son pre-processeur qui
transforme ce &lt;code&gt;jsx&lt;/code&gt; dans nos fichiers js en du vrai js. Le pre-processeur
arrive avec quelques autres goodies d&amp;#39;ES6, et sans doute aussi dans le futur
avec des annotations, du type checking, etc.&lt;/p&gt;

&lt;p&gt;Du coup, on a un vrai moteur de template, qui est tout simplement du js. On
peut y faire des conditions, des boucles, du &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, bref tout ce
qu&amp;#39;on veut faire en js sans devoir passer par une complexe syntaxe de template.
Il est donc là inutile de réinventer de la logique dans un autre langage.&lt;/p&gt;

&lt;p&gt;React continue sur sa lancée de simplification en faisant en sorte que tout
soit explicite. Ici, pas d&amp;#39;API polymorphe à la jQuery où les getters et les
setters se mélangent. On a même certaines fonctions qui sont déconseillées
(comme ajouter directement un &lt;code&gt;innerHTML&lt;/code&gt;), et qui possèdent donc des noms bien
flagrants pour montrer qu&amp;#39;on fait quelque chose de mal quand on les utilise
(&lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Pour revenir rapidement sur la méthode &lt;code&gt;render&lt;/code&gt;, qui est le cœur de React, on
a aussi autour la méthode &lt;code&gt;shouldComponentUpdate&lt;/code&gt;, qu&amp;#39;on peut overrider pour
indiquer au moteur que non, là, vraiment, c&amp;#39;est pas la peine de faire un
nouveau rendering du component, je sais qu&amp;#39;il n&amp;#39;a pas bougé. Dans le même ordre
d&amp;#39;idée, on a accès aux events &lt;code&gt;willMount&lt;/code&gt;, &lt;code&gt;didMount&lt;/code&gt; et &lt;code&gt;willUnmount&lt;/code&gt; pour
lancer du code custom à différents moment de la vie d&amp;#39;un composant.&lt;/p&gt;

&lt;p&gt;React possède un très puissant algo de rendering, qui va checker le retour du
&lt;code&gt;render&lt;/code&gt; d&amp;#39;un composant et de tout ses sous-composants pour savoir s&amp;#39;il doit
mettre à jour ou non son rendu. Il batche toutes les modifications ensemble
jusqu&amp;#39;au prochain rendering du browser, et rajoute un petit algo de diff pour
la route.&lt;/p&gt;

&lt;p&gt;Autre parti-pris, qui va dans le sens de la simplification, il n&amp;#39;y a pas
d&amp;#39;héritage dans React, il n&amp;#39;y a que de la composition à base de mixins. On
défini des méthodes qu&amp;#39;on pourra implanter dans différents composants, quels
qu&amp;#39;ils soient (comme réagir à un event de scroll ou de resize par exemple).&lt;/p&gt;

&lt;p&gt;React s&amp;#39;abstrait du DOM officiel aussi en réimplementant pas mal de choses,
mais en le faisant ainsi de manière cross-browser. Il réimplémente par exemple
le principe d&amp;#39;event capture et event bubbling, tout seul. Il en profite pour
rajouter une petit optim de perf dans l&amp;#39;histoire; plutot que de repasser une
nouvelle instance de l&amp;#39;objet event à chaque intermédiaire, il recycle toujours
la même liste de &lt;code&gt;x&lt;/code&gt; objets qu&amp;#39;il passe à chacun des handlers.&lt;/p&gt;

&lt;p&gt;Idem, il possède sa propre représentation du DOM pour savoir quand faire des
updates, qu&amp;#39;il appelle le virtual DOM (et je crois qu&amp;#39;ils utilisent JSDOM, mais
pas sur).&lt;/p&gt;

&lt;p&gt;Globalement, j&amp;#39;ai été convaincu par React et j&amp;#39;ai bien envie d&amp;#39;essayer sur un
prochain projet ou side-project. La simplicité avec laquelle on peut gérer
notre affichage simplifie pas mal de chose. Le markup n&amp;#39;est plus du tout source
de la donnée, il se concentre juste sur afficher les choses d&amp;#39;une manière ou
d&amp;#39;un autre quand elles changent. Les algos de diff, super simples
à coomprendre, permettent de s&amp;#39;assurer qu&amp;#39;on ne render par les choses pour
rien, et les exposer sous forme de méthodes testables rends le truc encore plus
attractif.&lt;/p&gt;

&lt;p&gt;Je pense que ça s&amp;#39;incruste facilement dans un projet Backbone, mais que ça doit
être la bonne galère de le passer dans de l&amp;#39;Angular.&lt;/p&gt;

&lt;h2&gt;Isomorphic JS&lt;/h2&gt;

&lt;p&gt;La seconde présentation, de Yannick Croissant, nous parlait de Javascript
isomorphique, ou de comment générer la même application en front comme en back.
Bon, j&amp;#39;avais déjà assisté à son atelier à ParisWeb sur le même sujet, du coup
j&amp;#39;ai surtout écouté d&amp;#39;une oreille distraite et n&amp;#39;ai pas pris de notes.&lt;/p&gt;

&lt;p&gt;Néanmoins, de mémoire il était question des problèmes que cause le fait de
partir en mode SPA. &lt;/p&gt;

&lt;p&gt;Déjà on duplique de la logique de code entre le back et le front, ce qui est
particulièrement flagrant au niveau des validations de formulaires. On veut
fournir une expérience riche, du coup on ne veut pas perdre du temps avec des
appels serveurs pour vérifier la validité d&amp;#39;un champ de formulaire, et on veut
les tester rapidement en local, en y déportant des règles métiers. Mais on ne
peut pas non plus l&amp;#39;enlever du backend pour des raisons de sécurité. On se
retrouve donc souvent à coder deux fois la même chose, des deux cotés. Au début
de NodeJS on pensait que le fait d&amp;#39;avoir le même langage des deux cotés allait
permettre d&amp;#39;éviter de coder deux fois les choses, mais le langage n&amp;#39;a pas grand
chose à voir là dedans, la question est plus générique au niveau de l&amp;#39;archi.&lt;/p&gt;

&lt;p&gt;Avoir une appli SPA pose aussi de gros problèmes en terme de référencement.
Même si Google comprends le JS, ou même si on peut faire des hacks à base de
phantomJS pour générer des pages statiques à servir aux robots crawleurs, ça
reste des pansements sur des jambes de bois. Le modèle n&amp;#39;est pas adapté.&lt;/p&gt;

&lt;p&gt;React permet de solutionner ce problème de manière assez élégante. Le serveur
génère un HTML à servir au client, incluant du React, qu&amp;#39;il peut lui même
instancier et modifier, comme s&amp;#39;il tournait dans un browser. C&amp;#39;est un état
initial qui est servi au client. Puis toutes les mises à jours suivantes sont
simplement de nouveaux retours de l&amp;#39;API qui vont déclencher des mises à jour de
la vue dans le client. Si on reload complétement la page, la nouvelle page
rendue par le serveur retournera un nouvel état de départ, mais encore une fois
les nouvelles modifs se feront sous forme de diff. On a là une approche
incrémentale, qui permet des affichage de page plus rapides.&lt;/p&gt;

&lt;p&gt;On touche là au meilleur des deux mondes. Sur une url données, dans un contexte
donné, notre serveur nous donnera un HTML parfaitement formé, parfaitement
adapté pour le crawling, le SEO, l&amp;#39;accessibilité, etc. Si le navigateur est en
mesure d&amp;#39;executer React, il peut mettre à jour la vue de manière incrémentale
en redemandant les nouvelles infos au backend, qui peut se permettre de la lui
retourner de manière simple sous forme de data.&lt;/p&gt;

&lt;h2&gt;React, CSS in JS&lt;/h2&gt;

&lt;p&gt;Le dernier talk était de Chistophe Chedeau, de chez Facebook (et sans doute
connu de certains d&amp;#39;entre vous pour son boulot sur Curse Gaming). Il nous
a présenté React depuis sa création jusqu&amp;#39;à ce qu&amp;#39;il est aujourd&amp;#39;hui.&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée principale derrière Reacte était de simplifier la codebase de Facebook.
Des milliers d&amp;#39;ingénieurs qui bossent sur du front-end en même temps, avec des
compétences en HTML/CSS très variées. Il n&amp;#39;y a pas vraiment de dev front chez
Facebook, tous les devs travaillent sur toutes les parties, qu&amp;#39;elles soient
back ou front. Du coup, ils ont souhaité abstraire au maximum certaines parties
du markup pour limiter les erreurs, et simplifier le développement.&lt;/p&gt;

&lt;p&gt;Un des problèmes majeur de CSS qui se fait ressentir sur une codebase comme
celle-là, c&amp;#39;est que tout dans CSS est globales. On definit une classe, elle va
s&amp;#39;appliquer partout dans le markup. Certes on peut préfixer un selecteur pour
le rendre plus precis, mais on n&amp;#39;est jamais sur à 100% d&amp;#39;avoir une isolation
parfaite. Un autre dev peux, consciemment ou non, overrider nos styles. En
utilisant une méthode comme BEM, on peut limiter ce problème mais alors on
rends le code extremement difficile à minifier, avec des classes à rallonge sur
presque tous les éléments.&lt;/p&gt;

&lt;p&gt;Le second problème majeur est qu&amp;#39;il est très difficile de supprimer du code. Il
n&amp;#39;y a pas de couverture de code comme dans d&amp;#39;autres langages qui pourrait être
déduite par des tests unitaires. Quand on supprime du CSS, on ne sait jamais
réellement ce qu&amp;#39;on va casser.&lt;/p&gt;

&lt;p&gt;Et pour finir, ils souhaitaient un moyen simple de pouvoir partager des
constantes entre PHP, Javascript et CSS (un code couleur, un nombre d&amp;#39;éléments
à afficher, un flag de feature flipping, etc).&lt;/p&gt;

&lt;p&gt;Ils ont donc planché sur un moyen de créer des composants isolés, qui chargent
leurs propres dépendances, qui ne se fassent pas overrider par l&amp;#39;extérieur et
qui ne puissent pas non plus le faire.&lt;/p&gt;

&lt;p&gt;Leur action principale, pour obtenir ce pouvoir, a été de convertir le CSS en
Javascript. Tout simplement en React, ils n&amp;#39;écrivent pas leurs propriétés de
style dans du CSS mais dans des objets JSON (légérement améliorés avec quelques
helpers). Cette partie m&amp;#39;a un peu fait peur, et a continué à me suprendre dans
le reste de la présentation. Finalement, après en avoir discuté avec d&amp;#39;autres
devs qui font déjà du React régulièrement, cette approche n&amp;#39;est pas obligatoire
et est même rarement employée : on continue d&amp;#39;utiliser des classes pour le
style.&lt;/p&gt;

&lt;p&gt;Bref, ces propriétés JSON/CSS sont ensuite appliquées directement en &lt;code&gt;style=&lt;/code&gt;
sur les éléments du markup. L&amp;#39;avantage de cette méthode barbare est qu&amp;#39;on est
certain qu&amp;#39;on ne pourra pas se faire overrider par d&amp;#39;autres classes (&lt;code&gt;style&lt;/code&gt;
a la prio la plus forte), et comme on ne déclare pas de classe, on ne va rien
overrider à l&amp;#39;extérieur non plus. C&amp;#39;est assez malin.&lt;/p&gt;

&lt;p&gt;De plus, ils en profitent pour &amp;quot;optimiser&amp;quot; certaines règles au passage (si on
ne mets pas d&amp;#39;unité, c&amp;#39;est des px par défaut par exemple) ou comportement (un
&lt;code&gt;display:none&lt;/code&gt; en React va carrément supprimer le nœud du DOM).&lt;/p&gt;

&lt;p&gt;En fait, pas mal de comportements du DOM classique sont recodés en Javascript
en React. Quand j&amp;#39;ai vu les &lt;code&gt;onMouseEnter&lt;/code&gt; / &lt;code&gt;onMouseLeave&lt;/code&gt; pour recréer le
&lt;code&gt;:hover&lt;/code&gt; j&amp;#39;étais assez dubitatif quand même. Le speaker annoncait que le fait
d&amp;#39;être particulièrement explicite de cette manière rendait le code plus simple
à comprendre. Je suis pas vraiment convaincu à premier abord, mais pourquoi
pas. Par contre, là où je le rejoins c&amp;#39;est que ça rends le code de rendu
vraiment plus facile à style. On peut écrire des tests unitaires qui vont
pouvoir manuellement passer un élément en &lt;code&gt;:hover&lt;/code&gt; et tester un comportement en
allant regarder le contenu de l&amp;#39;objet de style.&lt;/p&gt;

&lt;p&gt;Il a fini par nous expliquer deux-trois autres optimisation que le moteur de
React opère. Pour moi, ce n&amp;#39;est rien de plus que ce que le moteur natif du
browser execute, mais qu&amp;#39;ils ont recodé à la main, et ce qui leur permet de
s&amp;#39;affranchir des différences d&amp;#39;implémentations entre navigateurs. Je ne sais
pas trop quoi penser à ce sujet. Certes ça permet de simplifier le dev et
d&amp;#39;offrir la même expérience à tout le monde, mais ça fait réinventer la roue.&lt;/p&gt;

&lt;p&gt;Plus le talk avancait et plus les démonstrations allaient dans ce sens et j&amp;#39;en
suis sorti en me demandant où ça allait exactement. Vjeux lui même annonçait
que React était jeune, qu&amp;#39;ils ne s&amp;#39;attendaient pas à ce qu&amp;#39;il prenne autant
d&amp;#39;ampleur en dehors de Facebook et qu&amp;#39;ils expérimentent des choses, mais que
tout ne sera peut-être pas bon à garder.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Premier avant-gout de React, j&amp;#39;ai été assez séduit par la simplicité qui s&amp;#39;en
dégage. La dernière conférence m&amp;#39;a laissé plutot dubitatif (comme à chaque
fois qu&amp;#39;on essaie de remplacer CSS par JS parce que &lt;em&gt;&amp;quot;CSS c&amp;#39;est trop
compliqué&amp;quot;&lt;/em&gt;).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>dotJS 2014</title>
   <link href="http://meetups.pixelastic.com//2014/11/17/dotjs-2014/"/>
   <updated>2014-11-17T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2014/11/17/dotjs-2014</id>
   <content type="html">&lt;p&gt;Le 19 Novembre 2014, au &lt;a href=&quot;http://www.theatredeparis.com/&quot;&gt;Théatre de Paris&lt;/a&gt;,
avait lieu la nouvelle édition de &lt;a href=&quot;http://www.dotjs.eu/&quot;&gt;dotJS&lt;/a&gt;. Un lieu
magnifique, des speakers de renom et des présentations intéressantes. Je n&amp;#39;ai
pas réussi à sortir un fil directeur général au programme, mais voici un petit
résumé des différentes conférences.&lt;/p&gt;

&lt;p&gt;C&amp;#39;est dans l&amp;#39;ordre chronologique de la journée, mais sans doute un peu en vrac
dans les idées.&lt;/p&gt;

&lt;h2&gt;James Halliday aka Substack&lt;/h2&gt;

&lt;p&gt;&lt;iframe 
class=&quot;youtube-player&quot;
type=&quot;text/html&quot; 
width=&quot;640&quot; 
height=&quot;390&quot;
src=&quot;http://www.youtube.com/embed/J9_VaU4N3Rg&quot;
frameborder=&quot;0&quot;
allowfullscreen
&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/substack&quot;&gt;Substack&lt;/a&gt;, le mec qui code même dans son sommeil
(jetez un œil à &lt;a href=&quot;https://github.com/substack&quot;&gt;sa timeline&lt;/a&gt;), nous a parlé de...
plein de choses. Je suis pas sur de pouvoir en ressortir le propos exact, mais
j&amp;#39;ai beaucoup apprécié le personnage et la session de questions-réponses qui
a suivi son intervention.&lt;/p&gt;

&lt;p&gt;Il a commencé à nous parler de comment réussir à avoir une
application web qui puisse fonctionner complétement offline, avec le mode
online qui soit simplement un bonus. Pour ça, on passe par un cache manifest,
qui définit la liste des éléments qui doivent être gardés pour le mode offline.
Et si on veut aller encore plus loin, on mets carrément le cache manifest dans
le cache manifest, comme ça on est sur que notre appli ne se connectera pas.&lt;/p&gt;

&lt;p&gt;Il a ensuite énoncé quelque chose de très vrai : un site offline est le
meilleur moyen d&amp;#39;avoir un scaling infini. Zero requête vers le serveur, pas de
problème de charge, il peut y avoir une infinité de personnes qui utilisent le
site en même temps, cela n&amp;#39;influera en rien sur ses fonctionnalités.&lt;/p&gt;

&lt;p&gt;Il a développé, comme à son habitude, un ensemble de modules pour aller dans
cette direction. L&amp;#39;un d&amp;#39;eux utilise &lt;code&gt;localStorage&lt;/code&gt; pour garder un historique des
anciennes versions du site directement dans le browser. Il est ainsi possible
de revenir à des versions de la veille ou de la semaine dernière à partir du
moment où on les a déjà téléchargé une fois.&lt;/p&gt;

&lt;p&gt;S&amp;#39;en vient ensuite la question de l&amp;#39;authentication quand on n&amp;#39;a pas de serveur
distant ? En utilisant les méthodes de crypto définies dans &lt;code&gt;crypto.subtle&lt;/code&gt;, on
peut réussir à faire une grosse partie de l&amp;#39;authent directement dans le
browser.&lt;/p&gt;

&lt;p&gt;Il a finalement parlé d&amp;#39;un autre de ses modules,
&lt;a href=&quot;https://github.com/substack/forkdb&quot;&gt;forkdb&lt;/a&gt;, qui semble
fonctionner comme un database key/value, mais où chaque value contient un hash
des metadata de son historique, permettant d&amp;#39;établir une &lt;em&gt;chain of trust&lt;/em&gt; (à
l&amp;#39;instar des bitcoins), permettant de rejouer l&amp;#39;intégralité des modifications
apportées à la valeur. Cela permet de faire des bases de données
décentralisées, qui tournent individuellement sur les browsers de chacun,
touchant la même source de données, mais qui peuvent se réconcilier plus tard
car l&amp;#39;ensemble des transactions est gardé en mémoire et peut être rejouée.&lt;/p&gt;

&lt;p&gt;Au final je dois bien avouer que j&amp;#39;ai pas tout compris aux applications
concrètes de tout ça, mais ça donnait quand même envie !&lt;/p&gt;

&lt;p&gt;Pour finir, dans les questions-réponses dont je parlais il lui a été demandé
comment il faisait pour être aussi productif. Sa réponse est sans appel : &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Facile, je n&amp;#39;ai pas de boulot. Si vous voulez commencer à être productif,
quittez votre job.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;En vrac sur d&amp;#39;autres questions, notamment sur npm :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Npm c&amp;#39;est un peu comme une décharge publique. Tout le monde y mets plein de
choses, des choses qui marchent, d&amp;#39;autres qui marchent pas, et parfois, en
fouillant bien on trouve des pépites. Comme dans tout langage, il faut une
énorme quantité de mauvais code pour avoir du bon code. C&amp;#39;est pour ça que les
artistes qui font des chefs d&amp;#39;œuvres vivent dans des taudis en bordel. Au final
ce n&amp;#39;est pas une question de langage, de si on mets des parenthèses et des
points-virgules ou non, c&amp;#39;est une histoire d&amp;#39;écosystème de développeurs et de
communauté.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Vraiment, un chouette type !&lt;/p&gt;

&lt;h2&gt;Charlie Robbins&lt;/h2&gt;

&lt;p&gt;Ensuite, &lt;a href=&quot;https://twitter.com/indexzero&quot;&gt;Charlie Robbins&lt;/a&gt;, de
&lt;a href=&quot;https://www.nodejitsu.com/&quot;&gt;Nodejitsu&lt;/a&gt; nous
a parlé de npm aussi, mais d&amp;#39;un point de vu statistique. Il a analysé les repos
npm pour faire de l&amp;#39;analyse statistique dessus et savoir les modules les plus
utilisés comme dépendances, les versions les plus stables (ie. utilisées par le
plus de packages), celles qui présentent le plus de failles de sécurités, etc.&lt;/p&gt;

&lt;p&gt;Le gars est sans doute très fort pour faire des statistiques sur des données de
type graph (et ses slides sont très jolis), mais concrétement je n&amp;#39;ai rien tiré
réellement de cette présentation.&lt;/p&gt;

&lt;h2&gt;Justin Meyer&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/justinbmeyer&quot;&gt;Justin Meyer&lt;/a&gt; nous a quand lui un peu
éloigné du code et s&amp;#39;est rapproché des humains derrière les écrans. Il
a effectué lui aussi quelques stats, à plus petit échelle, sur les projets
sur lesquels il a travaillé durant les dernières années. Il a ensuite noté
chacun des projets selon des tas de critères (sortie dans les temps, effort de
dev, nombre de bugs, etc) et pour chacun il a vérifié s&amp;#39;ils possédaient
telle ou telle carac (test unitaire, module loader, documentation, user
testing, etc).&lt;/p&gt;

&lt;p&gt;Il a ensuite mis ces informations en regard pour en déduire les éléments qui
influent le plus dans la réussite d&amp;#39;un projet, afin de créer une checklist des
choses à faire pour s&amp;#39;assurer un maximum de chances de réussites.&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée est très intéressante, mais comme son initiative vient &lt;a href=&quot;https://github.com/bitovi/checklist&quot;&gt;à peine de
commencer&lt;/a&gt;, il n&amp;#39;avait pas vraiment de
réels chiffres à sortir sur les éléments les plus influençants. Néanmoins, en
prenant quelques pincettes avec les chiffres (calculés sur un petit
échantillon), on arrive quand même à isoler les éléments suivants comme ayant
été des facteurs clés du succès du projet : &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user testing&lt;/li&gt;
&lt;li&gt;design documentation&lt;/li&gt;
&lt;li&gt;shared vision and roadmap&lt;/li&gt;
&lt;li&gt;release in less than 6 months&lt;/li&gt;
&lt;li&gt;social events&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Domenic Denicola&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/domenic&quot;&gt;Domenic&lt;/a&gt;, nous a ensuite parlé de
&lt;a href=&quot;https://github.com/tmpvar/jsdom&quot;&gt;JSDom&lt;/a&gt;. Selon
lui, le meilleur moyen d&amp;#39;apprendre comment quelque chose fonctionne est de le
recoder... en Javascript. Lui et d&amp;#39;autres ont donc recodé le principe du
Document Object Model en nodejs, de manière à pouvoir parser un arbre HTML (et
le CSS/JS qui en découle) sans avoir besoin d&amp;#39;un browser.&lt;/p&gt;

&lt;p&gt;Un peu dubitatif au démarrage quand à l&amp;#39;utilité d&amp;#39;un tel projet, je suis
finalement resté bluffé par le niveau de maturité de JSDom et je pense que je
l&amp;#39;utiliserai si le besoin s&amp;#39;en fait sentir (pour éviter d&amp;#39;utiliser tout une
stack de browser quand juste le DOM est nécessaire).&lt;/p&gt;

&lt;p&gt;Ils réimplémentent complétement les API natives du DOM (&lt;code&gt;document&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;,
&lt;code&gt;HTTPRequest&lt;/code&gt;, etc). Le cas d&amp;#39;usage le plus courant est pour faire du rendering
complet coté serveur. On lui passe un input HTML, du JS et du CSS à coté, et on
peut ensuite requêter le DOM pour obtenir les listeners, les styles, etc.&lt;/p&gt;

&lt;p&gt;Basé sur JSDom, il existe aussi &lt;code&gt;zombie.js&lt;/code&gt; qui permet d&amp;#39;aller un peu plus loin
pour simuler un navigateur. On peut par exemple simuler le
remplissage de formulaire. Il semble que la bibliothèque soit pas mal utilisée
pour tricher sur les jeux en ligne.&lt;/p&gt;

&lt;p&gt;Afin d&amp;#39;être au plus proche de la spec officielle du DOM, ils ont développé un
outil qui accepte en input un fichier de spec au format &lt;code&gt;webidl&lt;/code&gt;, et qui le
transforme en un fichier de classe JSDom en Javascript. Comme ça, il est
(presque) inutile de comprendre la spec pour pouvoir l&amp;#39;implémenter.&lt;/p&gt;

&lt;h2&gt;Angus Croll&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/angustweets&quot;&gt;Angus Croll&lt;/a&gt; nous a fait passer un très bon
moment avec un talk extrèmement intéressant intitulé &amp;quot;Code &amp;amp; Literature&amp;quot;. Pour
lui, Javascript est un langage très souple qui permet de faire énormément de
choses, et qui permet aussi de faire la même chose d&amp;#39;énormément de façons
différentes. Pour éviter de trop se disperser, on a inventé des best practices,
qui fonctionnent dans la majorité des cas. Mais quand on rencontre un edge case
imprévu qui va nous forcer à casser ces règles, on ne sait pas forcément
comment faire car on n&amp;#39;a jamais appris qu&amp;#39;une seule manière de faire.&lt;/p&gt;

&lt;p&gt;Lui nous incite à tester, à jouer avec le code, à essayer. Javascript nous
permet de faire les choses de manière impérative, object ou fonctionnelle,
profitons-en. Ça ne suivra peut-être pas les guidelines et ne sera peut-être
pas propre selon les standards du projet, mais ça nous fera apprendre des
choses. Il n&amp;#39;y a qu&amp;#39;en essayant quelque chose d&amp;#39;inconnu qu&amp;#39;on peut apprendre.&lt;/p&gt;

&lt;p&gt;Lui aussi est d&amp;#39;accord sur ce que disait Substack : il faut beaucoup de mauvais
code pour avoir du bon code. C&amp;#39;est une phase d&amp;#39;apprentissage obligatoire, et il
ne faut pas perdre de vue le coté fun de l&amp;#39;apprentissage. Et les styleguides ne
sont que des indications à un moment donné pour un projet donné, elles
évoluent dans le temps et dans l&amp;#39;espace.&lt;/p&gt;

&lt;p&gt;Par exemple, on considérait avant les notations &lt;code&gt;if (!!x)&lt;/code&gt;, &lt;code&gt;fn &amp;amp;&amp;amp; fn()&lt;/code&gt; ou
&lt;code&gt;(function(){...}())&lt;/code&gt; comme étant des bad smell, alors qu&amp;#39;aujourd&amp;#39;hui on les
considère comme des syntaxes tout à fait valides, pour peu qu&amp;#39;on sache bien les
utiliser. Le niveau des codeurs de JS a évolué, et ce qui était considéré comme
des syntaxes ésotériques fait aujourd&amp;#39;hui partie intégrante du langage.&lt;/p&gt;

&lt;p&gt;Javascript est un langage à part entière, dont il faut comprendre les
subtilités. Au début on semble être en terrain connu, la syntaxe est facile,
qu&amp;#39;on vienne de Java ou de C, on s&amp;#39;y retrouve. Puis on commence à plonger un
peu plus et on se rends compte qu&amp;#39;on n&amp;#39;avait vu que la partie émergée de
l&amp;#39;iceberg et que tout le &amp;quot;weird shit&amp;quot; se trouve caché en dessous. Et tout
à coup, tout semble compliqué. Alors on se barde de plein de bonnes pratiques
et de &lt;code&gt;jshint&lt;/code&gt; et &lt;code&gt;jscs&lt;/code&gt; et on se pense en sécurité. Mais on perds le fun.&lt;/p&gt;

&lt;p&gt;Playing is learning. C&amp;#39;est en essayant de faire les choses différement qu&amp;#39;on
apprends. Les développeurs autodidactes sont souvent les meilleurs, parce
qu&amp;#39;ils ont fait des erreurs, et comprennent ce que cela implique, ce qui
fonctionne et ce qui ne fonctionne pas. Ils peuvent penser à des alternatives,
et continuent de s&amp;#39;amuser.&lt;/p&gt;

&lt;h2&gt;Mike McNeil&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/mikermcneil&quot;&gt;Mike McNeil&lt;/a&gt;, créateur de
&lt;a href=&quot;http://sailsjs.org/#/&quot;&gt;SailsJS&lt;/a&gt;, nous a parlé de machines. J&amp;#39;ai pas pris
énormément de notes sur cette conférence, donc je la fais essentiellement de
tête.&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée des &lt;a href=&quot;https://github.com/node-machine/machine&quot;&gt;machines&lt;/a&gt; est de définir
les méthodes de ses modules sous forme d&amp;#39;objet, qui contiennent effectivement
dans une clé la méthode en elle-même, mais surtout pas mal de metadata sur la
méthode autour. On peut par exemple y ajouter des méthodes de &lt;code&gt;preinput&lt;/code&gt; ou
&lt;code&gt;postoutput&lt;/code&gt; pour sanitizer le contenu ou le formatter d&amp;#39;une certaine manière.
On peut aussi y définir les différents arguments, en indiquant des exemples, et
une petite phrase de documentation.&lt;/p&gt;

&lt;p&gt;En faisant ainsi, on se rajoute une couche supérieure d&amp;#39;abstraction au dessus
de nos méthodes, mais on y gagne un moyen simple de faire de la documentation
auto-générée et qui sera forcément à jour (pas comme des annotations sous forme
de commentaire qui finissent toujours pas être désynchros).&lt;/p&gt;

&lt;p&gt;L&amp;#39;idée parait intéressante, à condition que ces objets soient &amp;quot;compilés&amp;quot;
finalement en JS (et hop, encore un preprocesseur de plus dans le pipe).&lt;/p&gt;

&lt;h2&gt;John-David Dalton&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/jdalton&quot;&gt;John-David Dalton&lt;/a&gt;, créateur de
&lt;a href=&quot;https://lodash.com/&quot;&gt;lodash&lt;/a&gt;, nous a parlé des shims et des bibliothèques et
pourquoi une bibliothèque est supérieure.&lt;/p&gt;

&lt;p&gt;Il commence par balayer tout un tas d&amp;#39;a-priori qu&amp;#39;on peut avoir sur les
implémentations natives dans les browsers. Comme quoi la syntaxe est plus
simple, que les perfs sont meilleures, qu&amp;#39;il n&amp;#39;y a pas besoin de compilation
spéciale ou que les implémentations sont stables. Tout ceci n&amp;#39;est pas vrai et
il donne quelques exemples sur plusieurs browsers.&lt;/p&gt;

&lt;p&gt;Ensuite, il s&amp;#39;attaque aux shims (qui consistent à définir manuellement des
méthodes pour combler les trous des browsers, mais de laisser l&amp;#39;implémentation
native si elle existe). Les shims sont une bonne solution, mais qui n&amp;#39;est pas
parfaite selon lui. Notamment, on subit les régressions de performance qui
peuvent apparaitre entre les versions des navigateurs. Mais surtout, on risque
de casser des implémentations si on remplace un prototype natif par notre
propre version, lors des futures versions où ce prototype sera implémenté.&lt;/p&gt;

&lt;p&gt;Pour lui, la meilleure solution est d&amp;#39;utiliser une bibliothèque, qui elle
s&amp;#39;assure d&amp;#39;être compatible entre tous les navigateurs. Lodash implémente la
même API qu&amp;#39;&lt;a href=&quot;http://underscorejs.org/&quot;&gt;underscore&lt;/a&gt;, mais avec un axe
particulier sur la performance. Pour avoir regardé le code source des deux
librairies, celui d&amp;#39;underscore est parfaitement lisible et clair et on aurait
tous pu l&amp;#39;écrire. Celui de lodash est bien plus complexe car même s&amp;#39;il expose
la même API les rouages internes passent par des optimisations bien plus
importantes.&lt;/p&gt;

&lt;p&gt;En plus de ça, lodash offre du sucre syntaxique pour les appels les plus
courants des méthodes et permet de chainer et de fusionner les itérations
&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt; et &lt;code&gt;take&lt;/code&gt;. Si vous souhaitez par exemple prendre les 10
premiers éléments de votre liste qui matchent tel critère après être passé par
telle transformation alors lodash s&amp;#39;arretera dès qu&amp;#39;il aura trouvé les 10
élements. Avec underscore ou une autre implémentation classique, on aurait du
itérer trois fois sur le même set (une pour la transfo, une pour le filter et
une pour n&amp;#39;en prendre que 10).&lt;/p&gt;

&lt;h2&gt;Soledad Penades&lt;/h2&gt;

&lt;p&gt;Démos de web audio, en jouant sur les pitchs et la fréquence. J&amp;#39;avoue que j&amp;#39;ai
pas énormément de souvenirs de cette présentation.&lt;/p&gt;

&lt;h2&gt;Joe McCann&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/joemccann&quot;&gt;Joe McCann&lt;/a&gt; nous parle d&amp;#39;optimisations de V8,
le moteur qui fait tourner node.  Pour lui, il y a deux types d&amp;#39;ingénieurs;
ceux qui se demandent &amp;quot;comment ça marche ?&amp;quot; et ceux qui se demandent &amp;quot;qu&amp;#39;est-ce
que je peux construire avec ça ?&amp;quot;. Lui se situe dans la première catégorie et
a plongé dans les rouages de V8 pour nous remonter quelques astuces d&amp;#39;optim de
perf.&lt;/p&gt;

&lt;p&gt;V8 est extremement intelligent et va s&amp;#39;occuper de faire la majorité des
optimisations tout seul. Néanmoins, il y a moyen de l&amp;#39;aider en le mettant sur
la bonne piste.&lt;/p&gt;

&lt;p&gt;Déjà, définir des fonctions qui acceptent toujours le même nombre d&amp;#39;arguments,
et toujours de même type va lui permettre d&amp;#39;optimiser la mémoire allouée. Quand
on défini des objets, il est plus intéressants de définir l&amp;#39;objet, avec toutes
ses clés (même &lt;code&gt;null&lt;/code&gt; ou &lt;code&gt;undefined&lt;/code&gt;) plutot que de définir un objet vide et
d&amp;#39;ajouter ensuite les clés à la main. Ensuite, il faut favoriser les tableaux
d&amp;#39;élements de même type (éviter de mixer des int, string et objets par
exemple), ce qui parait assez évident. Dans le même ordre d&amp;#39;idée, V8 parvient
plus facilement à optimiser les fonctions nommées que les fonctions anonymes,
même si elles sont directement invoquées.&lt;/p&gt;

&lt;p&gt;Mais surtout, là où l&amp;#39;optimisation devient plus obscure c&amp;#39;est sur la taille (en
caractères) d&amp;#39;une fonction. En effet, par défaut, si une méthode fait moins de
600 caractères (commentaires inclus) V8 va la garder en mémoire directement
plutot que d&amp;#39;avoir un pointeur vers sa définition. Joe nous a fait quelques
démos en grossissant artificiellement la taille d&amp;#39;une méthode en ajoutant
simplement des commentaires et en la jouant des millions de fois. La différence
entre les deux était flagrante (de 1 à 10s).&lt;/p&gt;

&lt;p&gt;Cette limite de 600 chars est paramétrable en passant un flag à V8
à l&amp;#39;initialisation (&lt;code&gt;--max_inlined_source_size&lt;/code&gt;). Et il est aussi possible de
changer cette limite on the fly directement dans une appli node (par exemple
sur une route donnée), en utilisant la syntaxe (étrange) &lt;code&gt;%SetFlags()&lt;/code&gt; qui
permet de passer l&amp;#39;instruction directement à la couche C depuis le js.&lt;/p&gt;

&lt;h2&gt;Paul O&amp;#39;Shannessy&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/zpao&quot;&gt;Paul&lt;/a&gt; nous a parlé de
&lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt;. React est le V du trigramme MVC et
vient de chez Facebook. Initialement, il s&amp;#39;appellait XHP, un enfant illégitime
entre PHP et XML.&lt;/p&gt;

&lt;p&gt;Le principe de React est d&amp;#39;avoir des composants d&amp;#39;UI réutilisables et qui sont
uniquement responsables de l&amp;#39;affichage de leur data. La donnée arrive forcément
d&amp;#39;en haut. Le composant recoit sa nouvelle donnée, mets à jour son affichage.&lt;/p&gt;

&lt;p&gt;Honnêtement, plus j&amp;#39;entends parler de React et plus j&amp;#39;ai envie d&amp;#39;essayer. Ça me
semble une manière tellement élégante d&amp;#39;isoler ses composants UI tout en leur
gardant une logique simple. Le composant n&amp;#39;est pas responsable de la donnée, ce
n&amp;#39;est pas lui qui en garde une copie, il est juste notifié de son changement et
se doit de se mettre à jour en fonction.&lt;/p&gt;

&lt;p&gt;Mon résumé de React ne lui fait hommage, mais on mettra ça sur le compte de la
fatigue à la fin de l&amp;#39;écriture de ce CR.&lt;/p&gt;

&lt;h2&gt;Julien Lecompte et Yehuda Katz&lt;/h2&gt;

&lt;p&gt;Je n&amp;#39;ai pas parlé des interventions de &lt;a href=&quot;https://twitter.com/powersander&quot;&gt;Julien
Lecompte&lt;/a&gt; et &lt;a href=&quot;https://twitter.com/wycats&quot;&gt;Yehuda
Katz&lt;/a&gt; car je n&amp;#39;ai pas pris de notes à ce moment
(fatigue, manque de batterie de laptop ? je ne me souviens plus de la raison).&lt;/p&gt;

&lt;p&gt;Julien nous a parlé du YUI framework, de son histoire et de ce qu&amp;#39;il est
devenu. Yehuda nous a parlé de la difficulté de maintenir des projets
open-source et de les faire monter de version majeure sans s&amp;#39;aliéner toute la
communauté (transparence, rétro-compatibilité, eat your own dogfood,
open-source rapidement). Même s&amp;#39;il ne l&amp;#39;a pas nommé, tout ce qu&amp;#39;il indiquait
était l&amp;#39;exact opposé de ce qu&amp;#39;Angular est en train de faire pour sa v2.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Beaucoup de sujets ont été abordés durant cette journée, sans qu&amp;#39;il ne soit
possible de donner une ligne claire. Autant
à &lt;a href=&quot;http://www.dotscale.io/&quot;&gt;dotScale&lt;/a&gt; il était évident que le gros sujet était
&lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt; tellement toutes les présentations en
parlaient, autant là tout le monde parlait de choses différentes : du backend,
du frontend, des browsers, des serveurs, des outils de builds, des processus,
etc.&lt;/p&gt;

&lt;p&gt;Je retiendrai particulièrement les interventions de Substack et Angus Croll
comme étant les deux moments forts de la journée. Je noterai cependant la
totale absence d&amp;#39;Angular dans cet événement. Seul Yehuda en a parlé sans le
citer, comme quoi, Angular et Javascript restent deux mondes différents.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>ParisJs 40</title>
   <link href="http://meetups.pixelastic.com//2014/11/14/2014-10-29-parisjs-40/"/>
   <updated>2014-11-14T13:45:26+01:00</updated>
   <id>http://meetups.pixelastic.com//2014/11/14/2014-10-29-parisjs-40</id>
   <content type="html">&lt;p&gt;Pour la 40e édition, c&amp;#39;est Deezer qui nous a accueilli dans leurs très beaux
locaux. On sent une grande influence Spotify dans l&amp;#39;organisation des équipes
(grands open-spaces, dashboard de monitoring, salles de réunions funky et
ambiance décalée).&lt;/p&gt;

&lt;p&gt;On a parlé de CSS en Javascript, du marché de l&amp;#39;emploi pour les devs, de
bitcoin et d&amp;#39;OAuth 2 dans le browser.&lt;/p&gt;

&lt;h3&gt;GSS, où le CSS rêvé par un dev JS&lt;/h3&gt;

&lt;p&gt;Khalid Jebbari nous à (longuement) parlé de CSS, et de ses déboires avec. Il
est développeur Javascript et pour lui réussir à aligner des éléments de layout
en CSS relève du calvaire. Tout lui semble contre-intuitif et bourré de hack
à connaitre. Citation verbatim : &amp;quot;C&amp;#39;est pour ça que les gens détestent CSS
: parce que ça marche jamais comme on veut&amp;quot;.&lt;/p&gt;

&lt;p&gt;Il va sans dire que je suis contre ce postulat de base. CSS, comme tous les
langages de programmation, nécessite une phase d&amp;#39;apprentissage pour en
comprendre les paradigmes. Une fois qu&amp;#39;on a saisi les éléments de base, il
suffit de les assembler et de composer avec pour créer des layouts. Le langage
est bien complexe à comprendre qu&amp;#39;il n&amp;#39;y parait initialement, et oui, il n&amp;#39;est
pas parfait. Aligner deux blocs cote à cote pour qu&amp;#39;ils partagent la même
hauteur ou aligner un élément verticalement sont des choses qui paraissent
basiques mais qui sont complexes à faire. C&amp;#39;est faisable, il faut apprendre
comment, mais ce n&amp;#39;est pas évident.&lt;/p&gt;

&lt;p&gt;Khalid nous a donc ensuite présenté une solution à base de Javascript, pour
écrire du CSS, nommée GSS. Celle-ci est fondée sur syntaxe du type prolog, pour
faire de la programmation logique.&lt;/p&gt;

&lt;p&gt;On définit en substance le résultat qu&amp;#39;on souhaite obtenir : &amp;quot;Je veux trois
colonnes, de largeur identiques, dont la hauteur soit égale à la plus grande
hauteur des trois, avec un espace de 10px entre chaque&amp;quot;. Ensuite, le système
teste toutes les possibilités pour trouver un ensemble de valeurs qui match.&lt;/p&gt;

&lt;p&gt;Sous le capot, les éléments sont ensuite positionnées en &lt;code&gt;position:absolute&lt;/code&gt; et
toute la partie calcul est reléguée au GPU. Dès qu&amp;#39;une des contraintes change,
alors tout est recalculé.&lt;/p&gt;

&lt;p&gt;C&amp;#39;est une approche intéressante pour déclarer un layout, mais dans les faits
tous les exemples qu&amp;#39;il a résolu avec GSS pouvaient être résolu en CSS pur,
pour peu qu&amp;#39;on maitrise assez le langage. En l&amp;#39;état, une implémentation en
Javascript de GSS dans le navigateur me parait bien trop peu performant
(nombreux calculs, repaints et entremelage thread Javascript/GPU/rendering)
pour être utilisé en production.&lt;/p&gt;

&lt;p&gt;Au final, l&amp;#39;idée est intéressante, et si cette syntaxe alternative était
possible nativement, dans les browsers, elle pourrait être une alternative
intéressante au CSS. Je doute qu&amp;#39;elle soit réellement plus simple à apprendre
cela-dit. En l&amp;#39;état, sous forme de librairie externe, ça me semble surtout une
solution bancale à un faux problème.&lt;/p&gt;

&lt;h3&gt;Developers in tech&lt;/h3&gt;

&lt;p&gt;Jean-loup Karst, de breaz.io nous a parlé des technos les plus utilisées
aujourd&amp;#39;hui par les startups parisiennes. Je vous renvoie au CR des HumanTalks
d&amp;#39;Octobre où il a donné sensiblement la même présentation.&lt;/p&gt;

&lt;h3&gt;Bitcoin in the browser&lt;/h3&gt;

&lt;p&gt;Excellet&lt;/p&gt;

&lt;p&gt;Bitcoin
Internet contient du web, de smails, des ftp, etc. Les blockchain c&amp;#39;est le même
principes mais pour le moment on n&amp;#39;a que de sbitcoins dessus. Ca permet de
construire sdes sustemes décentralisés.
Grosses problematiques de scurité, par reputation, etc.&lt;/p&gt;

&lt;p&gt;blockchain est une suite de sblocs. chaque bloc possede un hash de toutes les
transactions précédente. donc on peut pas changer la liste sans changer le hash
et donc invalider toute la suite. on regade le dernier block pour voir
l&amp;#39;historique&lt;/p&gt;

&lt;p&gt;wallet clé publique et clé privé
clé public est comme un RIB, public, on peut la donner à tout le monde. On la
donne à tout le monde.
clé privé permet d&amp;#39;envoyer de l&amp;#39;argent. ne jamais la partager et la cacher
contre tout&lt;/p&gt;

&lt;p&gt;actuelllement en CB, on autirise le commercan à prelever les sous. Avec
bitcoin, on pousse des sous vers quelqu&amp;#39;un d&amp;#39;autres.&lt;/p&gt;

&lt;p&gt;les bitcoins sont immuales il appartiennent à quelqu&amp;#39;un ou quelqu&amp;#39;un d&amp;#39;autres.
Comme des terrain, il n&amp;#39;a pas bougé quand on le donne, mais il appartient
à quelqu&amp;#39;un d&amp;#39;autre.
Sur une transaction, il y a un script avec un challenge à relever pour prouver
que c&amp;#39;est à moi. Pour prouver qu&amp;#39;un bitcoin m&amp;#39;appartient, y a deux choses
à faire. On prouve qu&amp;#39;on peut résoudre un challenge, et on rajoute un autre
challenge pour prouver qu&amp;#39;il n&amp;#39;ay que l&amp;#39;autre personne qui peut les dépenser.
On utilise une clé privée pour sufner la transaction, les challenges.
On fait un challenge qui dit &amp;quot;seulle la personne qui possède la clé privée qui
conrrespond à cette clé publique peut le dépenser&amp;quot;. Mais on peut faire tous les
challenges qu&amp;#39;on veut (réputation, contrat à signer avec unfo, etc).&lt;/p&gt;

&lt;p&gt;aptget install bitcoin. Une journée pour synchroniser la blockahin du résearU.
blockahin.info pour voir sur un UI l&amp;#39;historique d&amp;#39;une adresse bitcoin.&lt;/p&gt;

&lt;p&gt;lib nommée bitcore&lt;/p&gt;

&lt;p&gt;on demande une adresse au server node bitcoin.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>dotCSS 2014</title>
   <link href="http://meetups.pixelastic.com//2014/11/14/dotcss-2014/"/>
   <updated>2014-11-14T00:00:00+01:00</updated>
   <id>http://meetups.pixelastic.com//2014/11/14/dotcss-2014</id>
   <content type="html">&lt;p&gt;Vendredi après-midi avait lieu la première conférence
&lt;a href=&quot;http://www.dotcss.eu/&quot;&gt;dotCSS&lt;/a&gt;. Comme d&amp;#39;habitude
pour les dot conferences, le lieu était magique. Cette fois-ci, au théatre des
variétés, sur les grands boulevards.&lt;/p&gt;

&lt;p&gt;La demi-journée a été riche en informations autour de CSS, depuis sa création,
jusque son futur, les choses bizarres qu&amp;#39;on peut faire avec, les outils qui
tournent autour et son intégration au sein d&amp;#39;une équipe aux compétences
diverses.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2014-11-15/dotcss.jpg&quot; alt=&quot;dotCSS&quot;&gt;&lt;/p&gt;

&lt;p&gt;Le talk d&amp;#39;ouverture était de &lt;a href=&quot;https://twitter.com/glazou&quot;&gt;Daniel Glazman&lt;/a&gt;, co-chairman du W3C. Il a rappellé
qu&amp;#39;il était &amp;quot;juste&amp;quot; co-chairman, et pas co-boss. Que ce n&amp;#39;était pas lui qui
prenait les décisions finales quand à l&amp;#39;orientation du web, mais qu&amp;#39;il avait
plus un rôle d&amp;#39;huile entre les différentes pièces, un facilitateur de débats
(souvent houleux).&lt;/p&gt;

&lt;p&gt;Le W3C est un consortium de représentant de sociétés privées et des grands
acteurs du web, de fabricants de navigateurs, de sites à fort traffic, de
fabricant de hardware, etc. Ils se mettent d&amp;#39;accord pour donner un axe de
travail pour l&amp;#39;amélioration des technos du web (CSS entre autres). Mais &lt;em&gt;chaque
membre a son propre planning, ses propres objectifs&lt;/em&gt; et le rôle du W3C est de
réussir à trouver un compromis qui conviennent à tout le monde. Et parfois, ces
consensus donnent quelque chose d&amp;#39;hybride qui ne convient réellement
à personne.&lt;/p&gt;

&lt;p&gt;Retrospectivement, on peut dire que plusieurs erreurs ont été faites lors de la
création de CSS selon ce principe. Par exemple la fusion des marges, le
principe du box-model, ou la complexité à réussir à centrer verticalement du
texte. Pour leur défense, il faut bien avouer que CSS était initialement prévu
pour donner un peu de style à des rapports académiques, à du texte pur et dur,
pas à faire des mises en pages complexes dépendantes de la résolution d&amp;#39;écran,
de la vitesse de la bande passante et de la densité de pixels comme on lui
demande aujourd&amp;#39;hui.&lt;/p&gt;

&lt;p&gt;Glazou a terminé par nous présenter, non sans trolls, les prochaines shiny
features de CSS. &lt;em&gt;Les tant attendues variables arrivent enfin !&lt;/em&gt; Sauf que c&amp;#39;est
pas exactement des variables, ce sont des Custom Inherited Properties qui ne
sont donc pas globales, mais qui cascadent depuis un élément parent vers ses
descendants.&lt;/p&gt;

&lt;p&gt;Pour aligner du texte verticalement, on a le fantastique flexbox qui permet de
faire les mises en pages les plus folles au prix d&amp;#39;une syntaxe complexe avec
X propriétés différentes pouvant prendre Y valeurs possibles.&lt;/p&gt;

&lt;p&gt;Et puis, il y a le nouveau sélecteur &lt;code&gt;:matches()&lt;/code&gt; qui est plus du sucre
syntaxique et qui permet de simplifier l&amp;#39;écriture de certains sélecteurs (par
exemple &lt;code&gt;:matches(section, article) :matches(h1, h2)&lt;/code&gt; plutot que d&amp;#39;écrire
&lt;code&gt;section h1, section h2, article h1, article h2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Dans le même ordre d&amp;#39;idées, des améliorations à &lt;code&gt;:nth-child()&lt;/code&gt; sont dans le
pipe, pour pouvoir préciser un sélecteur afin de ne compter que certains
éléments.&lt;/p&gt;

&lt;p&gt;On parle aussi d&amp;#39;une syntaxe proposée pour pouvoir sélectionner un élément
autre que celui qui se trouve en bout de chaine d&amp;#39;un sélecteur. Aujourd&amp;#39;hui on
peut écrire &lt;code&gt;div p&lt;/code&gt; pour sélectionner tous les paragraphes dans des divs, mais on ne
peut pas écrire de sélecteur pour sélectionner tous les divs qui contiennent
des paragraphes.&lt;/p&gt;

&lt;p&gt;Mais les modifications sans doute les plus importantes à mon sens seraient de
pouvoir avoir accès au moteur de parsing CSS, en read-only, depuis Javascript.
Ne plus être obligé de reparser les règles CSS à la main pour calculer la
taille d&amp;#39;une &lt;code&gt;font&lt;/code&gt; en pixels ou la valeur d&amp;#39;une couleur à un point x au milieu
d&amp;#39;un &lt;code&gt;linear-gradient&lt;/code&gt;. Puisque le parser CSS a déjà fait ce travail, il serait
bon qu&amp;#39;on puisse y accéder directement.&lt;/p&gt;

&lt;p&gt;Une très bonne intro, aussi bien tournée vers le passé que le futur, pour
commencer ces conférences dotCSS !&lt;/p&gt;

&lt;h2&gt;Bridging the gap between developers and designers&lt;/h2&gt;

&lt;p&gt;Le second speaker faisait parti de ces nombreux speakers français qui ont fait
l&amp;#39;effort de présenter en anglais pour l&amp;#39;auditoire en grande partie
non-francophone. &lt;a href=&quot;https://twitter.com/kaelig&quot;&gt;Kaelig&lt;/a&gt; travaille aujourd&amp;#39;hui au
NY Times après avoir bossé au Guardian.&lt;/p&gt;

&lt;p&gt;Sa présentation n&amp;#39;était pas réellement technique, mais portait plus sur la
manière de faire en sorte que &lt;em&gt;les développeurs front et les designers
travaillent mieux ensemble&lt;/em&gt;. Il est indispensable pour lui que cela passe par un
partage d&amp;#39;un langue commune. Que quand un designer indique que le header doit
être &amp;quot;gris clair&amp;quot;, il n&amp;#39;y ai pas d&amp;#39;ambiguité sur quel gris il faut utiliser.&lt;/p&gt;

&lt;p&gt;Pour cela, ils utilisent une feuille recensant toutes les couleurs utilisées
dans leur site, en donnant un nom à chacun (du type &lt;code&gt;neutral-1&lt;/code&gt;,
&lt;code&gt;corporate-color&lt;/code&gt;, etc) et la valeur hexadécimale qui va avec. En faisant
ainsi, designers et développeurs parlent bien toujours des mêmes couleurs et se
sont créés un dictionnaire de mots partagés. Le nom de la couleur que les
designers emploient à l&amp;#39;oral pour discuter entre eux est aussi le nom de la
variable dans les fichiers CSS. La communication entre les deux mondes est
alors grandement simplifiée.&lt;/p&gt;

&lt;p&gt;Ils appliquent le même principe pour les fonts, en créant une matrice des
différentes combinaisons de font/size utilisées, en les réferencant par leur
fonction comme par exemple &lt;code&gt;heading-3&lt;/code&gt; ou &lt;code&gt;maintext-2&lt;/code&gt;. Ici aussi, le
&lt;em&gt;vocabulaire des designers a été uniformisé, et les mêmes termes sont utilisés
dans les feuilles de styles&lt;/em&gt;, ce qui aide en plus à développer directement en
peer programming designer/developer dans le browser.&lt;/p&gt;

&lt;p&gt;Pour les breakpoints RWD, même histoire, ils ont arreté de mettre des valeurs
en &lt;code&gt;em&lt;/code&gt; dans leurs media-queries car cela n&amp;#39;évoque rien à la lecture. A la
place, ils ont créé des mixins qui peuvent être facilement comprises à la
lecture et ont abstrait les détails en dessous. Par exemple, &lt;code&gt;mq(from:tablet)&lt;/code&gt;,
&lt;code&gt;mq(from:phone, to:tablet)&lt;/code&gt;, &lt;code&gt;mq(until:tablet)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Niveau grille, même combat, création de helpers pour pouvoir rapidement définir
&amp;quot;je veux trois colonnes, mais en desktop en avoir 7&amp;quot;. Le code SCSS directement
lisible exprime bien cette intention, on a des helpers pour définir des règles
différentes pour phone et desktop, et on exprime avec d&amp;#39;autres helpers le
nombre de colonnes qu&amp;#39;on souhaite. &lt;em&gt;Toute la complexité de largeur de colonnes,
largeur des marges, breakpoints est cachée&lt;/em&gt; dans ces mixins (qui sont le
territoire des devs), alors que &lt;em&gt;l&amp;#39;intention est exposée un niveau plus haut&lt;/em&gt;
(territoire partagé dev/designer).&lt;/p&gt;

&lt;p&gt;Le fait de partager la même langue pour parler de la même chose aide à la
cohésion de l&amp;#39;équipe et à l&amp;#39;appropriation du projet. Il est plus facile de
modeler le code pour qu&amp;#39;il suive les idées du designer que de remodeler le
designer pour qu&amp;#39;il parle comme du code. En partageant tout cela entre les deux
territoires, on augmente l&amp;#39;appropriation du code par les designers et
l&amp;#39;appropriation du design par les devs.&lt;/p&gt;

&lt;h2&gt;Ten principles for effective front-end dev&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;Harry Roberts&lt;/a&gt;, créateur de
&lt;a href=&quot;https://github.com/inuitcss&quot;&gt;inuit.css&lt;/a&gt; nous a ensuite
&lt;a href=&quot;https://speakerdeck.com/csswizardry/ten-principles-for-effective-front-end-development&quot;&gt;parlé&lt;/a&gt;
de quelque chose d&amp;#39;un peu plus meta que le CSS.&lt;/p&gt;

&lt;p&gt;D&amp;#39;après lui, dans un projet web, il vaut mieux avoir une connaissance générale
de tous les métiers qui vont prendre part au projet, plutot que d&amp;#39;être expert
uniquement de la partie qui nous concerne. Dans cette optique, il nous a donné
10 conseils pour ne pas perdre de vue l&amp;#39;essentiel. Plusieurs de ses conseils se
recoupaient, je vais donc les synthétiser.&lt;/p&gt;

&lt;p&gt;Tout d&amp;#39;abord, &lt;em&gt;l&amp;#39;option la plus simple est souvent la meilleure&lt;/em&gt;. Plus on va
vite, moins ça coute cher au client. Le meilleur code est l&amp;#39;absence de code,
plus on écrit de code, plus on écrit de PPOF (Potential Point of Failure). En
réduisant la complexité d&amp;#39;une solution, on la rends plus légère et donc plus
facile à comprendre, à apprendre à quelqu&amp;#39;un, à maintenir et à débugguer. Une
solution simple aura moins tendance à casser, et nécessite moins d&amp;#39;overhead du
codeur pour la comprendre. &amp;quot;Le mieux est l&amp;#39;ennemi du bien&amp;quot;, il vaut mieux avoir
quelque chose de &lt;em&gt;good enough&lt;/em&gt; aujourd&amp;#39;hui, que quelque chose de parfait
demain.&lt;/p&gt;

&lt;p&gt;Ensuite, il ne faut pas oublier l&amp;#39;objectif. &lt;em&gt;Le code n&amp;#39;est qu&amp;#39;un outil pour
atteindre cet objectif&lt;/em&gt;. Il est nécessaire de comprendre ce qui coute et ce qui
apporte de la valeur au client, afin de ne pas lui faire perdre d&amp;#39;argent. Pour
cela, il est nécessaire d&amp;#39;aller voir les autres personnes, d&amp;#39;autres métiers qui
travaillent sur le même projet. Le travail d&amp;#39;un intégrateur web n&amp;#39;est pas de
reproduire des PSDs, enfermé dans sa bulle avec son casque sur les oreilles. Il
lui faut aller voir les autres, et faire ce qui est bon pour le produit final.&lt;/p&gt;

&lt;p&gt;Finalement, il ne faut pas être trop attaché à son code. Le code est jetable et
s&amp;#39;il est modulable il est facile d&amp;#39;en jeter un morceau en gardant le reste. Les
demandes du projet vont changer régulièrement, il faut être prêt à accepter le
changement, à jeter du code, à en écrire du nouveau. Dans le même ordre d&amp;#39;idée
il est inutile de prévoir à l&amp;#39;avance tout les cas particuliers, car ils
n&amp;#39;arriveront peut-être jamais, peut-être la fonctionnalité va-t&amp;#39;elle changer en
cours de route.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2014-11-15/bestdev.jpg&quot; alt=&quot;Un bon dev touche à tout&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Keep Calm and Write Sass&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/hugogiraudel&quot;&gt;Hugo Giraudel&lt;/a&gt; nous a ensuite &lt;a href=&quot;http://slides.com/hugogiraudel/keep-calm-and-write-sass&quot;&gt;parlé de
Sass&lt;/a&gt;, avec une liste
de bonnes pratiques et de choses à ne pas faire. Il a aussi abordé un peu le
tooling autour de Sass.&lt;/p&gt;

&lt;p&gt;Sass est un preprocesseur CSS, qui apporte des briques habituellement trouvées
dans les langages de prog : variable, conditions, boucles, fonctions, etc.
&lt;em&gt;C&amp;#39;est assez facile de vouloir en faire trop avec Sass, juste parce qu&amp;#39;on peut
le faire.&lt;/em&gt; Mais ça ne sert à rien, et il faut rester KYSSS (Keep Your Sass
Simple and Straightforward).&lt;/p&gt;

&lt;p&gt;Il ne faut pas oublier que Sass permet de se positionner une couche au dessus
de CSS, et qu&amp;#39;il permet donc d&amp;#39;exposer des méthodes pour générer du CSS. Il
faut que ces méthodes soient peu nombreuses, avec une API publique simple. Ici,
&lt;em&gt;les bonnes pratiques du Clean Code habituelles s&amp;#39;appliquent&lt;/em&gt; : des noms explicites,
des comportements devinables, pas des tas d&amp;#39;arguments différents pour gérer
plusieurs cas de figures différents, etc.&lt;/p&gt;

&lt;p&gt;Sass incite aussi au nesting de sélecteurs à outrance. C&amp;#39;est très facile
à faire en Sass, mais ça donne des feuilles de styles finales avec des
sélecteurs bien trop précis et bien trop difficiles à overrider. Il faut
limiter au maximum le niveau de nesting.&lt;/p&gt;

&lt;p&gt;Finalement, il a évoqué plusieurs outils comme
&lt;a href=&quot;https://github.com/causes/scss-lint&quot;&gt;scss-lint&lt;/a&gt;  qui est un linter de fichiers
Sass, &lt;a href=&quot;https://github.com/SassDoc/sassdoc&quot;&gt;sassdoc&lt;/a&gt;  qui permet de générer une
documentation HTML avec des exemples à partir de fichiers source Sass et enfin
&lt;a href=&quot;https://github.com/ericam/true&quot;&gt;True&lt;/a&gt; qui permet de faire des tests unitaires
sur les retours des fonctions Sass.&lt;/p&gt;

&lt;h2&gt;WTF CSS ?!&lt;/h2&gt;

&lt;p&gt;Et la dernière &lt;a href=&quot;http://estelle.github.io/doyouknowcss/&quot;&gt;conférence&lt;/a&gt; à laquelle
j&amp;#39;ai pu prendre des notes avant que la batterie de mon laptop et les neurones
de mon cerveau ne lachent fut celle d&amp;#39;&lt;a href=&quot;https://twitter.com/estellevw&quot;&gt;Estelle
Weyl&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Estelle nous a montré quelques astuces tout droit tirées des coins les plus
reculés du monde du CSS. Tout d&amp;#39;abord, grâce à &lt;code&gt;counter-increment&lt;/code&gt;, il est
possible de garder un compteur en CSS. Par exemple la page actuelle de sa
présentation était indiquée grâce à ce système, et elle nous a montré comment
afficher le nombre d&amp;#39;erreurs d&amp;#39;un formulaire rien qu&amp;#39;avec du css.&lt;/p&gt;

&lt;p&gt;Elle nous aussi rappellé qu&amp;#39;il existait un grand nombre de pseudo-selecteurs
dans la même veine que &lt;code&gt;:valid&lt;/code&gt; et &lt;code&gt;:invalid&lt;/code&gt; mais qu&amp;#39;ils ne sont pas encore
correctement implémentés partout (notamment &lt;code&gt;:default&lt;/code&gt; et
&lt;code&gt;:placeholder-shown&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;On a ensuite fait un petit rappel des spécificités des sélecteurs (récapitulé
sous forme de poisson sur &lt;a href=&quot;http://specifishity.com/&quot;&gt;Specifishity&lt;/a&gt;), et appris
que les sélecteurs &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;~&lt;/code&gt;  et &lt;code&gt;:not()&lt;/code&gt; n&amp;#39;ont aucune spécificité. Donc
&lt;code&gt;div p&lt;/code&gt; a le même poids que &lt;code&gt;p + p&lt;/code&gt; et &lt;code&gt;img&lt;/code&gt; pèse aussi lourd que &lt;code&gt;:not(img)&lt;/code&gt;.
Il est bon de le rappeller.&lt;/p&gt;

&lt;p&gt;Elle a ensuite parlé de l&amp;#39;horreur absolue qu&amp;#39;est &lt;code&gt;!important&lt;/code&gt; dans du CSS, qui
permet d&amp;#39;overrider toutes les autres règles et qui est lui-même impossible
à overrider. Mais elle a aussi donné une astuce pour réussir à overrider un
&lt;code&gt;!important&lt;/code&gt;... astuce que je ne donnerai pas ici, vous pourriez avoir envie de
l&amp;#39;utiliser ! :)&lt;/p&gt;

&lt;p&gt;Pour finir, elle nous a montré un moyen de faire du browser sniffing
directement depuis le navigateur, pour peu que celui-ci supporte &lt;code&gt;@supports&lt;/code&gt;
(recursive joke inside). En testant des propriétés prefixées &lt;code&gt;-webkit&lt;/code&gt; ou
&lt;code&gt;-moz&lt;/code&gt; on peut comme ça appliquer certaines règles uniquement à un moteur de
rendu ou un autre. Pas sur que ce soit une brillante idée, mais ça peut
dépanner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2014-11-15/theatre.jpg&quot; alt=&quot;Théatre des Variétés&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Fin des talks&lt;/h2&gt;

&lt;p&gt;&lt;iframe 
class=&quot;youtube-player&quot;
type=&quot;text/html&quot; 
width=&quot;640&quot; 
height=&quot;390&quot;
src=&quot;http://www.youtube.com/embed/L8w3v9m6G04&quot;
frameborder=&quot;0&quot;
allowfullscreen
&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;Les trois derniers talks étaient de Nicolas Gallagher qui nous a parlé de
comment ils ont modularisé leur UI chez Twitter, en utilisant des Web
Components. Ce qu&amp;#39;il mettait en avant faisait echo à pas mal de choses dites
précedemment : aligner les developpeurs et les designers sur un langage commun,
masquer la complexité en dessous et laisser une API publique simple et qui
exprime bien l&amp;#39;intention.&lt;/p&gt;

&lt;p&gt;Bert Bos, co-créateur de CSS nous a parlé des challenges que posent les
différents règles de typographie des différents pays du monde pour le CSS.
Différents types de guillemets selon les langues, espaces avant la ponctuation
ou non, italique qui s&amp;#39;applique ou non à la ponctuation, etc. C&amp;#39;était plus une
lettre ouverte pour sensibiliser à ces questions.&lt;/p&gt;

&lt;p&gt;Et finalement Ana Tudor nous a complétement bluffé en nous faisant faire des
&lt;code&gt;cos&lt;/code&gt; et &lt;code&gt;sin&lt;/code&gt; pour dessiner des tracés chromatiques à coup de boucles en Sass.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Toutes ces conférences l&amp;#39;ont très bien rappellé : le langage CSS est riche, et
il est possible de faire des choses formidables avec, mais il est aussi
complexe à comprendre et demande de s&amp;#39;y plonger avec sérieux. Nous devons
mettre en œuvre pour CSS toutes les bonnes pratiques que nous utilisons déjà
pour les autres langages : modularisation, clean code, API publiques, tests
unitaires.&lt;/p&gt;

&lt;p&gt;Cela est d&amp;#39;autant plus important que le CSS est la partie partagée entre les
développeurs et les designers, et celle-ci se doit d&amp;#39;être la plus claire et
robuste possible pour la cohésion du projet au sein des équipes et sa
maintenabilité sur la durée.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/2014-11-15/end.jpg&quot; alt=&quot;Merci à l&amp;#39;équipe&quot;&gt;&lt;/p&gt;

&lt;p&gt;Ce post est cross-posté sur le &lt;a href=&quot;http://blog.octo.com/cr-dotcss-2014/&quot;&gt;blog
Octo&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
