{
  "id": "/2015/01/21/parisjs-42",
  "title": "ParisJS #42",
  "url": "http://meetups.pixelastic.com//2015/01/21/parisjs-42/",
  "tags": [
    "parisjs"
  ],
  "date": 1421794800,
  "html": "<p>Hier soir, meetup <a href=\"http://parisjs.org/\">parisjs</a> chez <a href=\"http://www.intechinfo.fr/\">In&#39;Tech Info</a>, une école d&#39;informatique\ndu coté des Gobelins (dont les locaux semblent être un ancien parking\nréaménagé).  Néanmoins, grande salle, plein de nouveaux venus, ça fait plaisir.</p>\n\n<p>Commençons par le gros point noir du meetup. Celui-ci était censé commencer\nà 19h, mais c&#39;est seulement à 19h45 que les organisateurs commencent à prendre\nla parole pour annoncer le programme. Et présenter parisjs, et montrer le\nnouveau site, et essayer de faire une démo d&#39;édition de markdown en live, et\nfaire son auto-promotion, et donner la parole à tous les sponsors pour qu&#39;ils\nfasse de même, et du coup c&#39;est super long.</p>\n\n<p>C&#39;est le même travers que le meetup <a href=\"http://www.meetup.com/Nodejs-Paris/\">nodejs paris</a> et <a href=\"http://www.meetup.com/parisrb/\">paris.rb</a>. Ça ne\ncommence jamais à l&#39;heure, et même quand ça commence, on doit encore se taper\nles publicités avant le film, comme au cinéma. La prochaine fois, je viendrai\nen retard.</p>\n\n<p>Bon, fini d&#39;être aigri, il y avait une annonce intéressante quand même. NUMA\nvient d&#39;ouvrir un <a href=\"http://cowork.numa.paris/\">espace de coworking</a> de 150m², avec café à volonté,\nouvert 24h/24, à destination des développeurs, et avec un device lab.</p>\n\n<h2>Dev Avengers</h2>\n\n<p>Mais les talks ont ensuite relevé le niveau. <a href=\"https://twitter.com/porteneuve\">Christophe\nPorteneuve</a>, la bible vivante du Javascript, qui appelle tout les\nauteurs des grands frameworks par leurs petits prénoms et qui réfléchit encore\nplus vite qu&#39;il ne parle était le premier sur scène. 37 ans, toutes ses dents,\n19 ans dans le web, ça envoie du lourd.</p>\n\n<p>Il nous a présenté les <a href=\"http://bit.ly/devavengers\">outils de travail intra-browser</a> qui permettent\nd&#39;améliorer la productivité de son workflow de travail. Fini le <code>Ctrl-S</code>,\n<code>Alt-tab</code>, <code>Ctrl-R</code> pour voir les modifications qu&#39;on vient de faire, on est en\n2015 bourdel.</p>\n\n<p>Petite explication de l&#39;utilité des sourcemaps, qui permettent, en ajoutant des\ncommentaires dans un fichier minifié de faire le mapping vers les fichiers\nsources. Chrome les comprends depuis déjà 4 ans, et nous indique donc les\nerreurs dans la console réellement là où elles ont lieu dans les fichiers\nsources. Et encore mieux, elles peuvent faire le lien entre un fichier final et\nn&#39;importe quel type de fichier source, même des preprocesseurs comme Sass, Less\nou Coffescript.</p>\n\n<p>Tout le reste du talk donnait des exemples avec Chrome, car c&#39;est le browser\nqui possède actuellement les meilleurs outils, même si Firefox et IE12 sont pas\nloin derrière.</p>\n\n<p>On sait tous qu&#39;on peut modifier le HTML et le CSS à la volée avec l&#39;inspecteur\nChrome, mais on peut aussi le faire avec du JS. Le soucis c&#39;est que nos modifs\nrestent en live dans la page chargée, mais que c&#39;est un peu plus compliqué pour\nles récupérer dans un vrai fichier sur le disque.</p>\n\n<p>Du coup, la solution c&#39;est les <code>workspaces</code> de Chrome. On lui définit un\ndossier de notre disque dur qui contient nos sources, et une fois qu&#39;on lui\na donné l&#39;autorisation, on peut manuellement lui indiquer les mappings entre\nnotre filesystem et notre network. Du coup, en faisant ainsi et avec les\nsourcemaps, on peut modifier directement un fichier source Sass depuis Chrome.</p>\n\n<p>Bon, sauf que dans ce cas là, on perds la preview instantanée de nos modifs\ndans le browser, parce que Chrome n&#39;a aucune idée de comment parser du Sass.\nMais c&#39;est là que notre outil de build en mode <code>watch</code> peut venir nous aider.\nGrunt, Gulp et Brunch proposent tous un moyen d&#39;écouter les modifications du\nfilesystem pour lancer des taches en fonction des fichiers modifiés.</p>\n\n<p>Il nous a ensuite parlé de <a href=\"https://github.com/facebook/fb-flo\">fb-flo</a>, un outil de Facebook qui permet de lier\nun fichier actuellement chargé par Chrome (CSS ou JS) à un buffer ouvert dans\nson IDE, et de reporter automatiquement les modifs de l&#39;un vers l&#39;autre, sans\navoir besoin de recharger la page.</p>\n\n<p>Dernier outil pour gagner du temps en test crossbrowser, c&#39;est <a href=\"http://www.browsersync.io/\">BrowserSync</a>.\nOn ouvre autant de pages qu&#39;on le souhaite sur différents browsers, desktop et\nmobile, et toute modification sur l&#39;un (scroll, typing dans un formulaire, etc)\nest répercutée instantanément dans les autres. L&#39;avantage est que pour les\nclics, il rejoue le même selecteur unique sur chaque device plutot que de\ncliquer à des coordonnées précises.</p>\n\n<p>Du coup, si on récapitule :</p>\n\n<ul>\n<li>Sourcemaps pour avoir la liaison entre un fichier minifié et les sources des\npreprocesseurs</li>\n<li>Workspaces pour faire le mapping entre un fichier du disque dur et un fichier\nchargé par Chrome (marche avec les sourcemaps). <em>Je modifie dans Chrome, ça\nchange sur mon disque</em>.</li>\n<li>fb-flo pour faire du livereload du browser dès qu&#39;un fichier du disque\nchange. <em>Je modifie sur mon disque, ça recharge dans Chrome</em>.</li>\n<li>BrowserSync pour tester sur plusieurs devices/browsers en parallèle.</li>\n</ul>\n\n<p>On a discuté ensuite autour d&#39;une bière et d&#39;une pizza où il m&#39;a convaincu\nd&#39;essayer <code>Stylus</code>. Syntaxe &quot;clean&quot;, à la <code>ruby</code>, <code>jade</code> ou <code>coffeescript</code>. Je\nne suis pas fan de cette épuration habituellement, mais j&#39;avoue n&#39;avoir jamais\nréellement essayé. Par contre le fait de pouvoir redéfinir les propriétés de\nbase CSS (du genre, dès que je mets telle propriété avec telle valeur, alors ça\nmets automatiquement telle autre). Et aussi, les variables des <code>mixins</code> sont\nscopées, ce qui est le truc qui m&#39;ennuie le plus avec Sass.</p>\n\n<p>Dans le même genre, il m&#39;a vendu <code>brunch</code> comme étant un grunt-like à base de\n<em>convention over configuration</em> (ce qui est tout le contraire de Grunt et de\nson <em>configuration over configuration over configuration</em>...). Du coup, faut\nvraiment que je teste.</p>\n\n<p>Et il a même dit du bien de <code>famous</code> (un peu moins d&#39;<code>angular</code>, forcément).</p>\n\n<h2>IONIC</h2>\n\n<p><a href=\"https://twitter.com/cedriclombardot\">Cédric Lombardot</a> nous parle de Ionic\nFramework.</p>\n\n<p>Alors, <a href=\"http://ionicframework.com/\">Ionic</a> c&#39;est un framework qui combine\n<a href=\"https://angularjs.org/\">Angular</a> et <a href=\"http://cordova.apache.org/\">Cordova</a> pour\ndévelopper des applications hybrides. </p>\n\n<p>Cédric commence par nous expliquer les avantages et inconvénients de faire de\nl&#39;hybride. Le gros avantage de l&#39;hybride c&#39;est que c&#39;est le même code pour\ntoutes les plateformes, ce qui évite de devoir faire deux applications, pour\nAndroid et iPhone, qui coutent deux fois plus cher.</p>\n\n<p>Par contre, mieux vaut éviter l&#39;hybride si on a besoin de perfs au top, parce\nqu&#39;une surcouche sera toujours plus lente que du natif. Ce qui inclue tous les\nsuper effets d&#39;animation mouf-mouf. Si on a besoin de certaines API très liées\nau device, Cordova ne nous y donnera pas forcément accès. Et finalement, si on\nn&#39;a besoin de développer que pour une unique plateforme, autant partir sur du\nnatif.</p>\n\n<p>Dans les deux cas, pour pouvoir passer son app sur iPhone, il faudra passer par\nles 15 jours de validation Apple. Il n&#39;y a rien dans les CGU d&#39;Apple qui bloque\nl&#39;hybride plus que le natif.</p>\n\n<p>Maintenant, parlons de ce qu&#39;apporte Ionic. Déjà, il utilise Cordova, qui est\nle moteur open-source utilisé par Phonegap. Il gère aussi parfaitement les\naffichages d&#39;élements dans une page, même quand on fait apparaitre/disparaitre\nle clavier (source de bugs divers).</p>\n\n<p>Avec Ionic, on fait une application, pas un site web. On passe sur un paradigme\noù on réfléchit en terme de &quot;vues&quot; (écrans), et on doit alors penser à comment\nceux-ci s&#39;emboitent, quel est le comportement du bouton back, etc.</p>\n\n<p>Ionic est fourni avec des directives (Angular oblige) pour la majorité des\néléments de UI classiques d&#39;une app : header, footer, listes avec\npull-to-refresh, swipe sur item pour avoir un menu, drag&#39;n&#39;drop, popup de choix\nd&#39;action, slideshow, etc</p>\n\n<p>Ça s&#39;installe classiquement à base de <code>npm</code> et génère un code boilerplate avec\nune petite appli pour comprendre comment les différents éléments interagissent.\nSi vous voulez vraiment aller vite, il existe même le <a href=\"http://ionicframework.com/creator/\">Ionic\nCreator</a> pour générer sa UI à base de\ndrag&#39;n&#39;drop.</p>\n\n<p>Ça pêche encore du coté Android quand le browser par défaut est le stockbrowser,\nqui a des perfs bien moins bonne que Chrome. Il y a des solutions en cours de\ndéveloppement pour contrer ça. Il n&#39;est pas non plus compatible sous Windows\nPhone pour le moment.</p>\n\n<p>Coté UI, Ionic vient avec son propre style. Il y a des essais pour reproduire\nun style natif Android ou iPhone, mais c&#39;est pas encore au point et jQuery\nmobile est plus avancé de ce coté là apparemment. Par contre, on a quand même\nle droit à une classe CSS sur le root indiquant si on est sous Android ou sous\nIOS pour tweaker notre app en fonction.</p>\n\n<h2>VIRTJS</h2>\n\n<p><a href=\"https://github.com/arcanis\">Maël Nison</a> est venu nous parler un peu plus de\nIonic, qu&#39;il a utilisé sur un projet perso nommé <a href=\"http://m.start9.io/\">Start9</a>.</p>\n\n<p>Maël avait <a href=\"http://arcanis.github.io/presentation.parisjs-20140625/#/step-1\">déjà\nprésenté</a> un\némulateur gameboy qu&#39;il avait développé en javascript. Il a cette fois-ci\npoussé le concept un peu plus loin en proposant un site web en Ionic,\naccessible donc depuis n&#39;importe quel browser, sur lequel on puisse uploader\nses roms Gameboy et y jouer directement dans le navigateur.  L&#39;avantage est\nd&#39;avoir un système crossplatform, on peut commencer sa partie sur son téléphone\ndans le métro et la continuer au même endroit sur son desktop plus tard.</p>\n\n<p>Le gros avantage est que c&#39;est un simple site web. Pas besoin d&#39;installer\nquoique ce soit pour l&#39;utilisateur, et pas besoin de passer par la validation\nappStore pour le créateur.</p>\n\n<p>Coté techno, c&#39;est du node en backend, avec du\n<a href=\"http://sequelizejs.com/\">sequelize</a> (ORM pour taper sur PostgreSQL et SQLite).\n<a href=\"https://github.com/systemjs/systemjs\">Systemjs</a> et\n<a href=\"https://github.com/google/traceur-compiler\">Traceur</a> pour ses modules ES6\ntransformés en ES5. Comme ça, le jour où ES6 est partout, on peut enlever la\ntransformation. Et sinon, du Ionic pour le front.</p>\n\n<p>Pour la suite ils envisagent de supporter de plus en plus de jeux, et de plus\nen plus de consoles. Ils passeront aussi à Angular 2 quand il sortira (pour\nrester sur une stack ES6). Leur retour sur Ionic c&#39;est que c&#39;est cool mais\nencore jeune, les issues sont fixées rapidement (si les mainteners sont pas en\nvacances...).</p>\n\n<h2>Conclusion</h2>\n\n<p>Une bonne soirée ParisJS, avec 3 talks très intéressant, une grande salle, de\nla pizza pour tout le monde et des discussions intéressantes autour d&#39;une\nbière.</p>\n",
  "markdown": "Hier soir, meetup [parisjs][] chez [In'Tech Info][intech], une école d'informatique\r\ndu coté des Gobelins (dont les locaux semblent être un ancien parking\r\nréaménagé).  Néanmoins, grande salle, plein de nouveaux venus, ça fait plaisir.\r\n\r\nCommençons par le gros point noir du meetup. Celui-ci était censé commencer\r\nà 19h, mais c'est seulement à 19h45 que les organisateurs commencent à prendre\r\nla parole pour annoncer le programme. Et présenter parisjs, et montrer le\r\nnouveau site, et essayer de faire une démo d'édition de markdown en live, et\r\nfaire son auto-promotion, et donner la parole à tous les sponsors pour qu'ils\r\nfasse de même, et du coup c'est super long.\r\n\r\nC'est le même travers que le meetup [nodejs paris][] et [paris.rb][]. Ça ne\r\ncommence jamais à l'heure, et même quand ça commence, on doit encore se taper\r\nles publicités avant le film, comme au cinéma. La prochaine fois, je viendrai\r\nen retard.\r\n\r\nBon, fini d'être aigri, il y avait une annonce intéressante quand même. NUMA\r\nvient d'ouvrir un [espace de coworking][numa] de 150m², avec café à volonté,\r\nouvert 24h/24, à destination des développeurs, et avec un device lab.\r\n\r\n[parisjs]: http://parisjs.org/\r\n[intech]: http://www.intechinfo.fr/\r\n[nodejs paris]: http://www.meetup.com/Nodejs-Paris/\r\n[paris.rb]: http://www.meetup.com/parisrb/\r\n[numa]: http://cowork.numa.paris/\r\n\r\n## Dev Avengers\r\n\r\nMais les talks ont ensuite relevé le niveau. [Christophe\r\nPorteneuve][@porteneuve], la bible vivante du Javascript, qui appelle tout les\r\nauteurs des grands frameworks par leurs petits prénoms et qui réfléchit encore\r\nplus vite qu'il ne parle était le premier sur scène. 37 ans, toutes ses dents,\r\n19 ans dans le web, ça envoie du lourd.\r\n\r\nIl nous a présenté les [outils de travail intra-browser][devavengers] qui permettent\r\nd'améliorer la productivité de son workflow de travail. Fini le `Ctrl-S`,\r\n`Alt-tab`, `Ctrl-R` pour voir les modifications qu'on vient de faire, on est en\r\n2015 bourdel.\r\n\r\nPetite explication de l'utilité des sourcemaps, qui permettent, en ajoutant des\r\ncommentaires dans un fichier minifié de faire le mapping vers les fichiers\r\nsources. Chrome les comprends depuis déjà 4 ans, et nous indique donc les\r\nerreurs dans la console réellement là où elles ont lieu dans les fichiers\r\nsources. Et encore mieux, elles peuvent faire le lien entre un fichier final et\r\nn'importe quel type de fichier source, même des preprocesseurs comme Sass, Less\r\nou Coffescript.\r\n\r\nTout le reste du talk donnait des exemples avec Chrome, car c'est le browser\r\nqui possède actuellement les meilleurs outils, même si Firefox et IE12 sont pas\r\nloin derrière.\r\n\r\nOn sait tous qu'on peut modifier le HTML et le CSS à la volée avec l'inspecteur\r\nChrome, mais on peut aussi le faire avec du JS. Le soucis c'est que nos modifs\r\nrestent en live dans la page chargée, mais que c'est un peu plus compliqué pour\r\nles récupérer dans un vrai fichier sur le disque.\r\n\r\nDu coup, la solution c'est les `workspaces` de Chrome. On lui définit un\r\ndossier de notre disque dur qui contient nos sources, et une fois qu'on lui\r\na donné l'autorisation, on peut manuellement lui indiquer les mappings entre\r\nnotre filesystem et notre network. Du coup, en faisant ainsi et avec les\r\nsourcemaps, on peut modifier directement un fichier source Sass depuis Chrome.\r\n\r\nBon, sauf que dans ce cas là, on perds la preview instantanée de nos modifs\r\ndans le browser, parce que Chrome n'a aucune idée de comment parser du Sass.\r\nMais c'est là que notre outil de build en mode `watch` peut venir nous aider.\r\nGrunt, Gulp et Brunch proposent tous un moyen d'écouter les modifications du\r\nfilesystem pour lancer des taches en fonction des fichiers modifiés.\r\n\r\nIl nous a ensuite parlé de [fb-flo][], un outil de Facebook qui permet de lier\r\nun fichier actuellement chargé par Chrome (CSS ou JS) à un buffer ouvert dans\r\nson IDE, et de reporter automatiquement les modifs de l'un vers l'autre, sans\r\navoir besoin de recharger la page.\r\n\r\nDernier outil pour gagner du temps en test crossbrowser, c'est [BrowserSync][].\r\nOn ouvre autant de pages qu'on le souhaite sur différents browsers, desktop et\r\nmobile, et toute modification sur l'un (scroll, typing dans un formulaire, etc)\r\nest répercutée instantanément dans les autres. L'avantage est que pour les\r\nclics, il rejoue le même selecteur unique sur chaque device plutot que de\r\ncliquer à des coordonnées précises.\r\n\r\nDu coup, si on récapitule :\r\n\r\n- Sourcemaps pour avoir la liaison entre un fichier minifié et les sources des\r\n  preprocesseurs\r\n- Workspaces pour faire le mapping entre un fichier du disque dur et un fichier\r\n  chargé par Chrome (marche avec les sourcemaps). _Je modifie dans Chrome, ça\r\n  change sur mon disque_.\r\n- fb-flo pour faire du livereload du browser dès qu'un fichier du disque\r\n  change. _Je modifie sur mon disque, ça recharge dans Chrome_.\r\n- BrowserSync pour tester sur plusieurs devices/browsers en parallèle.\r\n\r\nOn a discuté ensuite autour d'une bière et d'une pizza où il m'a convaincu\r\nd'essayer `Stylus`. Syntaxe \"clean\", à la `ruby`, `jade` ou `coffeescript`. Je\r\nne suis pas fan de cette épuration habituellement, mais j'avoue n'avoir jamais\r\nréellement essayé. Par contre le fait de pouvoir redéfinir les propriétés de\r\nbase CSS (du genre, dès que je mets telle propriété avec telle valeur, alors ça\r\nmets automatiquement telle autre). Et aussi, les variables des `mixins` sont\r\nscopées, ce qui est le truc qui m'ennuie le plus avec Sass.\r\n\r\nDans le même genre, il m'a vendu `brunch` comme étant un grunt-like à base de\r\n_convention over configuration_ (ce qui est tout le contraire de Grunt et de\r\nson _configuration over configuration over configuration_...). Du coup, faut\r\nvraiment que je teste.\r\n\r\nEt il a même dit du bien de `famous` (un peu moins d'`angular`, forcément).\r\n\r\n## IONIC\r\n\r\n[Cédric Lombardot](https://twitter.com/cedriclombardot) nous parle de Ionic\r\nFramework.\r\n\r\nAlors, [Ionic](http://ionicframework.com/) c'est un framework qui combine\r\n[Angular](https://angularjs.org/) et [Cordova](http://cordova.apache.org/) pour\r\ndévelopper des applications hybrides. \r\n\r\nCédric commence par nous expliquer les avantages et inconvénients de faire de\r\nl'hybride. Le gros avantage de l'hybride c'est que c'est le même code pour\r\ntoutes les plateformes, ce qui évite de devoir faire deux applications, pour\r\nAndroid et iPhone, qui coutent deux fois plus cher.\r\n\r\nPar contre, mieux vaut éviter l'hybride si on a besoin de perfs au top, parce\r\nqu'une surcouche sera toujours plus lente que du natif. Ce qui inclue tous les\r\nsuper effets d'animation mouf-mouf. Si on a besoin de certaines API très liées\r\nau device, Cordova ne nous y donnera pas forcément accès. Et finalement, si on\r\nn'a besoin de développer que pour une unique plateforme, autant partir sur du\r\nnatif.\r\n\r\nDans les deux cas, pour pouvoir passer son app sur iPhone, il faudra passer par\r\nles 15 jours de validation Apple. Il n'y a rien dans les CGU d'Apple qui bloque\r\nl'hybride plus que le natif.\r\n\r\nMaintenant, parlons de ce qu'apporte Ionic. Déjà, il utilise Cordova, qui est\r\nle moteur open-source utilisé par Phonegap. Il gère aussi parfaitement les\r\naffichages d'élements dans une page, même quand on fait apparaitre/disparaitre\r\nle clavier (source de bugs divers).\r\n\r\nAvec Ionic, on fait une application, pas un site web. On passe sur un paradigme\r\noù on réfléchit en terme de \"vues\" (écrans), et on doit alors penser à comment\r\nceux-ci s'emboitent, quel est le comportement du bouton back, etc.\r\n\r\nIonic est fourni avec des directives (Angular oblige) pour la majorité des\r\néléments de UI classiques d'une app : header, footer, listes avec\r\npull-to-refresh, swipe sur item pour avoir un menu, drag'n'drop, popup de choix\r\nd'action, slideshow, etc\r\n\r\nÇa s'installe classiquement à base de `npm` et génère un code boilerplate avec\r\nune petite appli pour comprendre comment les différents éléments interagissent.\r\nSi vous voulez vraiment aller vite, il existe même le [Ionic\r\nCreator](http://ionicframework.com/creator/) pour générer sa UI à base de\r\ndrag'n'drop.\r\n\r\nÇa pêche encore du coté Android quand le browser par défaut est le stockbrowser,\r\nqui a des perfs bien moins bonne que Chrome. Il y a des solutions en cours de\r\ndéveloppement pour contrer ça. Il n'est pas non plus compatible sous Windows\r\nPhone pour le moment.\r\n\r\nCoté UI, Ionic vient avec son propre style. Il y a des essais pour reproduire\r\nun style natif Android ou iPhone, mais c'est pas encore au point et jQuery\r\nmobile est plus avancé de ce coté là apparemment. Par contre, on a quand même\r\nle droit à une classe CSS sur le root indiquant si on est sous Android ou sous\r\nIOS pour tweaker notre app en fonction.\r\n\r\n## VIRTJS\r\n\r\n[Maël Nison](https://github.com/arcanis) est venu nous parler un peu plus de\r\nIonic, qu'il a utilisé sur un projet perso nommé [Start9](http://m.start9.io/).\r\n\r\nMaël avait [déjà\r\nprésenté](http://arcanis.github.io/presentation.parisjs-20140625/#/step-1) un\r\némulateur gameboy qu'il avait développé en javascript. Il a cette fois-ci\r\npoussé le concept un peu plus loin en proposant un site web en Ionic,\r\naccessible donc depuis n'importe quel browser, sur lequel on puisse uploader\r\nses roms Gameboy et y jouer directement dans le navigateur.  L'avantage est\r\nd'avoir un système crossplatform, on peut commencer sa partie sur son téléphone\r\ndans le métro et la continuer au même endroit sur son desktop plus tard.\r\n\r\nLe gros avantage est que c'est un simple site web. Pas besoin d'installer\r\nquoique ce soit pour l'utilisateur, et pas besoin de passer par la validation\r\nappStore pour le créateur.\r\n\r\nCoté techno, c'est du node en backend, avec du\r\n[sequelize](http://sequelizejs.com/) (ORM pour taper sur PostgreSQL et SQLite).\r\n[Systemjs](https://github.com/systemjs/systemjs) et\r\n[Traceur](https://github.com/google/traceur-compiler) pour ses modules ES6\r\ntransformés en ES5. Comme ça, le jour où ES6 est partout, on peut enlever la\r\ntransformation. Et sinon, du Ionic pour le front.\r\n\r\nPour la suite ils envisagent de supporter de plus en plus de jeux, et de plus\r\nen plus de consoles. Ils passeront aussi à Angular 2 quand il sortira (pour\r\nrester sur une stack ES6). Leur retour sur Ionic c'est que c'est cool mais\r\nencore jeune, les issues sont fixées rapidement (si les mainteners sont pas en\r\nvacances...).\r\n\r\n## Conclusion\r\n\r\nUne bonne soirée ParisJS, avec 3 talks très intéressant, une grande salle, de\r\nla pizza pour tout le monde et des discussions intéressantes autour d'une\r\nbière.\r\n\r\n[@porteneuve]: https://twitter.com/porteneuve\r\n[devavengers]: http://bit.ly/devavengers  \r\n[fb-flo]: https://github.com/facebook/fb-flo\r\n[BrowserSync]: http://www.browsersync.io/\r\n"
}