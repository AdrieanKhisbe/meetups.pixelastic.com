{
  "id": "/2015/01/29/ngparis-17",
  "title": "ngParis #17",
  "url": "http://meetups.pixelastic.com//2015/01/29/ngparis-17/",
  "tags": [
    "ngparis"
  ],
  "date": 1422486000,
  "html": "<p><a href=\"http://www.meetup.com/AngularJS-Paris/events/219615752/\">Meetup angular</a>,\norganisé par <a href=\"http://www.leboncoin.fr/\">le bon coin</a>. J&#39;avais un peu arreté d&#39;aller aux\nmeetups angular (trop peu de contenu), mais là le programme annonçait un REX\nsur comment mélanger <a href=\"http://facebook.github.io/react/\">React</a> et <a href=\"https://angularjs.org/\">Angular</a>, du coup, j&#39;étais\ncurieux.</p>\n\n<p>Le bon coin, derrière leurs airs de sites des années 80 mis en ligne dans un\ngarage possède en fait de formidables bureaux en plein Paris. Le premier site\ndate de 2006 et est Norvégien, puis la France a été la première filiale en\n2007 avant que le système ne s&#39;implante dans plus de 35 pays.</p>\n\n<p>La technologie sous-jacente est un moteur custom codé en C nommé <a href=\"http://www.blocket.se/\">blocket</a> et\nréutilisé par toutes les filliales (qui peuvent donc faire des mises à jour de\nleur moteur facilement) avec quelques petites différences culturelles pour\nchaque pays.</p>\n\n<p>D&#39;un seul dev au départ, ils sont maintenant 250 dans la boite avec un objectif\nà 350 pour la fin de l&#39;année. Le bon coin, c&#39;est des chiffres de consultations\nextraordinaires. 90 millions de pages vues par mois, essentiellement des\nrésultats de recherche, donc sans possibilité de mise en cache.</p>\n\n<p>Ils parviennent quand même à un <code>startRender</code> moyen de 0.7s. 6e site le plus\nvisité de France, 700.000 nouvelles annonces chaque jour, 2 datacenters de 400\nserveurs. En terme de charge, c&#39;est du très lourd, leur conso normale\ncorrespondant aux pics de charge de ce qu&#39;on connait habituellement.</p>\n\n<p>Au dela du cœur de l&#39;appli, il y a toutes les applications de gestion\n(modération, monitoring, etc) qui sont développés dans des tas de langages\ndifférents. Il y en a pour tous les gouts : PostgreSQL, Python, Ruby, Go,\nShell, PHP, des apps natives, du big data, de l&#39;hadoop, du capybara.</p>\n\n<p>Ah, et la question qu&#39;on se pose tous. Non, le compte\n<a href=\"https://twitter.com/TopBonCoin\">@TopBonCoin</a> n&#39;est pas officiel, le bon coin\nne faisant actuellement aucune publicité ou community management.</p>\n\n<p>Bon, assez parlé de l&#39;hôte, place aux talks.</p>\n\n<h2>React et Angular</h2>\n\n<p>Julien Bouquillon, alias <a href=\"https://twitter.com/revolunet\">@revolunet</a> viens nous\nfaire un retour d&#39;expérience sur l&#39;intégration de React dans Angular. Il\na entendu beaucoup de bien de React et a voulu voir si ça se plugguait\nfacilement.</p>\n\n<p>Ça fait deux ans qu&#39;il fait de l&#39;Angular, sur du mobile et sur du desktop et le\nproblème récurrent pour lui, ce sont les perfs. Essentiellement sur mobile\nd&#39;ailleurs. Les problèmes de perf sont les mêmes sur les deux plateformes, mais\nles desktop étant plus puissants, il faut vraiment de grosses apps pour\nressentir les ralentissement.</p>\n\n<p>Vu que React mets en avant sa rapidité, il a décidé de troquer les directives\nd&#39;Angular par des composants React pour voir la différence. Pour lui le reste\nd&#39;Angular est très bon. On gagne en productivité et en réusabilité, le\nframework fournit plein de choses de base et tout ça se teste facilement.\nGlobalement, super framework... sauf pour les perfs.</p>\n\n<h3>What&#39;s wrong with Angular ?</h3>\n\n<p>Parce que le gros problème d&#39;Angular se trouve dans le data-binding, bête et\nméchant. C&#39;est le coté magique qui nous attire au début dans le framework, mais\nc&#39;est aussi le goulot de performances. Quand on inclue une variable dans un\ntemplate pour qu&#39;elle soit bindée, l&#39;algo simpliste d&#39;Angular va simplement\nré-évaluer chaque variable à chaque événement de l&#39;utilisateur. C&#39;est à dire au\nclic, au scroll, au touch, au keypress. Voire même sur des events qui ne\nviennent pas du user, comme le retour d&#39;une requete HTTP.</p>\n\n<p>Et ce, même si les éléments en questions sont en dehors du viewport, ou qu&#39;ils\nn&#39;ont aucun rapport avec l&#39;élément actuellement modifié. Bête et méchant on\nvous dit.</p>\n\n<p>Bon, sur une appli desktop, on voit pas trop le problème, ça va super vite.\nMais sur mobile, on peut commencer à percevoir la lenteur, voir à la subir.\nÀ chaque interaction, la totalité du DOM est réevalué, c&#39;est pas rien. C&#39;est\nvraiment du <em>dirty</em> checking.</p>\n\n<p>Si on veut fournir un expérience smooth, il nous faut viser du 60 fps, ce qui\ncorresponds à 16ms pour un refresh. 16ms pour un refresh de tout le DOM, c&#39;est\npas énorme.</p>\n\n<p>Malheureusement, Angular ne nous donne pas beaucoup de points d&#39;actions pour\npouvoir influencer ou améliorer ce rendering, le processus fait plus ou moins\npartie intégrante du core du méchanisme.</p>\n\n<p>La version 1.3 a fait de grosses améliorations à ce sujet, d&#39;au moins 50% de\ngain. Elle introduit aussi le principe des <code>bind-once</code>, et des filters\nstateful, qui peuvent n&#39;être executés qu&#39;une seule fois pour chaque valeur\npassée. On peut aussi éviter de mettre des méthodes à évaluer dans les\ntemplates mais simplement des variables, utiliser la syntax <code>track by</code> des\n<code>ng-repeat</code> et toujours essayer de mettre ses event handler sur les éléments\nles plus hauts.</p>\n\n<p>Malheureusement, il reste le cas des keypress. Si j&#39;ai un input, la totalité de\nmon DOM est réévalué pour chaque touche que va taper mon utilisateur.</p>\n\n<h3>Et React ?</h3>\n\n<p>React de son coté fonctionne avec un système intermédiaire entre ses data et le\nDOM, il y intercale un concept qui lui est propre : le virtual DOM. Les\nmodifications de data influent directement sur le vDOM (qui n&#39;est pas rendu\ndirectement), et seulement le diff entre le DOM actuel et le vDOM sont reportés\ndans le DOM. Ça marche très bien, et du coup seul ce qui a changé est modifié.</p>\n\n<p>React intègre aussi par défaut un système d&#39;event delegation intelligent.\nPlutôt que d&#39;ajouter des handler sur plusieurs éléments, il ajoute un handler\ngénéral sur la page et renvoie l&#39;event au bon élément cliqué. On arrete comme\nça de dupliquer les handlers.</p>\n\n<p>Et surtout, React est explicite. Plus de magie. Chaque composant possède sa\nméthode <code>render</code> qui va retourner du HTML. On peut comme ça tester unitairement\nle rendu, mais surtout chaque composant est isolé et ses données ne fuitent\nplus vers l&#39;extérieur. Seul le contenu du composant est modifié, sans que cela\nn&#39;induise un rechargement de la totalité du DOM de la page.</p>\n\n<p>Sans compter que React s&#39;intègre parfaitement dans l&#39;écosystem npm et\nbrowserify.</p>\n\n<h3>Benchmarks</h3>\n\n<p>Il nous a fait une démo d&#39;un même composant codé une fois en Angular et une\nfois en React pour voir la différence de perfs. C&#39;était un tableau de 100\néléments et de 5-6 colonnes. En cochant la première colonne de chaque\nligne, on pouvait &quot;barrer&quot; l&#39;élément.</p>\n\n<p>En React comme en Angular, le chargement initial du composant prends environ\nautant de temps. Pas de gain à attendre de ce coté là. Par contre, si on coche\nune ligne du tableau Angular, les 1000 éléments sont ré-évalués alors que si on\ncoche celle de React, seule la ligne cliquée est modifiée.</p>\n\n<p>Là où c&#39;est pire, c&#39;est qu&#39;en ajoutant un champ d&#39;input au dessus du tableau\nAngular, chaque <code>keypress</code> ré-évaluait la totalité du tableau. Et pire que\ntout, on a ajouté un bouton qui ne faisait rien (pas de <code>ng-click</code>, rien). Et\nbien cliquer dessus rechargeait encore tout le DOM Angular.</p>\n\n<p>Je crois que toute la beauté de React peut se résumer dans la phrase suivante\nde Julien :</p>\n\n<blockquote>\n<p>En React, un bouton qui ne fait rien, ne fait rien.</p>\n</blockquote>\n\n<h3>Bon, et mon React il va rentrer dans mon Angular ?</h3>\n\n<p>Oui. Il est tout à fait possible de mettre un composant React au beau milieu\nd&#39;une appli Angular. Il va vivre sa vie en isolation, sans générer de reflow\nAngular, et sans se modifier quand Angular se modifie.</p>\n\n<p>Par contre si on veut l&#39;introduire dans notre cycle Angular normal, il faut le\nwrapper lui-même dans une directive. Par contre, à partir du code de la\ndirective, on entre dans un mode <em>explicit &gt; implicit</em> où on va définir des\ncallbacks à notre composant qu&#39;il sera chargé d&#39;appeller quand il voudra\ncommuniquer son état vers l&#39;extérieur, et on ajoutera aussi des méthodes au\ncomposant pour pouvoir lui passer de nouvelles data depuis Angular.</p>\n\n<p>C&#39;est un peu plus de plomberie, mais on est alors certain qu&#39;il ne se mettra\npas à jour sans raison, et il pourra agir en isolation complète.</p>\n\n<p>Il existe un projet, <a href=\"https://github.com/davidchang/ngReact\">ngReact</a> qui\ndéfini justement ce type de directive, mais ils vont trop loin et ajoutent des\nwatchers automatiques pour passer les infos d&#39;Angular vers React et vice-versa,\nce qui nous fait revenir au problème de dirty checking du départ.</p>\n\n<h3>Conclusion</h3>\n\n<p>React peut s&#39;intégrer correctement dans Angular et vivre sa vie correctement en\nprofitant de manière isolée de ses avantages. La plomberie reste un peu\nmanuelle, mais permet une belle isolation. Néanmoins, la philosophie de l&#39;un et\nde l&#39;autre étant tellement différentes, je ne suis pas sur qu&#39;on tire vraiment\nle meilleur des deux mondes.</p>\n\n<h2>KillrChat</h2>\n\n<p><a href=\"https://twitter.com/doanduyhai\">Duy Hai Doan</a>, tech évangéliste chez\n<a href=\"http://www.datastax.com/\">Datastax</a> nous a <a href=\"http://www.slideshare.net/doanduyhai/introduction-to-killrchat\">parlé d&#39;un pet\nproject</a> de\nchat à base d&#39;Angular, <a href=\"http://projects.spring.io/spring-boot/\">Spring Boot</a> et\n<a href=\"http://cassandra.apache.org/\">Cassandra</a>. C&#39;est cool, il est payé pour faire\ndes meetups et présenter Cassandra, du coup avec trois technos cools comme ça\nil peut réutiliser le même talk :)</p>\n\n<p>L&#39;idée de faire une appli de chat vient de sa frustration de faire des ateliers\npour faire découvrir Cassandra et que les élèves ne repartent qu&#39;avec un énième\n&quot;Hello World&quot; qui ne sert pas à grand chose. Là, il a une vraie appli qui\ntouche à toutes les couches.</p>\n\n<p>Et surtout, elle peut profiter des possibilités de scaling de Cassandra. En\ngros, quand le nombre de user se mets à grossir, il suffit d&#39;augmenter le\nnombre de nœuds sur lesquels les données sont stockées dans Cassandra.\nCassandra s&#39;occupe de répartir les nouvelles données uniformément sur chaque\nnœud de manière à ce qu&#39;aucun ne soit particulièrement submergé. Pour plus\nd&#39;infos sur le fonctionne de Cassandra, je vous invite à relire <a href=\"http://meetups.pixelastic.com/2014/10/15/nodejs-chapitre-2-conference-2/\">mon\ncompte-rendu</a>\ndu meetup nodejs paris.</p>\n\n<p>Le chat qu&#39;il a développé communique avec le back-end Spring Boot en websocket,\navec <a href=\"https://github.com/sockjs\">SockJS</a>. Entre les deux, il suffit de mettre\nun broker qui sait scaler (<a href=\"http://www.rabbitmq.com/\">RabbitMQ</a>,\n<a href=\"http://zeromq.org/\">ZeroMQ</a>, <a href=\"http://kafka.apache.org/\">Kafka</a>) qui implémente\nun simple système de <a href=\"http://fr.wikipedia.org/wiki/PubSub\">pub/sub</a> et front et\nback peuvent communiquer sans soucis, même avec une forte charge.</p>\n\n<h3>Et Angular dans tout ça ?</h3>\n\n<p>Duy Hai vient surtout du monde Java, le front c&#39;est pas forcément son domaine.\nMais il a kiffé Angular, il s&#39;y est bien retrouvé. Il a aussi apprécié le\nfait qu&#39;il y ait des outils pour <a href=\"http://angular-ui.github.io/bootstrap/\">se plugguer facilement avec\nBootstrap</a> (car\ncomme il le dit lui-même, si on lui laisse le design d&#39;un site ça sera\nhorrible, avec bootstrap au moins c&#39;est pas trop moche).</p>\n\n<p>Il a quand même très rapidement implémenté des tas de bonnes pratiques en\nAngular (je ne sais pas si ce sont des bonnes pratiques issues de Java ou non).\nPar exemple, toute sa logique est distribuéed dans des services stateless, ses\ncontrollers se chargeant simplement d&#39;un rôle de passe-plat.</p>\n\n<p>Par contre, comme beaucoup, il s&#39;est fait avoir par les\n<a href=\"https://docs.angularjs.org/api/ngResource/service/$resource\">$resources</a>.\nDéjà, selon qu&#39;on utilise les ressources avec des méthodes d&#39;instances ou des\nméthodes de classe, ce n&#39;est pas la même type d&#39;objet qui est retourné et le\nchaining des promises en devient d&#39;autant plus complexe (sans parler des\npromises angular qui ont leurs propres quirks).</p>\n\n<p>Ce qu&#39;il regrette dans Angular c&#39;est qu&#39;il faille une bonne connaissance de\nJavascript pour comprendre réellement ce qu&#39;il se passe sous le capot.\nHeureusement pour lui, il a découvert\n<a href=\"https://github.com/Zenika/angular-from-scratch\">angular-from-scratch</a> qui se\npropose de recoder les mécaniques principales d&#39;Angular depuis rien pour bien\nassimiler petit à petit chacun des concepts.</p>\n\n<p>Globalement une présentation assez chouette, un REX avec des technos sympas.</p>\n\n<h2>Typescript</h2>\n\n<p>Pour finir, <a href=\"https://twitter.com/paulsouche\">Paul Souche</a>, de\n<a href=\"http://www.sfeir.com/\">Sfeir</a> nous parle de\n<a href=\"http://www.typescriptlang.org/\">Typescript</a>.</p>\n\n<p>Bon, je vais la faire assez vite pour le coup. Typescript est une surcouche\nà Javascript, un peu comme <a href=\"http://coffeescript.org/\">Coffeescript</a>, qui\ncompile en Javascript. Le truc qu&#39;apporte Typescript, c&#39;est un typage fort des\nvariables.</p>\n\n<p>On peut désormais définir le type de chacun de nos arguments de fonctions et\ndéfinir des interfaces de classe. Et si jamais le compilateur s&#39;aperçoit qu&#39;on\nessaie de faire rentrer des ronds dans des carrés, il nous balance une\nexception et il compile pas.</p>\n\n<p>On peut aussi définir &quot;facilement&quot; des variables privées et publiques et même\ngénerer automatiquement des getters et des setters. Ouais, ouais, comme un vrai\njavaiste.</p>\n\n<p>Bon, à part ça y a des linters et ça génère des sourcemaps.</p>\n\n<p>J&#39;ai vraiment beaucoup de mal à voir l&#39;intéret du truc, mais j&#39;imagine que ça\nva encore plus plaire aux javaistes qui se mettent au front.</p>\n\n<h2>Buffet</h2>\n\n<p>Et comme souvent, le buffet qui suit les talks est toujours l&#39;occasion de\ndiscuter et de rencontrer des gens très intéressants. Hésitez pas à venir taper\nla discut&#39; si vous êtes dans un meetup la prochaine fois.</p>\n",
  "markdown": "[leboncoin]: http://www.leboncoin.fr/\r\n[react]: http://facebook.github.io/react/\r\n[angular]: https://angularjs.org/\r\n[blocket]: http://www.blocket.se/\r\n\r\n[Meetup angular](http://www.meetup.com/AngularJS-Paris/events/219615752/),\r\norganisé par [le bon coin][leboncoin]. J'avais un peu arreté d'aller aux\r\nmeetups angular (trop peu de contenu), mais là le programme annonçait un REX\r\nsur comment mélanger [React][react] et [Angular][angular], du coup, j'étais\r\ncurieux.\r\n\r\nLe bon coin, derrière leurs airs de sites des années 80 mis en ligne dans un\r\ngarage possède en fait de formidables bureaux en plein Paris. Le premier site\r\ndate de 2006 et est Norvégien, puis la France a été la première filiale en\r\n2007 avant que le système ne s'implante dans plus de 35 pays.\r\n\r\nLa technologie sous-jacente est un moteur custom codé en C nommé [blocket][] et\r\nréutilisé par toutes les filliales (qui peuvent donc faire des mises à jour de\r\nleur moteur facilement) avec quelques petites différences culturelles pour\r\nchaque pays.\r\n\r\nD'un seul dev au départ, ils sont maintenant 250 dans la boite avec un objectif\r\nà 350 pour la fin de l'année. Le bon coin, c'est des chiffres de consultations\r\nextraordinaires. 90 millions de pages vues par mois, essentiellement des\r\nrésultats de recherche, donc sans possibilité de mise en cache.\r\n\r\nIls parviennent quand même à un `startRender` moyen de 0.7s. 6e site le plus\r\nvisité de France, 700.000 nouvelles annonces chaque jour, 2 datacenters de 400\r\nserveurs. En terme de charge, c'est du très lourd, leur conso normale\r\ncorrespondant aux pics de charge de ce qu'on connait habituellement.\r\n\r\nAu dela du cœur de l'appli, il y a toutes les applications de gestion\r\n(modération, monitoring, etc) qui sont développés dans des tas de langages\r\ndifférents. Il y en a pour tous les gouts : PostgreSQL, Python, Ruby, Go,\r\nShell, PHP, des apps natives, du big data, de l'hadoop, du capybara.\r\n\r\nAh, et la question qu'on se pose tous. Non, le compte\r\n[@TopBonCoin](https://twitter.com/TopBonCoin) n'est pas officiel, le bon coin\r\nne faisant actuellement aucune publicité ou community management.\r\n\r\nBon, assez parlé de l'hôte, place aux talks.\r\n\r\n## React et Angular\r\n\r\nJulien Bouquillon, alias [@revolunet](https://twitter.com/revolunet) viens nous\r\nfaire un retour d'expérience sur l'intégration de React dans Angular. Il\r\na entendu beaucoup de bien de React et a voulu voir si ça se plugguait\r\nfacilement.\r\n\r\nÇa fait deux ans qu'il fait de l'Angular, sur du mobile et sur du desktop et le\r\nproblème récurrent pour lui, ce sont les perfs. Essentiellement sur mobile\r\nd'ailleurs. Les problèmes de perf sont les mêmes sur les deux plateformes, mais\r\nles desktop étant plus puissants, il faut vraiment de grosses apps pour\r\nressentir les ralentissement.\r\n\r\nVu que React mets en avant sa rapidité, il a décidé de troquer les directives\r\nd'Angular par des composants React pour voir la différence. Pour lui le reste\r\nd'Angular est très bon. On gagne en productivité et en réusabilité, le\r\nframework fournit plein de choses de base et tout ça se teste facilement.\r\nGlobalement, super framework... sauf pour les perfs.\r\n\r\n### What's wrong with Angular ?\r\n\r\nParce que le gros problème d'Angular se trouve dans le data-binding, bête et\r\nméchant. C'est le coté magique qui nous attire au début dans le framework, mais\r\nc'est aussi le goulot de performances. Quand on inclue une variable dans un\r\ntemplate pour qu'elle soit bindée, l'algo simpliste d'Angular va simplement\r\nré-évaluer chaque variable à chaque événement de l'utilisateur. C'est à dire au\r\nclic, au scroll, au touch, au keypress. Voire même sur des events qui ne\r\nviennent pas du user, comme le retour d'une requete HTTP.\r\n\r\nEt ce, même si les éléments en questions sont en dehors du viewport, ou qu'ils\r\nn'ont aucun rapport avec l'élément actuellement modifié. Bête et méchant on\r\nvous dit.\r\n\r\nBon, sur une appli desktop, on voit pas trop le problème, ça va super vite.\r\nMais sur mobile, on peut commencer à percevoir la lenteur, voir à la subir.\r\nÀ chaque interaction, la totalité du DOM est réevalué, c'est pas rien. C'est\r\nvraiment du _dirty_ checking.\r\n\r\nSi on veut fournir un expérience smooth, il nous faut viser du 60 fps, ce qui\r\ncorresponds à 16ms pour un refresh. 16ms pour un refresh de tout le DOM, c'est\r\npas énorme.\r\n\r\nMalheureusement, Angular ne nous donne pas beaucoup de points d'actions pour\r\npouvoir influencer ou améliorer ce rendering, le processus fait plus ou moins\r\npartie intégrante du core du méchanisme.\r\n\r\nLa version 1.3 a fait de grosses améliorations à ce sujet, d'au moins 50% de\r\ngain. Elle introduit aussi le principe des `bind-once`, et des filters\r\nstateful, qui peuvent n'être executés qu'une seule fois pour chaque valeur\r\npassée. On peut aussi éviter de mettre des méthodes à évaluer dans les\r\ntemplates mais simplement des variables, utiliser la syntax `track by` des\r\n`ng-repeat` et toujours essayer de mettre ses event handler sur les éléments\r\nles plus hauts.\r\n\r\nMalheureusement, il reste le cas des keypress. Si j'ai un input, la totalité de\r\nmon DOM est réévalué pour chaque touche que va taper mon utilisateur.\r\n\r\n### Et React ?\r\n\r\nReact de son coté fonctionne avec un système intermédiaire entre ses data et le\r\nDOM, il y intercale un concept qui lui est propre : le virtual DOM. Les\r\nmodifications de data influent directement sur le vDOM (qui n'est pas rendu\r\ndirectement), et seulement le diff entre le DOM actuel et le vDOM sont reportés\r\ndans le DOM. Ça marche très bien, et du coup seul ce qui a changé est modifié.\r\n\r\nReact intègre aussi par défaut un système d'event delegation intelligent.\r\nPlutôt que d'ajouter des handler sur plusieurs éléments, il ajoute un handler\r\ngénéral sur la page et renvoie l'event au bon élément cliqué. On arrete comme\r\nça de dupliquer les handlers.\r\n\r\nEt surtout, React est explicite. Plus de magie. Chaque composant possède sa\r\nméthode `render` qui va retourner du HTML. On peut comme ça tester unitairement\r\nle rendu, mais surtout chaque composant est isolé et ses données ne fuitent\r\nplus vers l'extérieur. Seul le contenu du composant est modifié, sans que cela\r\nn'induise un rechargement de la totalité du DOM de la page.\r\n\r\nSans compter que React s'intègre parfaitement dans l'écosystem npm et\r\nbrowserify.\r\n\r\n### Benchmarks\r\n\r\nIl nous a fait une démo d'un même composant codé une fois en Angular et une\r\nfois en React pour voir la différence de perfs. C'était un tableau de 100\r\néléments et de 5-6 colonnes. En cochant la première colonne de chaque\r\nligne, on pouvait \"barrer\" l'élément.\r\n\r\nEn React comme en Angular, le chargement initial du composant prends environ\r\nautant de temps. Pas de gain à attendre de ce coté là. Par contre, si on coche\r\nune ligne du tableau Angular, les 1000 éléments sont ré-évalués alors que si on\r\ncoche celle de React, seule la ligne cliquée est modifiée.\r\n\r\nLà où c'est pire, c'est qu'en ajoutant un champ d'input au dessus du tableau\r\nAngular, chaque `keypress` ré-évaluait la totalité du tableau. Et pire que\r\ntout, on a ajouté un bouton qui ne faisait rien (pas de `ng-click`, rien). Et\r\nbien cliquer dessus rechargeait encore tout le DOM Angular.\r\n\r\nJe crois que toute la beauté de React peut se résumer dans la phrase suivante\r\nde Julien :\r\n\r\n> En React, un bouton qui ne fait rien, ne fait rien.\r\n\r\n### Bon, et mon React il va rentrer dans mon Angular ?\r\n\r\nOui. Il est tout à fait possible de mettre un composant React au beau milieu\r\nd'une appli Angular. Il va vivre sa vie en isolation, sans générer de reflow\r\nAngular, et sans se modifier quand Angular se modifie.\r\n\r\nPar contre si on veut l'introduire dans notre cycle Angular normal, il faut le\r\nwrapper lui-même dans une directive. Par contre, à partir du code de la\r\ndirective, on entre dans un mode _explicit > implicit_ où on va définir des\r\ncallbacks à notre composant qu'il sera chargé d'appeller quand il voudra\r\ncommuniquer son état vers l'extérieur, et on ajoutera aussi des méthodes au\r\ncomposant pour pouvoir lui passer de nouvelles data depuis Angular.\r\n\r\nC'est un peu plus de plomberie, mais on est alors certain qu'il ne se mettra\r\npas à jour sans raison, et il pourra agir en isolation complète.\r\n\r\nIl existe un projet, [ngReact](https://github.com/davidchang/ngReact) qui\r\ndéfini justement ce type de directive, mais ils vont trop loin et ajoutent des\r\nwatchers automatiques pour passer les infos d'Angular vers React et vice-versa,\r\nce qui nous fait revenir au problème de dirty checking du départ.\r\n\r\n### Conclusion\r\n\r\nReact peut s'intégrer correctement dans Angular et vivre sa vie correctement en\r\nprofitant de manière isolée de ses avantages. La plomberie reste un peu\r\nmanuelle, mais permet une belle isolation. Néanmoins, la philosophie de l'un et\r\nde l'autre étant tellement différentes, je ne suis pas sur qu'on tire vraiment\r\nle meilleur des deux mondes.\r\n\r\n## KillrChat\r\n\r\n[Duy Hai Doan](https://twitter.com/doanduyhai), tech évangéliste chez\r\n[Datastax](http://www.datastax.com/) nous a [parlé d'un pet\r\nproject](http://www.slideshare.net/doanduyhai/introduction-to-killrchat) de\r\nchat à base d'Angular, [Spring Boot](http://projects.spring.io/spring-boot/) et\r\n[Cassandra](http://cassandra.apache.org/). C'est cool, il est payé pour faire\r\ndes meetups et présenter Cassandra, du coup avec trois technos cools comme ça\r\nil peut réutiliser le même talk :)\r\n\r\nL'idée de faire une appli de chat vient de sa frustration de faire des ateliers\r\npour faire découvrir Cassandra et que les élèves ne repartent qu'avec un énième\r\n\"Hello World\" qui ne sert pas à grand chose. Là, il a une vraie appli qui\r\ntouche à toutes les couches.\r\n\r\nEt surtout, elle peut profiter des possibilités de scaling de Cassandra. En\r\ngros, quand le nombre de user se mets à grossir, il suffit d'augmenter le\r\nnombre de nœuds sur lesquels les données sont stockées dans Cassandra.\r\nCassandra s'occupe de répartir les nouvelles données uniformément sur chaque\r\nnœud de manière à ce qu'aucun ne soit particulièrement submergé. Pour plus\r\nd'infos sur le fonctionne de Cassandra, je vous invite à relire [mon\r\ncompte-rendu](http://meetups.pixelastic.com/2014/10/15/nodejs-chapitre-2-conference-2/)\r\ndu meetup nodejs paris.\r\n\r\nLe chat qu'il a développé communique avec le back-end Spring Boot en websocket,\r\navec [SockJS](https://github.com/sockjs). Entre les deux, il suffit de mettre\r\nun broker qui sait scaler ([RabbitMQ](http://www.rabbitmq.com/),\r\n[ZeroMQ](http://zeromq.org/), [Kafka](http://kafka.apache.org/)) qui implémente\r\nun simple système de [pub/sub](http://fr.wikipedia.org/wiki/PubSub) et front et\r\nback peuvent communiquer sans soucis, même avec une forte charge.\r\n\r\n### Et Angular dans tout ça ?\r\n\r\nDuy Hai vient surtout du monde Java, le front c'est pas forcément son domaine.\r\nMais il a kiffé Angular, il s'y est bien retrouvé. Il a aussi apprécié le\r\nfait qu'il y ait des outils pour [se plugguer facilement avec\r\nBootstrap](http://angular-ui.github.io/bootstrap/) (car\r\ncomme il le dit lui-même, si on lui laisse le design d'un site ça sera\r\nhorrible, avec bootstrap au moins c'est pas trop moche).\r\n\r\nIl a quand même très rapidement implémenté des tas de bonnes pratiques en\r\nAngular (je ne sais pas si ce sont des bonnes pratiques issues de Java ou non).\r\nPar exemple, toute sa logique est distribuéed dans des services stateless, ses\r\ncontrollers se chargeant simplement d'un rôle de passe-plat.\r\n\r\nPar contre, comme beaucoup, il s'est fait avoir par les\r\n[$resources](https://docs.angularjs.org/api/ngResource/service/$resource).\r\nDéjà, selon qu'on utilise les ressources avec des méthodes d'instances ou des\r\nméthodes de classe, ce n'est pas la même type d'objet qui est retourné et le\r\nchaining des promises en devient d'autant plus complexe (sans parler des\r\npromises angular qui ont leurs propres quirks).\r\n\r\nCe qu'il regrette dans Angular c'est qu'il faille une bonne connaissance de\r\nJavascript pour comprendre réellement ce qu'il se passe sous le capot.\r\nHeureusement pour lui, il a découvert\r\n[angular-from-scratch](https://github.com/Zenika/angular-from-scratch) qui se\r\npropose de recoder les mécaniques principales d'Angular depuis rien pour bien\r\nassimiler petit à petit chacun des concepts.\r\n\r\nGlobalement une présentation assez chouette, un REX avec des technos sympas.\r\n\r\n## Typescript\r\n\r\nPour finir, [Paul Souche](https://twitter.com/paulsouche), de\r\n[Sfeir](http://www.sfeir.com/) nous parle de\r\n[Typescript](http://www.typescriptlang.org/).\r\n\r\nBon, je vais la faire assez vite pour le coup. Typescript est une surcouche\r\nà Javascript, un peu comme [Coffeescript](http://coffeescript.org/), qui\r\ncompile en Javascript. Le truc qu'apporte Typescript, c'est un typage fort des\r\nvariables.\r\n\r\nOn peut désormais définir le type de chacun de nos arguments de fonctions et\r\ndéfinir des interfaces de classe. Et si jamais le compilateur s'aperçoit qu'on\r\nessaie de faire rentrer des ronds dans des carrés, il nous balance une\r\nexception et il compile pas.\r\n\r\nOn peut aussi définir \"facilement\" des variables privées et publiques et même\r\ngénerer automatiquement des getters et des setters. Ouais, ouais, comme un vrai\r\njavaiste.\r\n\r\nBon, à part ça y a des linters et ça génère des sourcemaps.\r\n\r\nJ'ai vraiment beaucoup de mal à voir l'intéret du truc, mais j'imagine que ça\r\nva encore plus plaire aux javaistes qui se mettent au front.\r\n\r\n## Buffet\r\n\r\nEt comme souvent, le buffet qui suit les talks est toujours l'occasion de\r\ndiscuter et de rencontrer des gens très intéressants. Hésitez pas à venir taper\r\nla discut' si vous êtes dans un meetup la prochaine fois.\r\n"
}