Fuites mémoires, globalement pas un soucis, sauf si app reste ouverte.

Chrome dev tools, firebug, profiler de base de firefox.

Nightlies chrome et firefox. canary et aurora. pas stables mais parfaites pour
le debugging.

pour chrome, créer un nouveau profil pour débugguer. preferences, utilisateur,
nouveau profil. pas de bookmark, pas d'extensions, évite le bugs de l'extension
qui ne sont pas liées au site web

firefox, profile manager, nouveaux profils pour débugguer.

Safari seulement sur mac. Longtemps ont eu les mêmes outils de dev que Chrome,
aujourd'hui différents, outils très mauvais. Sous mac, utiliser WebKit.app,
débuggueur bien foutu.

IE11, Windows 8.1, très bon outil de debug.

Chrome dev tool. Appuyer sur h cache l'élement sélectionné. Suppr pour le
supprimer. Ctrl-Z pour annuler. Drag'n'drop pour déplacer noeuds du dom.

A droite, possiblité de forcer lers stles hover, active, etc.

Incrémenter chiffres avec haut/bas + ctrl, shift, etc

console.log accepte args, printf %O permet d'étudier l'objet.

Utile pour débugguer un groupe de logs
console.group console.groupEnd
console.time, console.timeEnd

console.table ?

angularjs, ember, knowkout, backbone extensions spécialisées
JSTerm, comprends coffeescript

Remplace ide ?
--------------

sans Chrome workspace.
Modification dans l'onglet css. Puis dans Sources, fichiers modifiés, avec diff
et possibilité de sauvegarder les fichiers. Mais pas possible avec
preprocesseur.

Avec workspace, on ajoute des dossiers de son disque avec un mapping d'un
fichier vers un autre. Comprends Sass, Less, Stylus pour mettre à jour.
A active dans les options. Super bien intégré. Permet de cliquer sur propriété
ou fichier pour modifier le css, comprends l'enddroit où les vars sont
définies. Mais semble avoir conflit de version avec sass, compass, etc.

::after et ::before affichés dans le dom

Démos
-----

Firefox scratchpad, pretty print.

chrome, snippets, nouveau fichier, coller le code pretty printé.

$ dispo par défaut dans chrome devtools. Si jquery l'utilise, sinon default
getElemetBy Selector.

peut scroller jusqu'à l'élément

---

peut ajouter des break points sur des événements. Genre scroll.
Pretty print jquery ?

Breakpoint sur le changement de valeur d'un attribut, genre un style. Envoie
à jQuery, peut remonter la pile du stack. Valeur d'une var en laissant le
curseur dessus.

timeline
--------

Implémentation de redraw d'images, d'éléments absolute, relative, etc. Utiliser
la timeline pour voir où ça coince, car chaque browser peut bloquer
à différents moments. Changera au fil du temps, pas de règle absolue pour
comment le fixer, mais bien regarder sur la timeline ce qui coince.

tester un scroll poussif. Timeline, frames. Start enregistrement. Affiche les
fps. Essayer d'etre en dessous de 60fps. Selection sur la timeline, affiche la
cascade. Pouvoir trouver les recalculate style, savoir ce qui les appelle,
modifier.


-webkit-transform:translateZ(0) pour faire passer un élément fixed au gpu et
donc ne pas le redraw à chaque scroll.

background-fixed à mettre sur le body.

enregistrement de memory dans timeline. Heap Snapshots. Mais mets tout, meme le
dev. Utiliser delta avec +7 car cliqué 7 fois. Permet de voir, si on connait
son code, les potentiels problèmes, si certains objets sont trop présents et/ou
devraient être garbage collectés.

Désactiver les effets de survol au scroll, pour améliorer le
redraw/refresh/reflow.

Show composited layer border pour voir les layers qui sont passés au gpu par
translateZ(0)

Safari Layer indique pourquoi chaque layer est promu comme layer.

http://bit.ly/pwdevtools




